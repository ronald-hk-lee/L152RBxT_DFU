
L152RBxT_DFU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008798  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080088d4  080088d4  000188d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a00  08008a00  00020140  2**0
                  CONTENTS
  4 .ARM          00000008  08008a00  08008a00  00018a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a08  08008a08  00020140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a08  08008a08  00018a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a0c  08008a0c  00018a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000140  20000000  08008a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d30  20000140  08008b50  00020140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e70  08008b50  00020e70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cda  00000000  00000000  00020169  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000357c  00000000  00000000  00034e43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec8  00000000  00000000  000383c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  00039288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ed5  00000000  00000000  00039fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fd05  00000000  00000000  00050e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c1bc  00000000  00000000  00060b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dcd3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d94  00000000  00000000  000dcdbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000140 	.word	0x20000140
 8000158:	00000000 	.word	0x00000000
 800015c:	080088bc 	.word	0x080088bc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000144 	.word	0x20000144
 8000178:	080088bc 	.word	0x080088bc

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b974 	b.w	800048c <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	468c      	mov	ip, r1
 80001c2:	4604      	mov	r4, r0
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d14b      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4615      	mov	r5, r2
 80001ce:	d967      	bls.n	80002a0 <__udivmoddi4+0xe4>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0720 	rsb	r7, r2, #32
 80001da:	fa01 f302 	lsl.w	r3, r1, r2
 80001de:	fa20 f707 	lsr.w	r7, r0, r7
 80001e2:	4095      	lsls	r5, r2
 80001e4:	ea47 0c03 	orr.w	ip, r7, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001ee:	fbbc f7fe 	udiv	r7, ip, lr
 80001f2:	fa1f f885 	uxth.w	r8, r5
 80001f6:	fb0e c317 	mls	r3, lr, r7, ip
 80001fa:	fb07 f908 	mul.w	r9, r7, r8
 80001fe:	0c21      	lsrs	r1, r4, #16
 8000200:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000204:	4599      	cmp	r9, r3
 8000206:	d909      	bls.n	800021c <__udivmoddi4+0x60>
 8000208:	18eb      	adds	r3, r5, r3
 800020a:	f107 31ff 	add.w	r1, r7, #4294967295
 800020e:	f080 811c 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000212:	4599      	cmp	r9, r3
 8000214:	f240 8119 	bls.w	800044a <__udivmoddi4+0x28e>
 8000218:	3f02      	subs	r7, #2
 800021a:	442b      	add	r3, r5
 800021c:	eba3 0309 	sub.w	r3, r3, r9
 8000220:	fbb3 f0fe 	udiv	r0, r3, lr
 8000224:	fb0e 3310 	mls	r3, lr, r0, r3
 8000228:	fb00 f108 	mul.w	r1, r0, r8
 800022c:	b2a4      	uxth	r4, r4
 800022e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000232:	42a1      	cmp	r1, r4
 8000234:	d909      	bls.n	800024a <__udivmoddi4+0x8e>
 8000236:	192c      	adds	r4, r5, r4
 8000238:	f100 33ff 	add.w	r3, r0, #4294967295
 800023c:	f080 8107 	bcs.w	800044e <__udivmoddi4+0x292>
 8000240:	42a1      	cmp	r1, r4
 8000242:	f240 8104 	bls.w	800044e <__udivmoddi4+0x292>
 8000246:	3802      	subs	r0, #2
 8000248:	442c      	add	r4, r5
 800024a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024e:	2700      	movs	r7, #0
 8000250:	1a64      	subs	r4, r4, r1
 8000252:	b11e      	cbz	r6, 800025c <__udivmoddi4+0xa0>
 8000254:	2300      	movs	r3, #0
 8000256:	40d4      	lsrs	r4, r2
 8000258:	e9c6 4300 	strd	r4, r3, [r6]
 800025c:	4639      	mov	r1, r7
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0xbe>
 8000266:	2e00      	cmp	r6, #0
 8000268:	f000 80ec 	beq.w	8000444 <__udivmoddi4+0x288>
 800026c:	2700      	movs	r7, #0
 800026e:	e9c6 0100 	strd	r0, r1, [r6]
 8000272:	4638      	mov	r0, r7
 8000274:	4639      	mov	r1, r7
 8000276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027a:	fab3 f783 	clz	r7, r3
 800027e:	2f00      	cmp	r7, #0
 8000280:	d148      	bne.n	8000314 <__udivmoddi4+0x158>
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__udivmoddi4+0xd0>
 8000286:	4282      	cmp	r2, r0
 8000288:	f200 80fb 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 800028c:	1a84      	subs	r4, r0, r2
 800028e:	eb61 0303 	sbc.w	r3, r1, r3
 8000292:	2001      	movs	r0, #1
 8000294:	469c      	mov	ip, r3
 8000296:	2e00      	cmp	r6, #0
 8000298:	d0e0      	beq.n	800025c <__udivmoddi4+0xa0>
 800029a:	e9c6 4c00 	strd	r4, ip, [r6]
 800029e:	e7dd      	b.n	800025c <__udivmoddi4+0xa0>
 80002a0:	b902      	cbnz	r2, 80002a4 <__udivmoddi4+0xe8>
 80002a2:	deff      	udf	#255	; 0xff
 80002a4:	fab2 f282 	clz	r2, r2
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	f040 808f 	bne.w	80003cc <__udivmoddi4+0x210>
 80002ae:	2701      	movs	r7, #1
 80002b0:	1b49      	subs	r1, r1, r5
 80002b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002b6:	fa1f f985 	uxth.w	r9, r5
 80002ba:	fbb1 fef8 	udiv	lr, r1, r8
 80002be:	fb08 111e 	mls	r1, r8, lr, r1
 80002c2:	fb09 f00e 	mul.w	r0, r9, lr
 80002c6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80002ca:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002ce:	4298      	cmp	r0, r3
 80002d0:	d907      	bls.n	80002e2 <__udivmoddi4+0x126>
 80002d2:	18eb      	adds	r3, r5, r3
 80002d4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002d8:	d202      	bcs.n	80002e0 <__udivmoddi4+0x124>
 80002da:	4298      	cmp	r0, r3
 80002dc:	f200 80cd 	bhi.w	800047a <__udivmoddi4+0x2be>
 80002e0:	468e      	mov	lr, r1
 80002e2:	1a1b      	subs	r3, r3, r0
 80002e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ec:	fb09 f900 	mul.w	r9, r9, r0
 80002f0:	b2a4      	uxth	r4, r4
 80002f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	d907      	bls.n	800030a <__udivmoddi4+0x14e>
 80002fa:	192c      	adds	r4, r5, r4
 80002fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x14c>
 8000302:	45a1      	cmp	r9, r4
 8000304:	f200 80b6 	bhi.w	8000474 <__udivmoddi4+0x2b8>
 8000308:	4618      	mov	r0, r3
 800030a:	eba4 0409 	sub.w	r4, r4, r9
 800030e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000312:	e79e      	b.n	8000252 <__udivmoddi4+0x96>
 8000314:	f1c7 0520 	rsb	r5, r7, #32
 8000318:	40bb      	lsls	r3, r7
 800031a:	fa22 fc05 	lsr.w	ip, r2, r5
 800031e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000322:	fa21 f405 	lsr.w	r4, r1, r5
 8000326:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800032a:	fbb4 f9fe 	udiv	r9, r4, lr
 800032e:	fa1f f88c 	uxth.w	r8, ip
 8000332:	fb0e 4419 	mls	r4, lr, r9, r4
 8000336:	fa20 f305 	lsr.w	r3, r0, r5
 800033a:	40b9      	lsls	r1, r7
 800033c:	fb09 fa08 	mul.w	sl, r9, r8
 8000340:	4319      	orrs	r1, r3
 8000342:	0c0b      	lsrs	r3, r1, #16
 8000344:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000348:	45a2      	cmp	sl, r4
 800034a:	fa02 f207 	lsl.w	r2, r2, r7
 800034e:	fa00 f307 	lsl.w	r3, r0, r7
 8000352:	d90b      	bls.n	800036c <__udivmoddi4+0x1b0>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f109 30ff 	add.w	r0, r9, #4294967295
 800035c:	f080 8088 	bcs.w	8000470 <__udivmoddi4+0x2b4>
 8000360:	45a2      	cmp	sl, r4
 8000362:	f240 8085 	bls.w	8000470 <__udivmoddi4+0x2b4>
 8000366:	f1a9 0902 	sub.w	r9, r9, #2
 800036a:	4464      	add	r4, ip
 800036c:	eba4 040a 	sub.w	r4, r4, sl
 8000370:	fbb4 f0fe 	udiv	r0, r4, lr
 8000374:	fb0e 4410 	mls	r4, lr, r0, r4
 8000378:	fb00 fa08 	mul.w	sl, r0, r8
 800037c:	b289      	uxth	r1, r1
 800037e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000382:	45a2      	cmp	sl, r4
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x1dc>
 8000386:	eb1c 0404 	adds.w	r4, ip, r4
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	d26b      	bcs.n	8000468 <__udivmoddi4+0x2ac>
 8000390:	45a2      	cmp	sl, r4
 8000392:	d969      	bls.n	8000468 <__udivmoddi4+0x2ac>
 8000394:	3802      	subs	r0, #2
 8000396:	4464      	add	r4, ip
 8000398:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039c:	fba0 8902 	umull	r8, r9, r0, r2
 80003a0:	eba4 040a 	sub.w	r4, r4, sl
 80003a4:	454c      	cmp	r4, r9
 80003a6:	4641      	mov	r1, r8
 80003a8:	46ce      	mov	lr, r9
 80003aa:	d354      	bcc.n	8000456 <__udivmoddi4+0x29a>
 80003ac:	d051      	beq.n	8000452 <__udivmoddi4+0x296>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d069      	beq.n	8000486 <__udivmoddi4+0x2ca>
 80003b2:	1a5a      	subs	r2, r3, r1
 80003b4:	eb64 040e 	sbc.w	r4, r4, lr
 80003b8:	fa04 f505 	lsl.w	r5, r4, r5
 80003bc:	fa22 f307 	lsr.w	r3, r2, r7
 80003c0:	40fc      	lsrs	r4, r7
 80003c2:	431d      	orrs	r5, r3
 80003c4:	e9c6 5400 	strd	r5, r4, [r6]
 80003c8:	2700      	movs	r7, #0
 80003ca:	e747      	b.n	800025c <__udivmoddi4+0xa0>
 80003cc:	4095      	lsls	r5, r2
 80003ce:	f1c2 0320 	rsb	r3, r2, #32
 80003d2:	fa21 f003 	lsr.w	r0, r1, r3
 80003d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003da:	fbb0 f7f8 	udiv	r7, r0, r8
 80003de:	fa1f f985 	uxth.w	r9, r5
 80003e2:	fb08 0017 	mls	r0, r8, r7, r0
 80003e6:	fa24 f303 	lsr.w	r3, r4, r3
 80003ea:	4091      	lsls	r1, r2
 80003ec:	fb07 fc09 	mul.w	ip, r7, r9
 80003f0:	430b      	orrs	r3, r1
 80003f2:	0c19      	lsrs	r1, r3, #16
 80003f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003f8:	458c      	cmp	ip, r1
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d907      	bls.n	8000410 <__udivmoddi4+0x254>
 8000400:	1869      	adds	r1, r5, r1
 8000402:	f107 30ff 	add.w	r0, r7, #4294967295
 8000406:	d231      	bcs.n	800046c <__udivmoddi4+0x2b0>
 8000408:	458c      	cmp	ip, r1
 800040a:	d92f      	bls.n	800046c <__udivmoddi4+0x2b0>
 800040c:	3f02      	subs	r7, #2
 800040e:	4429      	add	r1, r5
 8000410:	eba1 010c 	sub.w	r1, r1, ip
 8000414:	fbb1 f0f8 	udiv	r0, r1, r8
 8000418:	fb08 1c10 	mls	ip, r8, r0, r1
 800041c:	fb00 fe09 	mul.w	lr, r0, r9
 8000420:	b299      	uxth	r1, r3
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	458e      	cmp	lr, r1
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x27e>
 800042a:	1869      	adds	r1, r5, r1
 800042c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000430:	d218      	bcs.n	8000464 <__udivmoddi4+0x2a8>
 8000432:	458e      	cmp	lr, r1
 8000434:	d916      	bls.n	8000464 <__udivmoddi4+0x2a8>
 8000436:	3802      	subs	r0, #2
 8000438:	4429      	add	r1, r5
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000442:	e73a      	b.n	80002ba <__udivmoddi4+0xfe>
 8000444:	4637      	mov	r7, r6
 8000446:	4630      	mov	r0, r6
 8000448:	e708      	b.n	800025c <__udivmoddi4+0xa0>
 800044a:	460f      	mov	r7, r1
 800044c:	e6e6      	b.n	800021c <__udivmoddi4+0x60>
 800044e:	4618      	mov	r0, r3
 8000450:	e6fb      	b.n	800024a <__udivmoddi4+0x8e>
 8000452:	4543      	cmp	r3, r8
 8000454:	d2ab      	bcs.n	80003ae <__udivmoddi4+0x1f2>
 8000456:	ebb8 0102 	subs.w	r1, r8, r2
 800045a:	eb69 020c 	sbc.w	r2, r9, ip
 800045e:	3801      	subs	r0, #1
 8000460:	4696      	mov	lr, r2
 8000462:	e7a4      	b.n	80003ae <__udivmoddi4+0x1f2>
 8000464:	4618      	mov	r0, r3
 8000466:	e7e8      	b.n	800043a <__udivmoddi4+0x27e>
 8000468:	4608      	mov	r0, r1
 800046a:	e795      	b.n	8000398 <__udivmoddi4+0x1dc>
 800046c:	4607      	mov	r7, r0
 800046e:	e7cf      	b.n	8000410 <__udivmoddi4+0x254>
 8000470:	4681      	mov	r9, r0
 8000472:	e77b      	b.n	800036c <__udivmoddi4+0x1b0>
 8000474:	3802      	subs	r0, #2
 8000476:	442c      	add	r4, r5
 8000478:	e747      	b.n	800030a <__udivmoddi4+0x14e>
 800047a:	f1ae 0e02 	sub.w	lr, lr, #2
 800047e:	442b      	add	r3, r5
 8000480:	e72f      	b.n	80002e2 <__udivmoddi4+0x126>
 8000482:	4638      	mov	r0, r7
 8000484:	e707      	b.n	8000296 <__udivmoddi4+0xda>
 8000486:	4637      	mov	r7, r6
 8000488:	e6e8      	b.n	800025c <__udivmoddi4+0xa0>
 800048a:	bf00      	nop

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	f107 030c 	add.w	r3, r7, #12
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <MX_GPIO_Init+0x80>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a19      	ldr	r2, [pc, #100]	; (8000510 <MX_GPIO_Init+0x80>)
 80004ac:	f043 0320 	orr.w	r3, r3, #32
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <MX_GPIO_Init+0x80>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f003 0320 	and.w	r3, r3, #32
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_GPIO_Init+0x80>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	4a13      	ldr	r2, [pc, #76]	; (8000510 <MX_GPIO_Init+0x80>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	61d3      	str	r3, [r2, #28]
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <MX_GPIO_Init+0x80>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <MX_GPIO_Init+0x80>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <MX_GPIO_Init+0x80>)
 80004dc:	f043 0304 	orr.w	r3, r3, #4
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <MX_GPIO_Init+0x80>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 0304 	and.w	r3, r3, #4
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Firmup_Pin_Pin;
 80004ee:	2380      	movs	r3, #128	; 0x80
 80004f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f2:	2300      	movs	r3, #0
 80004f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Firmup_Pin_GPIO_Port, &GPIO_InitStruct);
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	4619      	mov	r1, r3
 8000500:	4804      	ldr	r0, [pc, #16]	; (8000514 <MX_GPIO_Init+0x84>)
 8000502:	f000 fd7f 	bl	8001004 <HAL_GPIO_Init>

}
 8000506:	bf00      	nop
 8000508:	3720      	adds	r7, #32
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023800 	.word	0x40023800
 8000514:	40020800 	.word	0x40020800

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b5b0      	push	{r4, r5, r7, lr}
 800051a:	b090      	sub	sp, #64	; 0x40
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	typedef  void (*pFunction)(void);
	uint32_t JumpAddress;
	void (*Jump_To_Application)(void);

	char msg[50] = {0, };
 800051e:	463b      	mov	r3, r7
 8000520:	2232      	movs	r2, #50	; 0x32
 8000522:	2100      	movs	r1, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f007 fdaf 	bl	8008088 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fa0c 	bl	8000946 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f873 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f7ff ffad 	bl	8000490 <MX_GPIO_Init>
  //MX_USB_DEVICE_Init();
  MX_USART2_UART_Init();
 8000536:	f000 f96b 	bl	8000810 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 800053a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800053e:	f000 fa71 	bl	8000a24 <HAL_Delay>
  sprintf(msg, "DFU Start!\r\n");
 8000542:	463b      	mov	r3, r7
 8000544:	4a2c      	ldr	r2, [pc, #176]	; (80005f8 <main+0xe0>)
 8000546:	461c      	mov	r4, r3
 8000548:	4613      	mov	r3, r2
 800054a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800054c:	c407      	stmia	r4!, {r0, r1, r2}
 800054e:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000550:	463b      	mov	r3, r7
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fe12 	bl	800017c <strlen>
 8000558:	4603      	mov	r3, r0
 800055a:	b29a      	uxth	r2, r3
 800055c:	4639      	mov	r1, r7
 800055e:	f04f 33ff 	mov.w	r3, #4294967295
 8000562:	4826      	ldr	r0, [pc, #152]	; (80005fc <main+0xe4>)
 8000564:	f002 ffaf 	bl	80034c6 <HAL_UART_Transmit>
  //printf("USB_DFU Program Start!! Date[%s], Time[%s]\r\n", __DATE__, __TIME__);

	if (HAL_GPIO_ReadPin(Firmup_Pin_GPIO_Port, Firmup_Pin_Pin) != GPIO_PIN_RESET)
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	4825      	ldr	r0, [pc, #148]	; (8000600 <main+0xe8>)
 800056c:	f000 fec8 	bl	8001300 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d026      	beq.n	80005c4 <main+0xac>
	{
		sprintf(msg, "USBD_DFU_APP_DEFAULT_ADD ..[%08lx]\n\r",(*(__IO uint32_t*)USBD_DFU_APP_DEFAULT_ADD));
 8000576:	4b23      	ldr	r3, [pc, #140]	; (8000604 <main+0xec>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	463b      	mov	r3, r7
 800057c:	4922      	ldr	r1, [pc, #136]	; (8000608 <main+0xf0>)
 800057e:	4618      	mov	r0, r3
 8000580:	f007 fd8a 	bl	8008098 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000584:	463b      	mov	r3, r7
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff fdf8 	bl	800017c <strlen>
 800058c:	4603      	mov	r3, r0
 800058e:	b29a      	uxth	r2, r3
 8000590:	4639      	mov	r1, r7
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	4819      	ldr	r0, [pc, #100]	; (80005fc <main+0xe4>)
 8000598:	f002 ff95 	bl	80034c6 <HAL_UART_Transmit>
		if (((*(__IO uint32_t*)USBD_DFU_APP_DEFAULT_ADD) & 0x2FFFB000 ) == 0x20000000)	//16K
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <main+0xec>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <main+0xf4>)
 80005a2:	4013      	ands	r3, r2
 80005a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005a8:	d10c      	bne.n	80005c4 <main+0xac>
		{
			JumpAddress = *(__IO uint32_t*) (USBD_DFU_APP_DEFAULT_ADD + 4);
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <main+0xf8>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
			Jump_To_Application = (pFunction) JumpAddress;
 80005b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005b2:	63bb      	str	r3, [r7, #56]	; 0x38
			// Initialize user application's Stack Pointer
			__set_MSP(*(__IO uint32_t*) USBD_DFU_APP_DEFAULT_ADD);
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <main+0xec>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	637b      	str	r3, [r7, #52]	; 0x34
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80005ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005bc:	f383 8808 	msr	MSP, r3
			// Jump to user application
			Jump_To_Application();
 80005c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005c2:	4798      	blx	r3
		}
	}
	sprintf(msg,"DFU Upgrade Mode Start.. \n\r");
 80005c4:	463b      	mov	r3, r7
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <main+0xfc>)
 80005c8:	461c      	mov	r4, r3
 80005ca:	4615      	mov	r5, r2
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005d8:	463b      	mov	r3, r7
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fdce 	bl	800017c <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	4639      	mov	r1, r7
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <main+0xe4>)
 80005ec:	f002 ff6b 	bl	80034c6 <HAL_UART_Transmit>
	MX_USB_DEVICE_Init();
 80005f0:	f007 f8ba 	bl	8007768 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0xdc>
 80005f6:	bf00      	nop
 80005f8:	080088d4 	.word	0x080088d4
 80005fc:	20000688 	.word	0x20000688
 8000600:	40020800 	.word	0x40020800
 8000604:	08009000 	.word	0x08009000
 8000608:	080088e4 	.word	0x080088e4
 800060c:	2fffb000 	.word	0x2fffb000
 8000610:	08009004 	.word	0x08009004
 8000614:	0800890c 	.word	0x0800890c

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b092      	sub	sp, #72	; 0x48
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2234      	movs	r2, #52	; 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f007 fd2e 	bl	8008088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <SystemClock_Config+0x94>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000642:	4a1a      	ldr	r2, [pc, #104]	; (80006ac <SystemClock_Config+0x94>)
 8000644:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000648:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064a:	2301      	movs	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064e:	2301      	movs	r3, #1
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800065c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000660:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000662:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4618      	mov	r0, r3
 800066e:	f002 f91d 	bl	80028ac <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000678:	f000 f81a 	bl	80006b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2303      	movs	r3, #3
 8000682:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	2101      	movs	r1, #1
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fc39 	bl	8002f0c <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006a0:	f000 f806 	bl	80006b0 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3748      	adds	r7, #72	; 0x48
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40007000 	.word	0x40007000

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <Error_Handler+0x6>

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <HAL_MspInit+0x58>)
 80006c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <HAL_MspInit+0x58>)
 80006c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006c8:	6253      	str	r3, [r2, #36]	; 0x24
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <HAL_MspInit+0x58>)
 80006cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <HAL_MspInit+0x58>)
 80006d8:	6a1b      	ldr	r3, [r3, #32]
 80006da:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <HAL_MspInit+0x58>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6213      	str	r3, [r2, #32]
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <HAL_MspInit+0x58>)
 80006e4:	6a1b      	ldr	r3, [r3, #32]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_MspInit+0x58>)
 80006f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f2:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_MspInit+0x58>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	6253      	str	r3, [r2, #36]	; 0x24
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_MspInit+0x58>)
 80006fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	40023800 	.word	0x40023800

08000714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <NMI_Handler+0x4>

0800071a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <HardFault_Handler+0x4>

08000720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <MemManage_Handler+0x4>

08000726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <BusFault_Handler+0x4>

0800072c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <UsageFault_Handler+0x4>

08000732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr

0800073e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr

0800074a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr

08000756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800075a:	f000 f947 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000768:	4802      	ldr	r0, [pc, #8]	; (8000774 <USB_LP_IRQHandler+0x10>)
 800076a:	f000 ff0a 	bl	8001582 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000b80 	.word	0x20000b80

08000778 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800077c:	4802      	ldr	r0, [pc, #8]	; (8000788 <USART2_IRQHandler+0x10>)
 800077e:	f002 ff3b 	bl	80035f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000688 	.word	0x20000688

0800078c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000794:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <_sbrk+0x5c>)
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <_sbrk+0x60>)
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <_sbrk+0x64>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d102      	bne.n	80007ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <_sbrk+0x64>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <_sbrk+0x68>)
 80007ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <_sbrk+0x64>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d207      	bcs.n	80007cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007bc:	f007 fc3a 	bl	8008034 <__errno>
 80007c0:	4602      	mov	r2, r0
 80007c2:	230c      	movs	r3, #12
 80007c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ca:	e009      	b.n	80007e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <_sbrk+0x64>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <_sbrk+0x64>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <_sbrk+0x64>)
 80007dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007de:	68fb      	ldr	r3, [r7, #12]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20004000 	.word	0x20004000
 80007ec:	00000400 	.word	0x00000400
 80007f0:	2000015c 	.word	0x2000015c
 80007f4:	20000e70 	.word	0x20000e70

080007f8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <SystemInit+0x14>)
 80007fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000802:	609a      	str	r2, [r3, #8]
#endif
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_USART2_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000848:	f002 fdf0 	bl	800342c <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000852:	f7ff ff2d 	bl	80006b0 <Error_Handler>
  }

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000688 	.word	0x20000688
 8000860:	40004400 	.word	0x40004400

08000864 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <HAL_UART_MspInit+0x8c>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d12f      	bne.n	80008e6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000886:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <HAL_UART_MspInit+0x90>)
 8000888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088a:	4a1a      	ldr	r2, [pc, #104]	; (80008f4 <HAL_UART_MspInit+0x90>)
 800088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000890:	6253      	str	r3, [r2, #36]	; 0x24
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_UART_MspInit+0x90>)
 8000894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_UART_MspInit+0x90>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <HAL_UART_MspInit+0x90>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_UART_MspInit+0x90>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008b6:	230c      	movs	r3, #12
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c6:	2307      	movs	r3, #7
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <HAL_UART_MspInit+0x94>)
 80008d2:	f000 fb97 	bl	8001004 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	2026      	movs	r0, #38	; 0x26
 80008dc:	f000 f99b 	bl	8000c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008e0:	2026      	movs	r0, #38	; 0x26
 80008e2:	f000 f9b4 	bl	8000c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008e6:	bf00      	nop
 80008e8:	3728      	adds	r7, #40	; 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40004400 	.word	0x40004400
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000

080008fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008fe:	e003      	b.n	8000908 <LoopCopyDataInit>

08000900 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000902:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000904:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000906:	3104      	adds	r1, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000908:	480a      	ldr	r0, [pc, #40]	; (8000934 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800090c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800090e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000910:	d3f6      	bcc.n	8000900 <CopyDataInit>
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000914:	e002      	b.n	800091c <LoopFillZerobss>

08000916 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000918:	f842 3b04 	str.w	r3, [r2], #4

0800091c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800091e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000920:	d3f9      	bcc.n	8000916 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000922:	f7ff ff69 	bl	80007f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000926:	f007 fb8b 	bl	8008040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fdf5 	bl	8000518 <main>
  bx lr
 800092e:	4770      	bx	lr
  ldr r3, =_sidata
 8000930:	08008a10 	.word	0x08008a10
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000938:	20000140 	.word	0x20000140
  ldr r2, =_sbss
 800093c:	20000140 	.word	0x20000140
  ldr r3, = _ebss
 8000940:	20000e70 	.word	0x20000e70

08000944 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_IRQHandler>

08000946 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f955 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000956:	2000      	movs	r0, #0
 8000958:	f000 f80e 	bl	8000978 <HAL_InitTick>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d002      	beq.n	8000968 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	e001      	b.n	800096c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000968:	f7ff fea6 	bl	80006b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800096c:	79fb      	ldrb	r3, [r7, #7]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000980:	2300      	movs	r3, #0
 8000982:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_InitTick+0x68>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d022      	beq.n	80009d2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <HAL_InitTick+0x6c>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <HAL_InitTick+0x68>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000998:	fbb1 f3f3 	udiv	r3, r1, r3
 800099c:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f962 	bl	8000c6a <HAL_SYSTICK_Config>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d10f      	bne.n	80009cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b0f      	cmp	r3, #15
 80009b0:	d809      	bhi.n	80009c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b2:	2200      	movs	r2, #0
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	f04f 30ff 	mov.w	r0, #4294967295
 80009ba:	f000 f92c 	bl	8000c16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_InitTick+0x70>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	e007      	b.n	80009d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
 80009ca:	e004      	b.n	80009d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	e001      	b.n	80009d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000004 	.word	0x20000004

080009ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_IncTick+0x1c>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_IncTick+0x20>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4413      	add	r3, r2
 80009fa:	4a03      	ldr	r2, [pc, #12]	; (8000a08 <HAL_IncTick+0x1c>)
 80009fc:	6013      	str	r3, [r2, #0]
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	200006c8 	.word	0x200006c8
 8000a0c:	20000008 	.word	0x20000008

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b02      	ldr	r3, [pc, #8]	; (8000a20 <HAL_GetTick+0x10>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	200006c8 	.word	0x200006c8

08000a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a2c:	f7ff fff0 	bl	8000a10 <HAL_GetTick>
 8000a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a3c:	d004      	beq.n	8000a48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_Delay+0x40>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	4413      	add	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a48:	bf00      	nop
 8000a4a:	f7ff ffe1 	bl	8000a10 <HAL_GetTick>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d8f7      	bhi.n	8000a4a <HAL_Delay+0x26>
  {
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000008 	.word	0x20000008

08000a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a84:	4013      	ands	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9a:	4a04      	ldr	r2, [pc, #16]	; (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	60d3      	str	r3, [r2, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	f003 0307 	and.w	r3, r3, #7
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db0b      	blt.n	8000af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	f003 021f 	and.w	r2, r3, #31
 8000ae4:	4906      	ldr	r1, [pc, #24]	; (8000b00 <__NVIC_EnableIRQ+0x34>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	2001      	movs	r0, #1
 8000aee:	fa00 f202 	lsl.w	r2, r0, r2
 8000af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	; (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	; (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4313      	orrs	r3, r2
         );
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3724      	adds	r7, #36	; 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bcc:	d301      	bcc.n	8000bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00f      	b.n	8000bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <SysTick_Config+0x40>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bda:	210f      	movs	r1, #15
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f7ff ff90 	bl	8000b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <SysTick_Config+0x40>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <SysTick_Config+0x40>)
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff2d 	bl	8000a68 <__NVIC_SetPriorityGrouping>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c28:	f7ff ff42 	bl	8000ab0 <__NVIC_GetPriorityGrouping>
 8000c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	f7ff ff90 	bl	8000b58 <NVIC_EncodePriority>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff5f 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff35 	bl	8000acc <__NVIC_EnableIRQ>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ffa2 	bl	8000bbc <SysTick_Config>
 8000c78:	4603      	mov	r3, r0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b084      	sub	sp, #16
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d005      	beq.n	8000ca6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e029      	b.n	8000cfa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 020e 	bic.w	r2, r2, #14
 8000cb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 0201 	bic.w	r2, r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 021c 	and.w	r2, r3, #28
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	4798      	blx	r3
    }
  }
  return status;
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_FLASH_Program+0x5c>)
 8000d16:	7c1b      	ldrb	r3, [r3, #16]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d101      	bne.n	8000d20 <HAL_FLASH_Program+0x1c>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	e01b      	b.n	8000d58 <HAL_FLASH_Program+0x54>
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_FLASH_Program+0x5c>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d26:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d2a:	f000 f865 	bl	8000df8 <FLASH_WaitForLastOperation>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000d32:	7dfb      	ldrb	r3, [r7, #23]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10b      	bne.n	8000d50 <HAL_FLASH_Program+0x4c>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_FLASH_Program+0x5c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d48:	f000 f856 	bl	8000df8 <FLASH_WaitForLastOperation>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_FLASH_Program+0x5c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	741a      	strb	r2, [r3, #16]

  return status;
 8000d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200006cc 	.word	0x200006cc

08000d64 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_FLASH_Unlock+0x60>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d121      	bne.n	8000db8 <HAL_FLASH_Unlock+0x54>
  {
    /* Unlocking FLASH_PECR register access*/
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <HAL_FLASH_Unlock+0x60>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d10d      	bne.n	8000d9c <HAL_FLASH_Unlock+0x38>
    {  
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_FLASH_Unlock+0x60>)
 8000d82:	4a11      	ldr	r2, [pc, #68]	; (8000dc8 <HAL_FLASH_Unlock+0x64>)
 8000d84:	60da      	str	r2, [r3, #12]
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_FLASH_Unlock+0x60>)
 8000d88:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_FLASH_Unlock+0x68>)
 8000d8a:	60da      	str	r2, [r3, #12]
      
      /* Verify that PELOCK is unlocked */
      if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_FLASH_Unlock+0x60>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d101      	bne.n	8000d9c <HAL_FLASH_Unlock+0x38>
      {
        return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e00e      	b.n	8000dba <HAL_FLASH_Unlock+0x56>
      }
    }
    
    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_FLASH_Unlock+0x60>)
 8000d9e:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <HAL_FLASH_Unlock+0x6c>)
 8000da0:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_FLASH_Unlock+0x60>)
 8000da4:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <HAL_FLASH_Unlock+0x70>)
 8000da6:	611a      	str	r2, [r3, #16]
    
    /* Verify that PRGLOCK is unlocked */
    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_FLASH_Unlock+0x60>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d101      	bne.n	8000db8 <HAL_FLASH_Unlock+0x54>
    {
      return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e000      	b.n	8000dba <HAL_FLASH_Unlock+0x56>
    }
  }
  
  return HAL_OK; 
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00
 8000dc8:	89abcdef 	.word	0x89abcdef
 8000dcc:	02030405 	.word	0x02030405
 8000dd0:	8c9daebf 	.word	0x8c9daebf
 8000dd4:	13141516 	.word	0x13141516

08000dd8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_FLASH_Lock+0x1c>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_FLASH_Lock+0x1c>)
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;  
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40023c00 	.word	0x40023c00

08000df8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff fe06 	bl	8000a10 <HAL_GetTick>
 8000e04:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e06:	e010      	b.n	8000e2a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0e:	d00c      	beq.n	8000e2a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d007      	beq.n	8000e26 <FLASH_WaitForLastOperation+0x2e>
 8000e16:	f7ff fdfb 	bl	8000a10 <HAL_GetTick>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d201      	bcs.n	8000e2a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e028      	b.n	8000e7c <FLASH_WaitForLastOperation+0x84>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <FLASH_WaitForLastOperation+0x8c>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d0e8      	beq.n	8000e08 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <FLASH_WaitForLastOperation+0x8c>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d102      	bne.n	8000e48 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <FLASH_WaitForLastOperation+0x8c>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <FLASH_WaitForLastOperation+0x8c>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e54:	d00d      	beq.n	8000e72 <FLASH_WaitForLastOperation+0x7a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <FLASH_WaitForLastOperation+0x8c>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e62:	d006      	beq.n	8000e72 <FLASH_WaitForLastOperation+0x7a>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <FLASH_WaitForLastOperation+0x8c>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e70:	d103      	bne.n	8000e7a <FLASH_WaitForLastOperation+0x82>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000e72:	f000 f809 	bl	8000e88 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <FLASH_WaitForLastOperation+0x84>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023c00 	.word	0x40023c00

08000e88 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <FLASH_SetErrorCode+0x80>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e9e:	d109      	bne.n	8000eb4 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <FLASH_SetErrorCode+0x84>)
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <FLASH_SetErrorCode+0x84>)
 8000eaa:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb2:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <FLASH_SetErrorCode+0x80>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ec0:	d109      	bne.n	8000ed6 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <FLASH_SetErrorCode+0x84>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <FLASH_SetErrorCode+0x84>)
 8000ecc:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <FLASH_SetErrorCode+0x80>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ee2:	d109      	bne.n	8000ef8 <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <FLASH_SetErrorCode+0x84>)
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <FLASH_SetErrorCode+0x84>)
 8000eee:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ef6:	607b      	str	r3, [r7, #4]
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000ef8:	4a03      	ldr	r2, [pc, #12]	; (8000f08 <FLASH_SetErrorCode+0x80>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6193      	str	r3, [r2, #24]
}  
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	40023c00 	.word	0x40023c00
 8000f0c:	200006cc 	.word	0x200006cc

08000f10 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <HAL_FLASHEx_Erase+0xa8>)
 8000f24:	7c1b      	ldrb	r3, [r3, #16]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d101      	bne.n	8000f2e <HAL_FLASHEx_Erase+0x1e>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e040      	b.n	8000fb0 <HAL_FLASHEx_Erase+0xa0>
 8000f2e:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <HAL_FLASHEx_Erase+0xa8>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f38:	f7ff ff5e 	bl	8000df8 <FLASH_WaitForLastOperation>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d130      	bne.n	8000fa8 <HAL_FLASHEx_Erase+0x98>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	601a      	str	r2, [r3, #0]
      }
    }
#endif /* STM32L151xDX || STM32L152xDX || STM32L162xDX */

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	e01f      	b.n	8000f96 <HAL_FLASHEx_Erase+0x86>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 8000f56:	68b8      	ldr	r0, [r7, #8]
 8000f58:	f000 f832 	bl	8000fc0 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f60:	f7ff ff4a 	bl	8000df8 <FLASH_WaitForLastOperation>
 8000f64:	4603      	mov	r3, r0
 8000f66:	73fb      	strb	r3, [r7, #15]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_FLASHEx_Erase+0xac>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <HAL_FLASHEx_Erase+0xac>)
 8000f6e:	f023 0308 	bic.w	r3, r3, #8
 8000f72:	6053      	str	r3, [r2, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_FLASHEx_Erase+0xac>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_FLASHEx_Erase+0xac>)
 8000f7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f7e:	6053      	str	r3, [r2, #4]

      if (status != HAL_OK)
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_FLASHEx_Erase+0x7e>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	601a      	str	r2, [r3, #0]
        break;
 8000f8c:	e00c      	b.n	8000fa8 <HAL_FLASHEx_Erase+0x98>
        address += FLASH_PAGE_SIZE)
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f94:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	021a      	lsls	r2, r3, #8
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	4413      	add	r3, r2
    for(address = pEraseInit->PageAddress;
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d3d6      	bcc.n	8000f56 <HAL_FLASHEx_Erase+0x46>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <HAL_FLASHEx_Erase+0xa8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	741a      	strb	r2, [r3, #16]

  return status;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200006cc 	.word	0x200006cc
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <FLASH_PageErase+0x3c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <FLASH_PageErase+0x40>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <FLASH_PageErase+0x40>)
 8000fd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd8:	6053      	str	r3, [r2, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <FLASH_PageErase+0x40>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	4a08      	ldr	r2, [pc, #32]	; (8001000 <FLASH_PageErase+0x40>)
 8000fe0:	f043 0308 	orr.w	r3, r3, #8
 8000fe4:	6053      	str	r3, [r2, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fec:	461a      	mov	r2, r3
 8000fee:	2300      	movs	r3, #0
 8000ff0:	6013      	str	r3, [r2, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	200006cc 	.word	0x200006cc
 8001000:	40023c00 	.word	0x40023c00

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800101a:	e154      	b.n	80012c6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 8146 	beq.w	80012c0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d00b      	beq.n	8001054 <HAL_GPIO_Init+0x50>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d007      	beq.n	8001054 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001048:	2b11      	cmp	r3, #17
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b12      	cmp	r3, #18
 8001052:	d130      	bne.n	80010b6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800108a:	2201      	movs	r2, #1
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	091b      	lsrs	r3, r3, #4
 80010a0:	f003 0201 	and.w	r2, r3, #1
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0xf2>
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b12      	cmp	r3, #18
 80010f4:	d123      	bne.n	800113e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3208      	adds	r2, #8
 80010fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001102:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	08da      	lsrs	r2, r3, #3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3208      	adds	r2, #8
 8001138:	6939      	ldr	r1, [r7, #16]
 800113a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0203 	and.w	r2, r3, #3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 80a0 	beq.w	80012c0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001180:	4b57      	ldr	r3, [pc, #348]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	4a56      	ldr	r2, [pc, #344]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6213      	str	r3, [r2, #32]
 800118c:	4b54      	ldr	r3, [pc, #336]	; (80012e0 <HAL_GPIO_Init+0x2dc>)
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001198:	4a52      	ldr	r2, [pc, #328]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	3302      	adds	r3, #2
 80011a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a4a      	ldr	r2, [pc, #296]	; (80012e8 <HAL_GPIO_Init+0x2e4>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d019      	beq.n	80011f8 <HAL_GPIO_Init+0x1f4>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a49      	ldr	r2, [pc, #292]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d013      	beq.n	80011f4 <HAL_GPIO_Init+0x1f0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a48      	ldr	r2, [pc, #288]	; (80012f0 <HAL_GPIO_Init+0x2ec>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d00d      	beq.n	80011f0 <HAL_GPIO_Init+0x1ec>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a47      	ldr	r2, [pc, #284]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d007      	beq.n	80011ec <HAL_GPIO_Init+0x1e8>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a46      	ldr	r2, [pc, #280]	; (80012f8 <HAL_GPIO_Init+0x2f4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d101      	bne.n	80011e8 <HAL_GPIO_Init+0x1e4>
 80011e4:	2304      	movs	r3, #4
 80011e6:	e008      	b.n	80011fa <HAL_GPIO_Init+0x1f6>
 80011e8:	2305      	movs	r3, #5
 80011ea:	e006      	b.n	80011fa <HAL_GPIO_Init+0x1f6>
 80011ec:	2303      	movs	r3, #3
 80011ee:	e004      	b.n	80011fa <HAL_GPIO_Init+0x1f6>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e002      	b.n	80011fa <HAL_GPIO_Init+0x1f6>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <HAL_GPIO_Init+0x1f6>
 80011f8:	2300      	movs	r3, #0
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	f002 0203 	and.w	r2, r2, #3
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	4093      	lsls	r3, r2
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800120a:	4936      	ldr	r1, [pc, #216]	; (80012e4 <HAL_GPIO_Init+0x2e0>)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001218:	4b38      	ldr	r3, [pc, #224]	; (80012fc <HAL_GPIO_Init+0x2f8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800123c:	4a2f      	ldr	r2, [pc, #188]	; (80012fc <HAL_GPIO_Init+0x2f8>)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001242:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <HAL_GPIO_Init+0x2f8>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001266:	4a25      	ldr	r2, [pc, #148]	; (80012fc <HAL_GPIO_Init+0x2f8>)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <HAL_GPIO_Init+0x2f8>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001290:	4a1a      	ldr	r2, [pc, #104]	; (80012fc <HAL_GPIO_Init+0x2f8>)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_GPIO_Init+0x2f8>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012ba:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_GPIO_Init+0x2f8>)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f47f aea3 	bne.w	800101c <HAL_GPIO_Init+0x18>
  }
}
 80012d6:	bf00      	nop
 80012d8:	371c      	adds	r7, #28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40010000 	.word	0x40010000
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40020c00 	.word	0x40020c00
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010400 	.word	0x40010400

08001300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	887b      	ldrh	r3, [r7, #2]
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001318:	2301      	movs	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e001      	b.n	8001322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001322:	7bfb      	ldrb	r3, [r7, #15]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800132e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001330:	b08b      	sub	sp, #44	; 0x2c
 8001332:	af06      	add	r7, sp, #24
 8001334:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e0d0      	b.n	80014e2 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d106      	bne.n	800135a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f006 fbfd 	bl	8007b54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2203      	movs	r2, #3
 800135e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f002 fcc4 	bl	8003cf4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e04c      	b.n	800140c <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	440b      	add	r3, r1
 8001382:	3301      	adds	r3, #1
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800139c:	7bfa      	ldrb	r2, [r7, #15]
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	b298      	uxth	r0, r3
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	440b      	add	r3, r1
 80013ae:	3336      	adds	r3, #54	; 0x36
 80013b0:	4602      	mov	r2, r0
 80013b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	440b      	add	r3, r1
 80013c4:	3303      	adds	r3, #3
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	440b      	add	r3, r1
 80013d8:	3338      	adds	r3, #56	; 0x38
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	440b      	add	r3, r1
 80013ec:	333c      	adds	r3, #60	; 0x3c
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	440b      	add	r3, r1
 8001400:	3340      	adds	r3, #64	; 0x40
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	3301      	adds	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	429a      	cmp	r2, r3
 8001414:	d3ad      	bcc.n	8001372 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001416:	2300      	movs	r3, #0
 8001418:	73fb      	strb	r3, [r7, #15]
 800141a:	e044      	b.n	80014a6 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	440b      	add	r3, r1
 8001440:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001448:	7bfa      	ldrb	r2, [r7, #15]
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	440b      	add	r3, r1
 8001456:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800145e:	7bfa      	ldrb	r2, [r7, #15]
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	3301      	adds	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d3b5      	bcc.n	800141c <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	687e      	ldr	r6, [r7, #4]
 80014b8:	466d      	mov	r5, sp
 80014ba:	f106 0410 	add.w	r4, r6, #16
 80014be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c2:	6823      	ldr	r3, [r4, #0]
 80014c4:	602b      	str	r3, [r5, #0]
 80014c6:	1d33      	adds	r3, r6, #4
 80014c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ca:	6838      	ldr	r0, [r7, #0]
 80014cc:	f002 fc2c 	bl	8003d28 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_PCD_Start+0x16>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e016      	b.n	800152e <HAL_PCD_Start+0x44>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fbdb 	bl	8003cc8 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001512:	2101      	movs	r1, #1
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f006 faff 	bl	8007b18 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f004 f9cb 	bl	80058ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_PCD_Stop+0x16>
 8001548:	2302      	movs	r3, #2
 800154a:	e016      	b.n	800157a <HAL_PCD_Stop+0x44>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f002 fbcb 	bl	8003cf4 <USB_DisableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 800155e:	2100      	movs	r1, #0
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f006 fad9 	bl	8007b18 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevDisconnect(hpcd->Instance);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f004 f9af 	bl	80058ce <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f004 f9a7 	bl	80058e2 <USB_ReadInterrupts>
 8001594:	4603      	mov	r3, r0
 8001596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800159a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800159e:	d102      	bne.n	80015a6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 faa4 	bl	8001aee <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f004 f999 	bl	80058e2 <USB_ReadInterrupts>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ba:	d112      	bne.n	80015e2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ce:	b292      	uxth	r2, r2
 80015d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f006 fb38 	bl	8007c4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015da:	2100      	movs	r1, #0
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f8c7 	bl	8001770 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f004 f97b 	bl	80058e2 <USB_ReadInterrupts>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015f6:	d10b      	bne.n	8001610 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001600:	b29a      	uxth	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800160a:	b292      	uxth	r2, r2
 800160c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f004 f964 	bl	80058e2 <USB_ReadInterrupts>
 800161a:	4603      	mov	r3, r0
 800161c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001624:	d10b      	bne.n	800163e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800162e:	b29a      	uxth	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001638:	b292      	uxth	r2, r2
 800163a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f004 f94d 	bl	80058e2 <USB_ReadInterrupts>
 8001648:	4603      	mov	r3, r0
 800164a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800164e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001652:	d126      	bne.n	80016a2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800165c:	b29a      	uxth	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0204 	bic.w	r2, r2, #4
 8001666:	b292      	uxth	r2, r2
 8001668:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001674:	b29a      	uxth	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0208 	bic.w	r2, r2, #8
 800167e:	b292      	uxth	r2, r2
 8001680:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f006 fb19 	bl	8007cbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001692:	b29a      	uxth	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800169c:	b292      	uxth	r2, r2
 800169e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f004 f91b 	bl	80058e2 <USB_ReadInterrupts>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016b6:	d126      	bne.n	8001706 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0208 	orr.w	r2, r2, #8
 80016ca:	b292      	uxth	r2, r2
 80016cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016d8:	b29a      	uxth	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016e2:	b292      	uxth	r2, r2
 80016e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0204 	orr.w	r2, r2, #4
 80016fa:	b292      	uxth	r2, r2
 80016fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f006 fac1 	bl	8007c88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f004 f8e9 	bl	80058e2 <USB_ReadInterrupts>
 8001710:	4603      	mov	r3, r0
 8001712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800171a:	d10e      	bne.n	800173a <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001724:	b29a      	uxth	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800172e:	b292      	uxth	r2, r2
 8001730:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f006 fa7a 	bl	8007c2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f004 f8cf 	bl	80058e2 <USB_ReadInterrupts>
 8001744:	4603      	mov	r3, r0
 8001746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800174e:	d10b      	bne.n	8001768 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001758:	b29a      	uxth	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001762:	b292      	uxth	r2, r2
 8001764:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_PCD_SetAddress+0x1a>
 8001786:	2302      	movs	r3, #2
 8001788:	e013      	b.n	80017b2 <HAL_PCD_SetAddress+0x42>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	78fa      	ldrb	r2, [r7, #3]
 8001796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 f876 	bl	8005894 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	4608      	mov	r0, r1
 80017c4:	4611      	mov	r1, r2
 80017c6:	461a      	mov	r2, r3
 80017c8:	4603      	mov	r3, r0
 80017ca:	70fb      	strb	r3, [r7, #3]
 80017cc:	460b      	mov	r3, r1
 80017ce:	803b      	strh	r3, [r7, #0]
 80017d0:	4613      	mov	r3, r2
 80017d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	da0e      	bge.n	80017fe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2201      	movs	r2, #1
 80017fa:	705a      	strb	r2, [r3, #1]
 80017fc:	e00e      	b.n	800181c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	f003 0207 	and.w	r2, r3, #7
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	4413      	add	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	b2da      	uxtb	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001828:	883a      	ldrh	r2, [r7, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	78ba      	ldrb	r2, [r7, #2]
 8001832:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d004      	beq.n	8001846 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b29a      	uxth	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001846:	78bb      	ldrb	r3, [r7, #2]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d102      	bne.n	8001852 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_PCD_EP_Open+0xa6>
 800185c:	2302      	movs	r3, #2
 800185e:	e00e      	b.n	800187e <HAL_PCD_EP_Open+0xc4>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68f9      	ldr	r1, [r7, #12]
 800186e:	4618      	mov	r0, r3
 8001870:	f002 fa7a 	bl	8003d68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800187c:	7afb      	ldrb	r3, [r7, #11]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	460b      	mov	r3, r1
 8001894:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001896:	7afb      	ldrb	r3, [r7, #11]
 8001898:	f003 0207 	and.w	r2, r3, #7
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2200      	movs	r2, #0
 80018be:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2200      	movs	r2, #0
 80018c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018d2:	7afb      	ldrb	r3, [r7, #11]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d106      	bne.n	80018ea <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6979      	ldr	r1, [r7, #20]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 fdaa 	bl	800443c <USB_EPStartXfer>
 80018e8:	e005      	b.n	80018f6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6979      	ldr	r1, [r7, #20]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f002 fda3 	bl	800443c <USB_EPStartXfer>
  }

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	460b      	mov	r3, r1
 800190e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001910:	7afb      	ldrb	r3, [r7, #11]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2201      	movs	r2, #1
 800194a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800194c:	7afb      	ldrb	r3, [r7, #11]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	b2da      	uxtb	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001958:	7afb      	ldrb	r3, [r7, #11]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	2b00      	cmp	r3, #0
 8001960:	d106      	bne.n	8001970 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6979      	ldr	r1, [r7, #20]
 8001968:	4618      	mov	r0, r3
 800196a:	f002 fd67 	bl	800443c <USB_EPStartXfer>
 800196e:	e005      	b.n	800197c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6979      	ldr	r1, [r7, #20]
 8001976:	4618      	mov	r0, r3
 8001978:	f002 fd60 	bl	800443c <USB_EPStartXfer>
  }

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	460b      	mov	r3, r1
 8001990:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	f003 0207 	and.w	r2, r3, #7
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	d901      	bls.n	80019a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e04c      	b.n	8001a3e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	da0e      	bge.n	80019ca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	4413      	add	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2201      	movs	r2, #1
 80019c6:	705a      	strb	r2, [r3, #1]
 80019c8:	e00c      	b.n	80019e4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2201      	movs	r2, #1
 80019e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_PCD_EP_SetStall+0x7e>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e01c      	b.n	8001a3e <HAL_PCD_EP_SetStall+0xb8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68f9      	ldr	r1, [r7, #12]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 fe41 	bl	800569a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d108      	bne.n	8001a34 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4610      	mov	r0, r2
 8001a30:	f003 ff66 	bl	8005900 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	f003 020f 	and.w	r2, r3, #15
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d901      	bls.n	8001a64 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e040      	b.n	8001ae6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	da0e      	bge.n	8001a8a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2201      	movs	r2, #1
 8001a86:	705a      	strb	r2, [r3, #1]
 8001a88:	e00e      	b.n	8001aa8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	f003 0207 	and.w	r2, r3, #7
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_PCD_EP_ClrStall+0x82>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e00e      	b.n	8001ae6 <HAL_PCD_EP_ClrStall+0xa0>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68f9      	ldr	r1, [r7, #12]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 fe2f 	bl	800573a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b08e      	sub	sp, #56	; 0x38
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001af6:	e2df      	b.n	80020b8 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b00:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001b0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 8158 	bne.w	8001dc8 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d152      	bne.n	8001bc8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b32:	81fb      	strh	r3, [r7, #14]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	89fb      	ldrh	r3, [r7, #14]
 8001b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3328      	adds	r3, #40	; 0x28
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	461a      	mov	r2, r3
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	3302      	adds	r3, #2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	441a      	add	r2, r3
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b86:	2100      	movs	r1, #0
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f006 f836 	bl	8007bfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 828e 	beq.w	80020b8 <PCD_EP_ISR_Handler+0x5ca>
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f040 8289 	bne.w	80020b8 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	b292      	uxth	r2, r2
 8001bba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001bc6:	e277      	b.n	80020b8 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001bd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d034      	beq.n	8001c4c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3306      	adds	r3, #6
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f003 febc 	bl	800599e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c32:	4013      	ands	r3, r2
 8001c34:	823b      	strh	r3, [r7, #16]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	8a3a      	ldrh	r2, [r7, #16]
 8001c3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c40:	b292      	uxth	r2, r2
 8001c42:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f005 ffab 	bl	8007ba0 <HAL_PCD_SetupStageCallback>
 8001c4a:	e235      	b.n	80020b8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c4c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f280 8231 	bge.w	80020b8 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c62:	4013      	ands	r3, r2
 8001c64:	83bb      	strh	r3, [r7, #28]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	8bba      	ldrh	r2, [r7, #28]
 8001c6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c70:	b292      	uxth	r2, r2
 8001c72:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4413      	add	r3, r2
 8001c88:	3306      	adds	r3, #6
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d019      	beq.n	8001cdc <PCD_EP_ISR_Handler+0x1ee>
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d015      	beq.n	8001cdc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	6959      	ldr	r1, [r3, #20]
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	f003 fe6c 	bl	800599e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	441a      	add	r2, r3
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f005 ff74 	bl	8007bc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d112      	bne.n	8001d2a <PCD_EP_ISR_Handler+0x23c>
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	801a      	strh	r2, [r3, #0]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	801a      	strh	r2, [r3, #0]
 8001d28:	e02f      	b.n	8001d8a <PCD_EP_ISR_Handler+0x29c>
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	2b3e      	cmp	r3, #62	; 0x3e
 8001d30:	d813      	bhi.n	8001d5a <PCD_EP_ISR_Handler+0x26c>
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	085b      	lsrs	r3, r3, #1
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <PCD_EP_ISR_Handler+0x25e>
 8001d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d48:	3301      	adds	r3, #1
 8001d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	029b      	lsls	r3, r3, #10
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	801a      	strh	r2, [r3, #0]
 8001d58:	e017      	b.n	8001d8a <PCD_EP_ISR_Handler+0x29c>
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	633b      	str	r3, [r7, #48]	; 0x30
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f003 031f 	and.w	r3, r3, #31
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d102      	bne.n	8001d74 <PCD_EP_ISR_Handler+0x286>
 8001d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d70:	3b01      	subs	r3, #1
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
 8001d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	029b      	lsls	r3, r3, #10
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d9a:	827b      	strh	r3, [r7, #18]
 8001d9c:	8a7b      	ldrh	r3, [r7, #18]
 8001d9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001da2:	827b      	strh	r3, [r7, #18]
 8001da4:	8a7b      	ldrh	r3, [r7, #18]
 8001da6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001daa:	827b      	strh	r3, [r7, #18]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	8a7b      	ldrh	r3, [r7, #18]
 8001db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	8013      	strh	r3, [r2, #0]
 8001dc6:	e177      	b.n	80020b8 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dda:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f280 80ea 	bge.w	8001fb8 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	853b      	strh	r3, [r7, #40]	; 0x28
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e12:	b292      	uxth	r2, r2
 8001e14:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e16:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	7b1b      	ldrb	r3, [r3, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d122      	bne.n	8001e7a <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4413      	add	r3, r2
 8001e48:	3306      	adds	r3, #6
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e5c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001e5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 8087 	beq.w	8001f74 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	6959      	ldr	r1, [r3, #20]
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	88da      	ldrh	r2, [r3, #6]
 8001e72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e74:	f003 fd93 	bl	800599e <USB_ReadPMA>
 8001e78:	e07c      	b.n	8001f74 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	78db      	ldrb	r3, [r3, #3]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d108      	bne.n	8001e94 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e84:	461a      	mov	r2, r3
 8001e86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f923 	bl	80020d4 <HAL_PCD_EP_DB_Receive>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001e92:	e06f      	b.n	8001f74 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eae:	847b      	strh	r3, [r7, #34]	; 0x22
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	441a      	add	r2, r3
 8001ebe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ecc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d021      	beq.n	8001f32 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	3302      	adds	r3, #2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f16:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d02a      	beq.n	8001f74 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	6959      	ldr	r1, [r3, #20]
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	891a      	ldrh	r2, [r3, #8]
 8001f2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f2c:	f003 fd37 	bl	800599e <USB_ReadPMA>
 8001f30:	e020      	b.n	8001f74 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	3306      	adds	r3, #6
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f5a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d008      	beq.n	8001f74 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	6959      	ldr	r1, [r3, #20]
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	895a      	ldrh	r2, [r3, #10]
 8001f6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f70:	f003 fd15 	bl	800599e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	69da      	ldr	r2, [r3, #28]
 8001f78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f7a:	441a      	add	r2, r3
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f86:	441a      	add	r2, r3
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <PCD_EP_ISR_Handler+0x4b0>
 8001f94:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d206      	bcs.n	8001fac <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f005 fe0d 	bl	8007bc4 <HAL_PCD_DataOutStageCallback>
 8001faa:	e005      	b.n	8001fb8 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f002 fa42 	bl	800443c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001fb8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d07a      	beq.n	80020b8 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001fc2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff0:	843b      	strh	r3, [r7, #32]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	441a      	add	r2, r3
 8002000:	8c3b      	ldrh	r3, [r7, #32]
 8002002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800200a:	b29b      	uxth	r3, r3
 800200c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	78db      	ldrb	r3, [r3, #3]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d108      	bne.n	8002028 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800201a:	2b02      	cmp	r3, #2
 800201c:	d146      	bne.n	80020ac <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800201e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d141      	bne.n	80020ac <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002030:	b29b      	uxth	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	3302      	adds	r3, #2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	4413      	add	r3, r2
 8002046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002050:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	8bfb      	ldrh	r3, [r7, #30]
 8002058:	429a      	cmp	r2, r3
 800205a:	d906      	bls.n	800206a <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	699a      	ldr	r2, [r3, #24]
 8002060:	8bfb      	ldrh	r3, [r7, #30]
 8002062:	1ad2      	subs	r2, r2, r3
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	619a      	str	r2, [r3, #24]
 8002068:	e002      	b.n	8002070 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d106      	bne.n	8002086 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f005 fdbb 	bl	8007bfa <HAL_PCD_DataInStageCallback>
 8002084:	e018      	b.n	80020b8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	8bfb      	ldrh	r3, [r7, #30]
 800208c:	441a      	add	r2, r3
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	69da      	ldr	r2, [r3, #28]
 8002096:	8bfb      	ldrh	r3, [r7, #30]
 8002098:	441a      	add	r2, r3
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020a4:	4618      	mov	r0, r3
 80020a6:	f002 f9c9 	bl	800443c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80020aa:	e005      	b.n	80020b8 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80020ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020ae:	461a      	mov	r2, r3
 80020b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f91b 	bl	80022ee <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f6ff ad17 	blt.w	8001af8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3738      	adds	r7, #56	; 0x38
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	4613      	mov	r3, r2
 80020e0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d07e      	beq.n	80021ea <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	3302      	adds	r3, #2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	4413      	add	r3, r2
 800210a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002114:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	8b7b      	ldrh	r3, [r7, #26]
 800211c:	429a      	cmp	r2, r3
 800211e:	d306      	bcc.n	800212e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	699a      	ldr	r2, [r3, #24]
 8002124:	8b7b      	ldrh	r3, [r7, #26]
 8002126:	1ad2      	subs	r2, r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	619a      	str	r2, [r3, #24]
 800212c:	e002      	b.n	8002134 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d123      	bne.n	8002184 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002156:	833b      	strh	r3, [r7, #24]
 8002158:	8b3b      	ldrh	r3, [r7, #24]
 800215a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800215e:	833b      	strh	r3, [r7, #24]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	441a      	add	r2, r3
 800216e:	8b3b      	ldrh	r3, [r7, #24]
 8002170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800217c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002180:	b29b      	uxth	r3, r3
 8002182:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d01f      	beq.n	80021ce <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a8:	82fb      	strh	r3, [r7, #22]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	441a      	add	r2, r3
 80021b8:	8afb      	ldrh	r3, [r7, #22]
 80021ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021ce:	8b7b      	ldrh	r3, [r7, #26]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8087 	beq.w	80022e4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	6959      	ldr	r1, [r3, #20]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	891a      	ldrh	r2, [r3, #8]
 80021e2:	8b7b      	ldrh	r3, [r7, #26]
 80021e4:	f003 fbdb 	bl	800599e <USB_ReadPMA>
 80021e8:	e07c      	b.n	80022e4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	3306      	adds	r3, #6
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	4413      	add	r3, r2
 8002208:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002212:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	699a      	ldr	r2, [r3, #24]
 8002218:	8b7b      	ldrh	r3, [r7, #26]
 800221a:	429a      	cmp	r2, r3
 800221c:	d306      	bcc.n	800222c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	8b7b      	ldrh	r3, [r7, #26]
 8002224:	1ad2      	subs	r2, r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	619a      	str	r2, [r3, #24]
 800222a:	e002      	b.n	8002232 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2200      	movs	r2, #0
 8002230:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d123      	bne.n	8002282 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002254:	83fb      	strh	r3, [r7, #30]
 8002256:	8bfb      	ldrh	r3, [r7, #30]
 8002258:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800225c:	83fb      	strh	r3, [r7, #30]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	441a      	add	r2, r3
 800226c:	8bfb      	ldrh	r3, [r7, #30]
 800226e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800227a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800227e:	b29b      	uxth	r3, r3
 8002280:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002288:	2b00      	cmp	r3, #0
 800228a:	d11f      	bne.n	80022cc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	b29b      	uxth	r3, r3
 800229e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a6:	83bb      	strh	r3, [r7, #28]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	441a      	add	r2, r3
 80022b6:	8bbb      	ldrh	r3, [r7, #28]
 80022b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022cc:	8b7b      	ldrh	r3, [r7, #26]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d008      	beq.n	80022e4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	6959      	ldr	r1, [r3, #20]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	895a      	ldrh	r2, [r3, #10]
 80022de:	8b7b      	ldrh	r3, [r7, #26]
 80022e0:	f003 fb5d 	bl	800599e <USB_ReadPMA>
    }
  }

  return count;
 80022e4:	8b7b      	ldrh	r3, [r7, #26]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3720      	adds	r7, #32
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b092      	sub	sp, #72	; 0x48
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	4613      	mov	r3, r2
 80022fa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022fc:	88fb      	ldrh	r3, [r7, #6]
 80022fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8132 	beq.w	800256c <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002310:	b29b      	uxth	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	3302      	adds	r3, #2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002330:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	699a      	ldr	r2, [r3, #24]
 8002336:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002338:	429a      	cmp	r2, r3
 800233a:	d906      	bls.n	800234a <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	699a      	ldr	r2, [r3, #24]
 8002340:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002342:	1ad2      	subs	r2, r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	619a      	str	r2, [r3, #24]
 8002348:	e002      	b.n	8002350 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d12c      	bne.n	80023b2 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f005 fc4b 	bl	8007bfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 822f 	beq.w	80027ce <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238a:	827b      	strh	r3, [r7, #18]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	441a      	add	r2, r3
 800239a:	8a7b      	ldrh	r3, [r7, #18]
 800239c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	8013      	strh	r3, [r2, #0]
 80023b0:	e20d      	b.n	80027ce <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01f      	beq.n	80023fc <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	441a      	add	r2, r3
 80023e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002402:	2b01      	cmp	r3, #1
 8002404:	f040 81e3 	bne.w	80027ce <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	695a      	ldr	r2, [r3, #20]
 800240c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800240e:	441a      	add	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800241a:	441a      	add	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	6a1a      	ldr	r2, [r3, #32]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	429a      	cmp	r2, r3
 800242a:	d309      	bcc.n	8002440 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	6a1a      	ldr	r2, [r3, #32]
 8002436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002438:	1ad2      	subs	r2, r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	621a      	str	r2, [r3, #32]
 800243e:	e014      	b.n	800246a <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d106      	bne.n	8002456 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002448:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800244a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002454:	e009      	b.n	800246a <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2200      	movs	r2, #0
 8002468:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	785b      	ldrb	r3, [r3, #1]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d155      	bne.n	800251e <HAL_PCD_EP_DB_Transmit+0x230>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002480:	b29b      	uxth	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	4413      	add	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	011a      	lsls	r2, r3, #4
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	4413      	add	r3, r2
 8002494:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249c:	2b00      	cmp	r3, #0
 800249e:	d112      	bne.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	801a      	strh	r2, [r3, #0]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024be:	b29a      	uxth	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	801a      	strh	r2, [r3, #0]
 80024c4:	e047      	b.n	8002556 <HAL_PCD_EP_DB_Transmit+0x268>
 80024c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c8:	2b3e      	cmp	r3, #62	; 0x3e
 80024ca:	d811      	bhi.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x202>
 80024cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ce:	085b      	lsrs	r3, r3, #1
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80024dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024de:	3301      	adds	r3, #1
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	029b      	lsls	r3, r3, #10
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	801a      	strh	r2, [r3, #0]
 80024ee:	e032      	b.n	8002556 <HAL_PCD_EP_DB_Transmit+0x268>
 80024f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <HAL_PCD_EP_DB_Transmit+0x218>
 8002500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002502:	3b01      	subs	r3, #1
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
 8002506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002508:	b29b      	uxth	r3, r3
 800250a:	029b      	lsls	r3, r3, #10
 800250c:	b29b      	uxth	r3, r3
 800250e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002516:	b29a      	uxth	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	801a      	strh	r2, [r3, #0]
 800251c:	e01b      	b.n	8002556 <HAL_PCD_EP_DB_Transmit+0x268>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	785b      	ldrb	r3, [r3, #1]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d117      	bne.n	8002556 <HAL_PCD_EP_DB_Transmit+0x268>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	623b      	str	r3, [r7, #32]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002534:	b29b      	uxth	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	4413      	add	r3, r2
 800253c:	623b      	str	r3, [r7, #32]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	011a      	lsls	r2, r3, #4
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	4413      	add	r3, r2
 8002548:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002550:	b29a      	uxth	r2, r3
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	6959      	ldr	r1, [r3, #20]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	891a      	ldrh	r2, [r3, #8]
 8002562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002564:	b29b      	uxth	r3, r3
 8002566:	f003 f9d6 	bl	8005916 <USB_WritePMA>
 800256a:	e130      	b.n	80027ce <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002574:	b29b      	uxth	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	3306      	adds	r3, #6
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	4413      	add	r3, r2
 800258a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002594:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800259c:	429a      	cmp	r2, r3
 800259e:	d306      	bcc.n	80025ae <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	699a      	ldr	r2, [r3, #24]
 80025a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025a6:	1ad2      	subs	r2, r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	619a      	str	r2, [r3, #24]
 80025ac:	e002      	b.n	80025b4 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d12c      	bne.n	8002616 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f005 fb19 	bl	8007bfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 80fd 	bne.w	80027ce <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	441a      	add	r2, r3
 80025fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002608:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800260c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002610:	b29b      	uxth	r3, r3
 8002612:	8013      	strh	r3, [r2, #0]
 8002614:	e0db      	b.n	80027ce <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d11f      	bne.n	8002660 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	441a      	add	r2, r3
 800264a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800264c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800265c:	b29b      	uxth	r3, r3
 800265e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002666:	2b01      	cmp	r3, #1
 8002668:	f040 80b1 	bne.w	80027ce <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002672:	441a      	add	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	69da      	ldr	r2, [r3, #28]
 800267c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800267e:	441a      	add	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	6a1a      	ldr	r2, [r3, #32]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	429a      	cmp	r2, r3
 800268e:	d309      	bcc.n	80026a4 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	6a1a      	ldr	r2, [r3, #32]
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	1ad2      	subs	r2, r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	621a      	str	r2, [r3, #32]
 80026a2:	e014      	b.n	80026ce <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d106      	bne.n	80026ba <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80026ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026ae:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026b8:	e009      	b.n	80026ce <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2200      	movs	r2, #0
 80026c4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	637b      	str	r3, [r7, #52]	; 0x34
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	785b      	ldrb	r3, [r3, #1]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d155      	bne.n	8002788 <HAL_PCD_EP_DB_Transmit+0x49a>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	647b      	str	r3, [r7, #68]	; 0x44
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026f0:	4413      	add	r3, r2
 80026f2:	647b      	str	r3, [r7, #68]	; 0x44
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	011a      	lsls	r2, r3, #4
 80026fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fc:	4413      	add	r3, r2
 80026fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002702:	643b      	str	r3, [r7, #64]	; 0x40
 8002704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002706:	2b00      	cmp	r3, #0
 8002708:	d112      	bne.n	8002730 <HAL_PCD_EP_DB_Transmit+0x442>
 800270a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002714:	b29a      	uxth	r2, r3
 8002716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002718:	801a      	strh	r2, [r3, #0]
 800271a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002728:	b29a      	uxth	r2, r3
 800272a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800272c:	801a      	strh	r2, [r3, #0]
 800272e:	e044      	b.n	80027ba <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002732:	2b3e      	cmp	r3, #62	; 0x3e
 8002734:	d811      	bhi.n	800275a <HAL_PCD_EP_DB_Transmit+0x46c>
 8002736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002738:	085b      	lsrs	r3, r3, #1
 800273a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800273c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_PCD_EP_DB_Transmit+0x45e>
 8002746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002748:	3301      	adds	r3, #1
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800274c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800274e:	b29b      	uxth	r3, r3
 8002750:	029b      	lsls	r3, r3, #10
 8002752:	b29a      	uxth	r2, r3
 8002754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002756:	801a      	strh	r2, [r3, #0]
 8002758:	e02f      	b.n	80027ba <HAL_PCD_EP_DB_Transmit+0x4cc>
 800275a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	2b00      	cmp	r3, #0
 8002768:	d102      	bne.n	8002770 <HAL_PCD_EP_DB_Transmit+0x482>
 800276a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800276c:	3b01      	subs	r3, #1
 800276e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002772:	b29b      	uxth	r3, r3
 8002774:	029b      	lsls	r3, r3, #10
 8002776:	b29b      	uxth	r3, r3
 8002778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800277c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002780:	b29a      	uxth	r2, r3
 8002782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002784:	801a      	strh	r2, [r3, #0]
 8002786:	e018      	b.n	80027ba <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	785b      	ldrb	r3, [r3, #1]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d114      	bne.n	80027ba <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002798:	b29b      	uxth	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279e:	4413      	add	r3, r2
 80027a0:	637b      	str	r3, [r7, #52]	; 0x34
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	011a      	lsls	r2, r3, #4
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027aa:	4413      	add	r3, r2
 80027ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027b0:	633b      	str	r3, [r7, #48]	; 0x30
 80027b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	6959      	ldr	r1, [r3, #20]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	895a      	ldrh	r2, [r3, #10]
 80027c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f003 f8a4 	bl	8005916 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027e8:	823b      	strh	r3, [r7, #16]
 80027ea:	8a3b      	ldrh	r3, [r7, #16]
 80027ec:	f083 0310 	eor.w	r3, r3, #16
 80027f0:	823b      	strh	r3, [r7, #16]
 80027f2:	8a3b      	ldrh	r3, [r7, #16]
 80027f4:	f083 0320 	eor.w	r3, r3, #32
 80027f8:	823b      	strh	r3, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	441a      	add	r2, r3
 8002808:	8a3b      	ldrh	r3, [r7, #16]
 800280a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800280e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800281a:	b29b      	uxth	r3, r3
 800281c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3748      	adds	r7, #72	; 0x48
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	817b      	strh	r3, [r7, #10]
 8002836:	4613      	mov	r3, r2
 8002838:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800283a:	897b      	ldrh	r3, [r7, #10]
 800283c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00b      	beq.n	800285e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002846:	897b      	ldrh	r3, [r7, #10]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4413      	add	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	e009      	b.n	8002872 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800285e:	897a      	ldrh	r2, [r7, #10]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002872:	893b      	ldrh	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d107      	bne.n	8002888 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2200      	movs	r2, #0
 800287c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	b29a      	uxth	r2, r3
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	80da      	strh	r2, [r3, #6]
 8002886:	e00b      	b.n	80028a0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2201      	movs	r2, #1
 800288c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	b29a      	uxth	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0c1b      	lsrs	r3, r3, #16
 800289a:	b29a      	uxth	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e31d      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028be:	4b94      	ldr	r3, [pc, #592]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028c8:	4b91      	ldr	r3, [pc, #580]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d07b      	beq.n	80029d6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d006      	beq.n	80028f2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d10f      	bne.n	800290a <HAL_RCC_OscConfig+0x5e>
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f0:	d10b      	bne.n	800290a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f2:	4b87      	ldr	r3, [pc, #540]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d06a      	beq.n	80029d4 <HAL_RCC_OscConfig+0x128>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d166      	bne.n	80029d4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e2f7      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d106      	bne.n	8002920 <HAL_RCC_OscConfig+0x74>
 8002912:	4b7f      	ldr	r3, [pc, #508]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a7e      	ldr	r2, [pc, #504]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e02d      	b.n	800297c <HAL_RCC_OscConfig+0xd0>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10c      	bne.n	8002942 <HAL_RCC_OscConfig+0x96>
 8002928:	4b79      	ldr	r3, [pc, #484]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a78      	ldr	r2, [pc, #480]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 800292e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b76      	ldr	r3, [pc, #472]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a75      	ldr	r2, [pc, #468]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 800293a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	e01c      	b.n	800297c <HAL_RCC_OscConfig+0xd0>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b05      	cmp	r3, #5
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0xb8>
 800294a:	4b71      	ldr	r3, [pc, #452]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a70      	ldr	r2, [pc, #448]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4b6e      	ldr	r3, [pc, #440]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a6d      	ldr	r2, [pc, #436]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e00b      	b.n	800297c <HAL_RCC_OscConfig+0xd0>
 8002964:	4b6a      	ldr	r3, [pc, #424]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a69      	ldr	r2, [pc, #420]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 800296a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b67      	ldr	r3, [pc, #412]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a66      	ldr	r2, [pc, #408]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800297a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d013      	beq.n	80029ac <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7fe f844 	bl	8000a10 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800298c:	f7fe f840 	bl	8000a10 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	; 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e2ad      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800299e:	4b5c      	ldr	r3, [pc, #368]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0xe0>
 80029aa:	e014      	b.n	80029d6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7fe f830 	bl	8000a10 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b4:	f7fe f82c 	bl	8000a10 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	; 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e299      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029c6:	4b52      	ldr	r3, [pc, #328]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x108>
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d05a      	beq.n	8002a98 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d119      	bne.n	8002a22 <HAL_RCC_OscConfig+0x176>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d116      	bne.n	8002a22 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f4:	4b46      	ldr	r3, [pc, #280]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_OscConfig+0x160>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e276      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0c:	4b40      	ldr	r3, [pc, #256]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	493d      	ldr	r1, [pc, #244]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a20:	e03a      	b.n	8002a98 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d020      	beq.n	8002a6c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a2a:	4b3a      	ldr	r3, [pc, #232]	; (8002b14 <HAL_RCC_OscConfig+0x268>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fd ffee 	bl	8000a10 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a38:	f7fd ffea 	bl	8000a10 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e257      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a4a:	4b31      	ldr	r3, [pc, #196]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a56:	4b2e      	ldr	r3, [pc, #184]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	492a      	ldr	r1, [pc, #168]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
 8002a6a:	e015      	b.n	8002a98 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6c:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <HAL_RCC_OscConfig+0x268>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a72:	f7fd ffcd 	bl	8000a10 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a7a:	f7fd ffc9 	bl	8000a10 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e236      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a8c:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f0      	bne.n	8002a7a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80b8 	beq.w	8002c16 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d170      	bne.n	8002b8e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aac:	4b18      	ldr	r3, [pc, #96]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x218>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e21a      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1a      	ldr	r2, [r3, #32]
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d921      	bls.n	8002b18 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fc47 	bl	800336c <RCC_SetFlashLatencyFromMSIRange>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e208      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae8:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4906      	ldr	r1, [pc, #24]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	061b      	lsls	r3, r3, #24
 8002b08:	4901      	ldr	r1, [pc, #4]	; (8002b10 <HAL_RCC_OscConfig+0x264>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
 8002b0e:	e020      	b.n	8002b52 <HAL_RCC_OscConfig+0x2a6>
 8002b10:	40023800 	.word	0x40023800
 8002b14:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b18:	4ba4      	ldr	r3, [pc, #656]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	49a1      	ldr	r1, [pc, #644]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b2a:	4ba0      	ldr	r3, [pc, #640]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	061b      	lsls	r3, r3, #24
 8002b38:	499c      	ldr	r1, [pc, #624]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fc12 	bl	800336c <RCC_SetFlashLatencyFromMSIRange>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e1d3      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	0b5b      	lsrs	r3, r3, #13
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002b62:	4a92      	ldr	r2, [pc, #584]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002b64:	6892      	ldr	r2, [r2, #8]
 8002b66:	0912      	lsrs	r2, r2, #4
 8002b68:	f002 020f 	and.w	r2, r2, #15
 8002b6c:	4990      	ldr	r1, [pc, #576]	; (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002b6e:	5c8a      	ldrb	r2, [r1, r2]
 8002b70:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b72:	4a90      	ldr	r2, [pc, #576]	; (8002db4 <HAL_RCC_OscConfig+0x508>)
 8002b74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b76:	4b90      	ldr	r3, [pc, #576]	; (8002db8 <HAL_RCC_OscConfig+0x50c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fd fefc 	bl	8000978 <HAL_InitTick>
 8002b80:	4603      	mov	r3, r0
 8002b82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d045      	beq.n	8002c16 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	e1b5      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d029      	beq.n	8002bea <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b96:	4b89      	ldr	r3, [pc, #548]	; (8002dbc <HAL_RCC_OscConfig+0x510>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fd ff38 	bl	8000a10 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ba4:	f7fd ff34 	bl	8000a10 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e1a1      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bb6:	4b7d      	ldr	r3, [pc, #500]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bc2:	4b7a      	ldr	r3, [pc, #488]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	4977      	ldr	r1, [pc, #476]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bd4:	4b75      	ldr	r3, [pc, #468]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	061b      	lsls	r3, r3, #24
 8002be2:	4972      	ldr	r1, [pc, #456]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]
 8002be8:	e015      	b.n	8002c16 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bea:	4b74      	ldr	r3, [pc, #464]	; (8002dbc <HAL_RCC_OscConfig+0x510>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fd ff0e 	bl	8000a10 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bf8:	f7fd ff0a 	bl	8000a10 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e177      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c0a:	4b68      	ldr	r3, [pc, #416]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d030      	beq.n	8002c84 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d016      	beq.n	8002c58 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b65      	ldr	r3, [pc, #404]	; (8002dc0 <HAL_RCC_OscConfig+0x514>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c30:	f7fd feee 	bl	8000a10 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c38:	f7fd feea 	bl	8000a10 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e157      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c4a:	4b58      	ldr	r3, [pc, #352]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x38c>
 8002c56:	e015      	b.n	8002c84 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c58:	4b59      	ldr	r3, [pc, #356]	; (8002dc0 <HAL_RCC_OscConfig+0x514>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5e:	f7fd fed7 	bl	8000a10 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c66:	f7fd fed3 	bl	8000a10 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e140      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c78:	4b4c      	ldr	r3, [pc, #304]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f0      	bne.n	8002c66 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80b5 	beq.w	8002dfc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c92:	2300      	movs	r3, #0
 8002c94:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c96:	4b45      	ldr	r3, [pc, #276]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10d      	bne.n	8002cbe <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	4b42      	ldr	r3, [pc, #264]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	4a41      	ldr	r2, [pc, #260]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cac:	6253      	str	r3, [r2, #36]	; 0x24
 8002cae:	4b3f      	ldr	r3, [pc, #252]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbe:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <HAL_RCC_OscConfig+0x518>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d118      	bne.n	8002cfc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cca:	4b3e      	ldr	r3, [pc, #248]	; (8002dc4 <HAL_RCC_OscConfig+0x518>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a3d      	ldr	r2, [pc, #244]	; (8002dc4 <HAL_RCC_OscConfig+0x518>)
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd6:	f7fd fe9b 	bl	8000a10 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cde:	f7fd fe97 	bl	8000a10 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b64      	cmp	r3, #100	; 0x64
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e104      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <HAL_RCC_OscConfig+0x518>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d106      	bne.n	8002d12 <HAL_RCC_OscConfig+0x466>
 8002d04:	4b29      	ldr	r3, [pc, #164]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d08:	4a28      	ldr	r2, [pc, #160]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0e:	6353      	str	r3, [r2, #52]	; 0x34
 8002d10:	e02d      	b.n	8002d6e <HAL_RCC_OscConfig+0x4c2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x488>
 8002d1a:	4b24      	ldr	r3, [pc, #144]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1e:	4a23      	ldr	r2, [pc, #140]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d24:	6353      	str	r3, [r2, #52]	; 0x34
 8002d26:	4b21      	ldr	r3, [pc, #132]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2a:	4a20      	ldr	r2, [pc, #128]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002d2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d30:	6353      	str	r3, [r2, #52]	; 0x34
 8002d32:	e01c      	b.n	8002d6e <HAL_RCC_OscConfig+0x4c2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b05      	cmp	r3, #5
 8002d3a:	d10c      	bne.n	8002d56 <HAL_RCC_OscConfig+0x4aa>
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d40:	4a1a      	ldr	r2, [pc, #104]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d46:	6353      	str	r3, [r2, #52]	; 0x34
 8002d48:	4b18      	ldr	r3, [pc, #96]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	4a17      	ldr	r2, [pc, #92]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d52:	6353      	str	r3, [r2, #52]	; 0x34
 8002d54:	e00b      	b.n	8002d6e <HAL_RCC_OscConfig+0x4c2>
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5a:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d60:	6353      	str	r3, [r2, #52]	; 0x34
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d66:	4a11      	ldr	r2, [pc, #68]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002d68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d6c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d015      	beq.n	8002da2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d76:	f7fd fe4b 	bl	8000a10 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7e:	f7fd fe47 	bl	8000a10 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e0b2      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0ee      	beq.n	8002d7e <HAL_RCC_OscConfig+0x4d2>
 8002da0:	e023      	b.n	8002dea <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da2:	f7fd fe35 	bl	8000a10 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002da8:	e019      	b.n	8002dde <HAL_RCC_OscConfig+0x532>
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800
 8002db0:	080089b4 	.word	0x080089b4
 8002db4:	20000000 	.word	0x20000000
 8002db8:	20000004 	.word	0x20000004
 8002dbc:	42470020 	.word	0x42470020
 8002dc0:	42470680 	.word	0x42470680
 8002dc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7fd fe22 	bl	8000a10 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e08d      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dde:	4b49      	ldr	r3, [pc, #292]	; (8002f04 <HAL_RCC_OscConfig+0x658>)
 8002de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1ee      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dea:	7ffb      	ldrb	r3, [r7, #31]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d105      	bne.n	8002dfc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df0:	4b44      	ldr	r3, [pc, #272]	; (8002f04 <HAL_RCC_OscConfig+0x658>)
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	4a43      	ldr	r2, [pc, #268]	; (8002f04 <HAL_RCC_OscConfig+0x658>)
 8002df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d079      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	2b0c      	cmp	r3, #12
 8002e08:	d056      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d13b      	bne.n	8002e8a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e12:	4b3d      	ldr	r3, [pc, #244]	; (8002f08 <HAL_RCC_OscConfig+0x65c>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7fd fdfa 	bl	8000a10 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e20:	f7fd fdf6 	bl	8000a10 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e063      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e32:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <HAL_RCC_OscConfig+0x658>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e3e:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <HAL_RCC_OscConfig+0x658>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	4319      	orrs	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	430b      	orrs	r3, r1
 8002e56:	492b      	ldr	r1, [pc, #172]	; (8002f04 <HAL_RCC_OscConfig+0x658>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e5c:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <HAL_RCC_OscConfig+0x65c>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7fd fdd5 	bl	8000a10 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6a:	f7fd fdd1 	bl	8000a10 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e03e      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e7c:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <HAL_RCC_OscConfig+0x658>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x5be>
 8002e88:	e036      	b.n	8002ef8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8a:	4b1f      	ldr	r3, [pc, #124]	; (8002f08 <HAL_RCC_OscConfig+0x65c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fd fdbe 	bl	8000a10 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fd fdba 	bl	8000a10 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e027      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eaa:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <HAL_RCC_OscConfig+0x658>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x5ec>
 8002eb6:	e01f      	b.n	8002ef8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e01a      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <HAL_RCC_OscConfig+0x658>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d10d      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d106      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	42470060 	.word	0x42470060

08002f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e11a      	b.n	8003156 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f20:	4b8f      	ldr	r3, [pc, #572]	; (8003160 <HAL_RCC_ClockConfig+0x254>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d919      	bls.n	8002f62 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x34>
 8002f34:	4b8a      	ldr	r3, [pc, #552]	; (8003160 <HAL_RCC_ClockConfig+0x254>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a89      	ldr	r2, [pc, #548]	; (8003160 <HAL_RCC_ClockConfig+0x254>)
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b87      	ldr	r3, [pc, #540]	; (8003160 <HAL_RCC_ClockConfig+0x254>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f023 0201 	bic.w	r2, r3, #1
 8002f48:	4985      	ldr	r1, [pc, #532]	; (8003160 <HAL_RCC_ClockConfig+0x254>)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f50:	4b83      	ldr	r3, [pc, #524]	; (8003160 <HAL_RCC_ClockConfig+0x254>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d001      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e0f9      	b.n	8003156 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6e:	4b7d      	ldr	r3, [pc, #500]	; (8003164 <HAL_RCC_ClockConfig+0x258>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	497a      	ldr	r1, [pc, #488]	; (8003164 <HAL_RCC_ClockConfig+0x258>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 808e 	beq.w	80030aa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f96:	4b73      	ldr	r3, [pc, #460]	; (8003164 <HAL_RCC_ClockConfig+0x258>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d121      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e0d7      	b.n	8003156 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d107      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fae:	4b6d      	ldr	r3, [pc, #436]	; (8003164 <HAL_RCC_ClockConfig+0x258>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d115      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e0cb      	b.n	8003156 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fc6:	4b67      	ldr	r3, [pc, #412]	; (8003164 <HAL_RCC_ClockConfig+0x258>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e0bf      	b.n	8003156 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fd6:	4b63      	ldr	r3, [pc, #396]	; (8003164 <HAL_RCC_ClockConfig+0x258>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e0b7      	b.n	8003156 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe6:	4b5f      	ldr	r3, [pc, #380]	; (8003164 <HAL_RCC_ClockConfig+0x258>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f023 0203 	bic.w	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	495c      	ldr	r1, [pc, #368]	; (8003164 <HAL_RCC_ClockConfig+0x258>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff8:	f7fd fd0a 	bl	8000a10 <HAL_GetTick>
 8002ffc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d112      	bne.n	800302c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003006:	e00a      	b.n	800301e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003008:	f7fd fd02 	bl	8000a10 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e09b      	b.n	8003156 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800301e:	4b51      	ldr	r3, [pc, #324]	; (8003164 <HAL_RCC_ClockConfig+0x258>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b08      	cmp	r3, #8
 8003028:	d1ee      	bne.n	8003008 <HAL_RCC_ClockConfig+0xfc>
 800302a:	e03e      	b.n	80030aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b03      	cmp	r3, #3
 8003032:	d112      	bne.n	800305a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003034:	e00a      	b.n	800304c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003036:	f7fd fceb 	bl	8000a10 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f241 3288 	movw	r2, #5000	; 0x1388
 8003044:	4293      	cmp	r3, r2
 8003046:	d901      	bls.n	800304c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e084      	b.n	8003156 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800304c:	4b45      	ldr	r3, [pc, #276]	; (8003164 <HAL_RCC_ClockConfig+0x258>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b0c      	cmp	r3, #12
 8003056:	d1ee      	bne.n	8003036 <HAL_RCC_ClockConfig+0x12a>
 8003058:	e027      	b.n	80030aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d11d      	bne.n	800309e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003062:	e00a      	b.n	800307a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003064:	f7fd fcd4 	bl	8000a10 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e06d      	b.n	8003156 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800307a:	4b3a      	ldr	r3, [pc, #232]	; (8003164 <HAL_RCC_ClockConfig+0x258>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b04      	cmp	r3, #4
 8003084:	d1ee      	bne.n	8003064 <HAL_RCC_ClockConfig+0x158>
 8003086:	e010      	b.n	80030aa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003088:	f7fd fcc2 	bl	8000a10 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	f241 3288 	movw	r2, #5000	; 0x1388
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e05b      	b.n	8003156 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800309e:	4b31      	ldr	r3, [pc, #196]	; (8003164 <HAL_RCC_ClockConfig+0x258>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1ee      	bne.n	8003088 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030aa:	4b2d      	ldr	r3, [pc, #180]	; (8003160 <HAL_RCC_ClockConfig+0x254>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d219      	bcs.n	80030ec <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d105      	bne.n	80030ca <HAL_RCC_ClockConfig+0x1be>
 80030be:	4b28      	ldr	r3, [pc, #160]	; (8003160 <HAL_RCC_ClockConfig+0x254>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a27      	ldr	r2, [pc, #156]	; (8003160 <HAL_RCC_ClockConfig+0x254>)
 80030c4:	f043 0304 	orr.w	r3, r3, #4
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b25      	ldr	r3, [pc, #148]	; (8003160 <HAL_RCC_ClockConfig+0x254>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 0201 	bic.w	r2, r3, #1
 80030d2:	4923      	ldr	r1, [pc, #140]	; (8003160 <HAL_RCC_ClockConfig+0x254>)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b21      	ldr	r3, [pc, #132]	; (8003160 <HAL_RCC_ClockConfig+0x254>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e034      	b.n	8003156 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f8:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <HAL_RCC_ClockConfig+0x258>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4917      	ldr	r1, [pc, #92]	; (8003164 <HAL_RCC_ClockConfig+0x258>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d009      	beq.n	800312a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003116:	4b13      	ldr	r3, [pc, #76]	; (8003164 <HAL_RCC_ClockConfig+0x258>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	490f      	ldr	r1, [pc, #60]	; (8003164 <HAL_RCC_ClockConfig+0x258>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800312a:	f000 f823 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 800312e:	4601      	mov	r1, r0
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <HAL_RCC_ClockConfig+0x258>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	4a0b      	ldr	r2, [pc, #44]	; (8003168 <HAL_RCC_ClockConfig+0x25c>)
 800313c:	5cd3      	ldrb	r3, [r2, r3]
 800313e:	fa21 f303 	lsr.w	r3, r1, r3
 8003142:	4a0a      	ldr	r2, [pc, #40]	; (800316c <HAL_RCC_ClockConfig+0x260>)
 8003144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_RCC_ClockConfig+0x264>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd fc14 	bl	8000978 <HAL_InitTick>
 8003150:	4603      	mov	r3, r0
 8003152:	72fb      	strb	r3, [r7, #11]

  return status;
 8003154:	7afb      	ldrb	r3, [r7, #11]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40023c00 	.word	0x40023c00
 8003164:	40023800 	.word	0x40023800
 8003168:	080089b4 	.word	0x080089b4
 800316c:	20000000 	.word	0x20000000
 8003170:	20000004 	.word	0x20000004

08003174 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800317a:	4b5f      	ldr	r3, [pc, #380]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x184>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b08      	cmp	r3, #8
 8003188:	d007      	beq.n	800319a <HAL_RCC_GetSysClockFreq+0x26>
 800318a:	2b0c      	cmp	r3, #12
 800318c:	d008      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x2c>
 800318e:	2b04      	cmp	r3, #4
 8003190:	f040 809f 	bne.w	80032d2 <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003194:	4b59      	ldr	r3, [pc, #356]	; (80032fc <HAL_RCC_GetSysClockFreq+0x188>)
 8003196:	613b      	str	r3, [r7, #16]
      break;
 8003198:	e0a9      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800319a:	4b59      	ldr	r3, [pc, #356]	; (8003300 <HAL_RCC_GetSysClockFreq+0x18c>)
 800319c:	613b      	str	r3, [r7, #16]
      break;
 800319e:	e0a6      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	0c9b      	lsrs	r3, r3, #18
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	4a56      	ldr	r2, [pc, #344]	; (8003304 <HAL_RCC_GetSysClockFreq+0x190>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	0d9b      	lsrs	r3, r3, #22
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	3301      	adds	r3, #1
 80031b8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ba:	4b4f      	ldr	r3, [pc, #316]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d041      	beq.n	800324a <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	461d      	mov	r5, r3
 80031ca:	f04f 0600 	mov.w	r6, #0
 80031ce:	4629      	mov	r1, r5
 80031d0:	4632      	mov	r2, r6
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	f04f 0400 	mov.w	r4, #0
 80031da:	0154      	lsls	r4, r2, #5
 80031dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031e0:	014b      	lsls	r3, r1, #5
 80031e2:	4619      	mov	r1, r3
 80031e4:	4622      	mov	r2, r4
 80031e6:	1b49      	subs	r1, r1, r5
 80031e8:	eb62 0206 	sbc.w	r2, r2, r6
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	f04f 0400 	mov.w	r4, #0
 80031f4:	0194      	lsls	r4, r2, #6
 80031f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031fa:	018b      	lsls	r3, r1, #6
 80031fc:	1a5b      	subs	r3, r3, r1
 80031fe:	eb64 0402 	sbc.w	r4, r4, r2
 8003202:	f04f 0100 	mov.w	r1, #0
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	00e2      	lsls	r2, r4, #3
 800320c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003210:	00d9      	lsls	r1, r3, #3
 8003212:	460b      	mov	r3, r1
 8003214:	4614      	mov	r4, r2
 8003216:	195b      	adds	r3, r3, r5
 8003218:	eb44 0406 	adc.w	r4, r4, r6
 800321c:	f04f 0100 	mov.w	r1, #0
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	0262      	lsls	r2, r4, #9
 8003226:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800322a:	0259      	lsls	r1, r3, #9
 800322c:	460b      	mov	r3, r1
 800322e:	4614      	mov	r4, r2
 8003230:	4618      	mov	r0, r3
 8003232:	4621      	mov	r1, r4
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f04f 0400 	mov.w	r4, #0
 800323a:	461a      	mov	r2, r3
 800323c:	4623      	mov	r3, r4
 800323e:	f7fc ffa5 	bl	800018c <__aeabi_uldivmod>
 8003242:	4603      	mov	r3, r0
 8003244:	460c      	mov	r4, r1
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	e040      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	461d      	mov	r5, r3
 800324e:	f04f 0600 	mov.w	r6, #0
 8003252:	4629      	mov	r1, r5
 8003254:	4632      	mov	r2, r6
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	f04f 0400 	mov.w	r4, #0
 800325e:	0154      	lsls	r4, r2, #5
 8003260:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003264:	014b      	lsls	r3, r1, #5
 8003266:	4619      	mov	r1, r3
 8003268:	4622      	mov	r2, r4
 800326a:	1b49      	subs	r1, r1, r5
 800326c:	eb62 0206 	sbc.w	r2, r2, r6
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	f04f 0400 	mov.w	r4, #0
 8003278:	0194      	lsls	r4, r2, #6
 800327a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800327e:	018b      	lsls	r3, r1, #6
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	eb64 0402 	sbc.w	r4, r4, r2
 8003286:	f04f 0100 	mov.w	r1, #0
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	00e2      	lsls	r2, r4, #3
 8003290:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003294:	00d9      	lsls	r1, r3, #3
 8003296:	460b      	mov	r3, r1
 8003298:	4614      	mov	r4, r2
 800329a:	195b      	adds	r3, r3, r5
 800329c:	eb44 0406 	adc.w	r4, r4, r6
 80032a0:	f04f 0100 	mov.w	r1, #0
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	02a2      	lsls	r2, r4, #10
 80032aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80032ae:	0299      	lsls	r1, r3, #10
 80032b0:	460b      	mov	r3, r1
 80032b2:	4614      	mov	r4, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	4621      	mov	r1, r4
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f04f 0400 	mov.w	r4, #0
 80032be:	461a      	mov	r2, r3
 80032c0:	4623      	mov	r3, r4
 80032c2:	f7fc ff63 	bl	800018c <__aeabi_uldivmod>
 80032c6:	4603      	mov	r3, r0
 80032c8:	460c      	mov	r4, r1
 80032ca:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	613b      	str	r3, [r7, #16]
      break;
 80032d0:	e00d      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	0b5b      	lsrs	r3, r3, #13
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	3301      	adds	r3, #1
 80032e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	613b      	str	r3, [r7, #16]
      break;
 80032ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ee:	693b      	ldr	r3, [r7, #16]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	00f42400 	.word	0x00f42400
 8003300:	007a1200 	.word	0x007a1200
 8003304:	080089a8 	.word	0x080089a8

08003308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800330c:	4b02      	ldr	r3, [pc, #8]	; (8003318 <HAL_RCC_GetHCLKFreq+0x10>)
 800330e:	681b      	ldr	r3, [r3, #0]
}
 8003310:	4618      	mov	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr
 8003318:	20000000 	.word	0x20000000

0800331c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003320:	f7ff fff2 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 8003324:	4601      	mov	r1, r0
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	0a1b      	lsrs	r3, r3, #8
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	4a03      	ldr	r2, [pc, #12]	; (8003340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003332:	5cd3      	ldrb	r3, [r2, r3]
 8003334:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003338:	4618      	mov	r0, r3
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40023800 	.word	0x40023800
 8003340:	080089c4 	.word	0x080089c4

08003344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003348:	f7ff ffde 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 800334c:	4601      	mov	r1, r0
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	0adb      	lsrs	r3, r3, #11
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4a03      	ldr	r2, [pc, #12]	; (8003368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800335a:	5cd3      	ldrb	r3, [r2, r3]
 800335c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40023800 	.word	0x40023800
 8003368:	080089c4 	.word	0x080089c4

0800336c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003374:	2300      	movs	r3, #0
 8003376:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003378:	4b29      	ldr	r3, [pc, #164]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d12c      	bne.n	80033de <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003384:	4b26      	ldr	r3, [pc, #152]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003390:	4b24      	ldr	r3, [pc, #144]	; (8003424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	e016      	b.n	80033ca <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339c:	4b20      	ldr	r3, [pc, #128]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	4a1f      	ldr	r2, [pc, #124]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a6:	6253      	str	r3, [r2, #36]	; 0x24
 80033a8:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80033bc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80033be:	4b18      	ldr	r3, [pc, #96]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	4a17      	ldr	r2, [pc, #92]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80033d0:	d105      	bne.n	80033de <RCC_SetFlashLatencyFromMSIRange+0x72>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033d8:	d101      	bne.n	80033de <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80033da:	2301      	movs	r3, #1
 80033dc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d105      	bne.n	80033f0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80033e4:	4b10      	ldr	r3, [pc, #64]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a0f      	ldr	r2, [pc, #60]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ea:	f043 0304 	orr.w	r3, r3, #4
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f023 0201 	bic.w	r2, r3, #1
 80033f8:	490b      	ldr	r1, [pc, #44]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	429a      	cmp	r2, r3
 800340c:	d001      	beq.n	8003412 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800
 8003424:	40007000 	.word	0x40007000
 8003428:	40023c00 	.word	0x40023c00

0800342c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e03f      	b.n	80034be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fd fa06 	bl	8000864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2224      	movs	r2, #36	; 0x24
 800345c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800346e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fb45 	bl	8003b00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003484:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003494:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b088      	sub	sp, #32
 80034ca:	af02      	add	r7, sp, #8
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	603b      	str	r3, [r7, #0]
 80034d2:	4613      	mov	r3, r2
 80034d4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	f040 8083 	bne.w	80035ee <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_UART_Transmit+0x2e>
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e07b      	b.n	80035f0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_UART_Transmit+0x40>
 8003502:	2302      	movs	r3, #2
 8003504:	e074      	b.n	80035f0 <HAL_UART_Transmit+0x12a>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2221      	movs	r2, #33	; 0x21
 8003518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800351c:	f7fd fa78 	bl	8000a10 <HAL_GetTick>
 8003520:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	88fa      	ldrh	r2, [r7, #6]
 8003526:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	88fa      	ldrh	r2, [r7, #6]
 800352c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003536:	e042      	b.n	80035be <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354e:	d122      	bne.n	8003596 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2200      	movs	r2, #0
 8003558:	2180      	movs	r1, #128	; 0x80
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f967 	bl	800382e <UART_WaitOnFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e042      	b.n	80035f0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800357c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	3302      	adds	r3, #2
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	e017      	b.n	80035be <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	3301      	adds	r3, #1
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	e013      	b.n	80035be <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2200      	movs	r2, #0
 800359e:	2180      	movs	r1, #128	; 0x80
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f944 	bl	800382e <UART_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e01f      	b.n	80035f0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	60ba      	str	r2, [r7, #8]
 80035b6:	781a      	ldrb	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1b7      	bne.n	8003538 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2200      	movs	r2, #0
 80035d0:	2140      	movs	r1, #64	; 0x40
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f92b 	bl	800382e <UART_WaitOnFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e006      	b.n	80035f0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e000      	b.n	80035f0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
  }
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10d      	bne.n	800364a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_UART_IRQHandler+0x52>
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f9db 	bl	80039fe <UART_Receive_IT>
      return;
 8003648:	e0d1      	b.n	80037ee <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80b0 	beq.w	80037b2 <HAL_UART_IRQHandler+0x1ba>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d105      	bne.n	8003668 <HAL_UART_IRQHandler+0x70>
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80a5 	beq.w	80037b2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_UART_IRQHandler+0x90>
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003680:	f043 0201 	orr.w	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <HAL_UART_IRQHandler+0xb0>
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a0:	f043 0202 	orr.w	r2, r3, #2
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_UART_IRQHandler+0xd0>
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c0:	f043 0204 	orr.w	r2, r3, #4
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00f      	beq.n	80036f2 <HAL_UART_IRQHandler+0xfa>
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d104      	bne.n	80036e6 <HAL_UART_IRQHandler+0xee>
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ea:	f043 0208 	orr.w	r2, r3, #8
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d078      	beq.n	80037ec <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d007      	beq.n	8003714 <HAL_UART_IRQHandler+0x11c>
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f975 	bl	80039fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	bf0c      	ite	eq
 8003722:	2301      	moveq	r3, #1
 8003724:	2300      	movne	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <HAL_UART_IRQHandler+0x144>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d031      	beq.n	80037a0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f8c0 	bl	80038c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d123      	bne.n	8003798 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800375e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003764:	2b00      	cmp	r3, #0
 8003766:	d013      	beq.n	8003790 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376c:	4a21      	ldr	r2, [pc, #132]	; (80037f4 <HAL_UART_IRQHandler+0x1fc>)
 800376e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003774:	4618      	mov	r0, r3
 8003776:	f7fd fa84 	bl	8000c82 <HAL_DMA_Abort_IT>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d016      	beq.n	80037ae <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800378a:	4610      	mov	r0, r2
 800378c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800378e:	e00e      	b.n	80037ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f843 	bl	800381c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003796:	e00a      	b.n	80037ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f83f 	bl	800381c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379e:	e006      	b.n	80037ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f83b 	bl	800381c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80037ac:	e01e      	b.n	80037ec <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ae:	bf00      	nop
    return;
 80037b0:	e01c      	b.n	80037ec <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_UART_IRQHandler+0x1d6>
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f8ac 	bl	8003924 <UART_Transmit_IT>
    return;
 80037cc:	e00f      	b.n	80037ee <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_UART_IRQHandler+0x1f6>
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f8f3 	bl	80039ce <UART_EndTransmit_IT>
    return;
 80037e8:	bf00      	nop
 80037ea:	e000      	b.n	80037ee <HAL_UART_IRQHandler+0x1f6>
    return;
 80037ec:	bf00      	nop
  }
}
 80037ee:	3720      	adds	r7, #32
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	080038fd 	.word	0x080038fd

080037f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr

0800382e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	4613      	mov	r3, r2
 800383c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800383e:	e02c      	b.n	800389a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d028      	beq.n	800389a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <UART_WaitOnFlagUntilTimeout+0x30>
 800384e:	f7fd f8df 	bl	8000a10 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	429a      	cmp	r2, r3
 800385c:	d21d      	bcs.n	800389a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800386c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0201 	bic.w	r2, r2, #1
 800387c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e00f      	b.n	80038ba <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4013      	ands	r3, r2
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d0c3      	beq.n	8003840 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038d8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695a      	ldr	r2, [r3, #20]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0201 	bic.w	r2, r2, #1
 80038e8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f7ff ff80 	bl	800381c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b21      	cmp	r3, #33	; 0x21
 8003936:	d144      	bne.n	80039c2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003940:	d11a      	bne.n	8003978 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003956:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	1c9a      	adds	r2, r3, #2
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	621a      	str	r2, [r3, #32]
 800396a:	e00e      	b.n	800398a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	621a      	str	r2, [r3, #32]
 8003976:	e008      	b.n	800398a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	1c59      	adds	r1, r3, #1
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6211      	str	r1, [r2, #32]
 8003982:	781a      	ldrb	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29b      	uxth	r3, r3
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	4619      	mov	r1, r3
 8003998:	84d1      	strh	r1, [r2, #38]	; 0x26
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10f      	bne.n	80039be <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	e000      	b.n	80039c4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
  }
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr

080039ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff ff02 	bl	80037f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b22      	cmp	r3, #34	; 0x22
 8003a10:	d171      	bne.n	8003af6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1a:	d123      	bne.n	8003a64 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10e      	bne.n	8003a48 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	1c9a      	adds	r2, r3, #2
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28
 8003a46:	e029      	b.n	8003a9c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	629a      	str	r2, [r3, #40]	; 0x28
 8003a62:	e01b      	b.n	8003a9c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6858      	ldr	r0, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	1c59      	adds	r1, r3, #1
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6291      	str	r1, [r2, #40]	; 0x28
 8003a7c:	b2c2      	uxtb	r2, r0
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	e00c      	b.n	8003a9c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	1c58      	adds	r0, r3, #1
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	6288      	str	r0, [r1, #40]	; 0x28
 8003a94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d120      	bne.n	8003af2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0220 	bic.w	r2, r2, #32
 8003abe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ace:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff fe8e 	bl	800380a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e002      	b.n	8003af8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	e000      	b.n	8003af8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003af6:	2302      	movs	r3, #2
  }
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b40:	f023 030c 	bic.w	r3, r3, #12
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a55      	ldr	r2, [pc, #340]	; (8003cc0 <UART_SetConfig+0x1c0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d103      	bne.n	8003b76 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b6e:	f7ff fbe9 	bl	8003344 <HAL_RCC_GetPCLK2Freq>
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	e002      	b.n	8003b7c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b76:	f7ff fbd1 	bl	800331c <HAL_RCC_GetPCLK1Freq>
 8003b7a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b84:	d14c      	bne.n	8003c20 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009a      	lsls	r2, r3, #2
 8003b90:	441a      	add	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	4a49      	ldr	r2, [pc, #292]	; (8003cc4 <UART_SetConfig+0x1c4>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	0119      	lsls	r1, r3, #4
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	009a      	lsls	r2, r3, #2
 8003bb0:	441a      	add	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bbc:	4b41      	ldr	r3, [pc, #260]	; (8003cc4 <UART_SetConfig+0x1c4>)
 8003bbe:	fba3 0302 	umull	r0, r3, r3, r2
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	2064      	movs	r0, #100	; 0x64
 8003bc6:	fb00 f303 	mul.w	r3, r0, r3
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	3332      	adds	r3, #50	; 0x32
 8003bd0:	4a3c      	ldr	r2, [pc, #240]	; (8003cc4 <UART_SetConfig+0x1c4>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bde:	4419      	add	r1, r3
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	009a      	lsls	r2, r3, #2
 8003bea:	441a      	add	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bf6:	4b33      	ldr	r3, [pc, #204]	; (8003cc4 <UART_SetConfig+0x1c4>)
 8003bf8:	fba3 0302 	umull	r0, r3, r3, r2
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	2064      	movs	r0, #100	; 0x64
 8003c00:	fb00 f303 	mul.w	r3, r0, r3
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	3332      	adds	r3, #50	; 0x32
 8003c0a:	4a2e      	ldr	r2, [pc, #184]	; (8003cc4 <UART_SetConfig+0x1c4>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	f003 0207 	and.w	r2, r3, #7
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	440a      	add	r2, r1
 8003c1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c1e:	e04a      	b.n	8003cb6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	009a      	lsls	r2, r3, #2
 8003c2a:	441a      	add	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c36:	4a23      	ldr	r2, [pc, #140]	; (8003cc4 <UART_SetConfig+0x1c4>)
 8003c38:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	0119      	lsls	r1, r3, #4
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009a      	lsls	r2, r3, #2
 8003c4a:	441a      	add	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c56:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <UART_SetConfig+0x1c4>)
 8003c58:	fba3 0302 	umull	r0, r3, r3, r2
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	2064      	movs	r0, #100	; 0x64
 8003c60:	fb00 f303 	mul.w	r3, r0, r3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	3332      	adds	r3, #50	; 0x32
 8003c6a:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <UART_SetConfig+0x1c4>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c76:	4419      	add	r1, r3
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	009a      	lsls	r2, r3, #2
 8003c82:	441a      	add	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <UART_SetConfig+0x1c4>)
 8003c90:	fba3 0302 	umull	r0, r3, r3, r2
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	2064      	movs	r0, #100	; 0x64
 8003c98:	fb00 f303 	mul.w	r3, r0, r3
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	3332      	adds	r3, #50	; 0x32
 8003ca2:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <UART_SetConfig+0x1c4>)
 8003ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	f003 020f 	and.w	r2, r3, #15
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	440a      	add	r2, r1
 8003cb4:	609a      	str	r2, [r3, #8]
}
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40013800 	.word	0x40013800
 8003cc4:	51eb851f 	.word	0x51eb851f

08003cc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003cd8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003cdc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003cfc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d00:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	4013      	ands	r3, r2
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d28:	b084      	sub	sp, #16
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	f107 0014 	add.w	r0, r7, #20
 8003d36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	b004      	add	sp, #16
 8003d66:	4770      	bx	lr

08003d68 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b09b      	sub	sp, #108	; 0x6c
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	78db      	ldrb	r3, [r3, #3]
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d81f      	bhi.n	8003dda <USB_ActivateEndpoint+0x72>
 8003d9a:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <USB_ActivateEndpoint+0x38>)
 8003d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da0:	08003db1 	.word	0x08003db1
 8003da4:	08003dcd 	.word	0x08003dcd
 8003da8:	08003de3 	.word	0x08003de3
 8003dac:	08003dbf 	.word	0x08003dbf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003db0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003db4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003db8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003dbc:	e012      	b.n	8003de4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003dbe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dc2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003dc6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003dca:	e00b      	b.n	8003de4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003dcc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dd4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003dd8:	e004      	b.n	8003de4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003de0:	e000      	b.n	8003de4 <USB_ActivateEndpoint+0x7c>
      break;
 8003de2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	441a      	add	r2, r3
 8003dee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	441a      	add	r2, r3
 8003e34:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	7b1b      	ldrb	r3, [r3, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f040 8149 	bne.w	80040e8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	785b      	ldrb	r3, [r3, #1]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8084 	beq.w	8003f68 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	4413      	add	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	011a      	lsls	r2, r3, #4
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	88db      	ldrh	r3, [r3, #6]
 8003e88:	085b      	lsrs	r3, r3, #1
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	81fb      	strh	r3, [r7, #14]
 8003ea2:	89fb      	ldrh	r3, [r7, #14]
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01b      	beq.n	8003ee4 <USB_ActivateEndpoint+0x17c>
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec2:	81bb      	strh	r3, [r7, #12]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	441a      	add	r2, r3
 8003ece:	89bb      	ldrh	r3, [r7, #12]
 8003ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003edc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	78db      	ldrb	r3, [r3, #3]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d020      	beq.n	8003f2e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f02:	813b      	strh	r3, [r7, #8]
 8003f04:	893b      	ldrh	r3, [r7, #8]
 8003f06:	f083 0320 	eor.w	r3, r3, #32
 8003f0a:	813b      	strh	r3, [r7, #8]
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	441a      	add	r2, r3
 8003f16:	893b      	ldrh	r3, [r7, #8]
 8003f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	8013      	strh	r3, [r2, #0]
 8003f2c:	e27f      	b.n	800442e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f44:	817b      	strh	r3, [r7, #10]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	441a      	add	r2, r3
 8003f50:	897b      	ldrh	r3, [r7, #10]
 8003f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	8013      	strh	r3, [r2, #0]
 8003f66:	e262      	b.n	800442e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f78:	4413      	add	r3, r2
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	011a      	lsls	r2, r3, #4
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	88db      	ldrh	r3, [r3, #6]
 8003f90:	085b      	lsrs	r3, r3, #1
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	461a      	mov	r2, r3
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	4413      	add	r3, r2
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	011a      	lsls	r2, r3, #4
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	4413      	add	r3, r2
 8003fba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fbe:	623b      	str	r3, [r7, #32]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d112      	bne.n	8003fee <USB_ActivateEndpoint+0x286>
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	801a      	strh	r2, [r3, #0]
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	801a      	strh	r2, [r3, #0]
 8003fec:	e02f      	b.n	800404e <USB_ActivateEndpoint+0x2e6>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ff4:	d813      	bhi.n	800401e <USB_ActivateEndpoint+0x2b6>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	663b      	str	r3, [r7, #96]	; 0x60
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <USB_ActivateEndpoint+0x2a8>
 800400a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800400c:	3301      	adds	r3, #1
 800400e:	663b      	str	r3, [r7, #96]	; 0x60
 8004010:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004012:	b29b      	uxth	r3, r3
 8004014:	029b      	lsls	r3, r3, #10
 8004016:	b29a      	uxth	r2, r3
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	801a      	strh	r2, [r3, #0]
 800401c:	e017      	b.n	800404e <USB_ActivateEndpoint+0x2e6>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	663b      	str	r3, [r7, #96]	; 0x60
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 031f 	and.w	r3, r3, #31
 800402e:	2b00      	cmp	r3, #0
 8004030:	d102      	bne.n	8004038 <USB_ActivateEndpoint+0x2d0>
 8004032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004034:	3b01      	subs	r3, #1
 8004036:	663b      	str	r3, [r7, #96]	; 0x60
 8004038:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800403a:	b29b      	uxth	r3, r3
 800403c:	029b      	lsls	r3, r3, #10
 800403e:	b29b      	uxth	r3, r3
 8004040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004048:	b29a      	uxth	r2, r3
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	83fb      	strh	r3, [r7, #30]
 800405c:	8bfb      	ldrh	r3, [r7, #30]
 800405e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01b      	beq.n	800409e <USB_ActivateEndpoint+0x336>
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407c:	83bb      	strh	r3, [r7, #28]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	441a      	add	r2, r3
 8004088:	8bbb      	ldrh	r3, [r7, #28]
 800408a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800408e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004092:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409a:	b29b      	uxth	r3, r3
 800409c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b4:	837b      	strh	r3, [r7, #26]
 80040b6:	8b7b      	ldrh	r3, [r7, #26]
 80040b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040bc:	837b      	strh	r3, [r7, #26]
 80040be:	8b7b      	ldrh	r3, [r7, #26]
 80040c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040c4:	837b      	strh	r3, [r7, #26]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	441a      	add	r2, r3
 80040d0:	8b7b      	ldrh	r3, [r7, #26]
 80040d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	8013      	strh	r3, [r2, #0]
 80040e6:	e1a2      	b.n	800442e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	441a      	add	r2, r3
 800410c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004118:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800411c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004120:	b29b      	uxth	r3, r3
 8004122:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	65bb      	str	r3, [r7, #88]	; 0x58
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800412e:	b29b      	uxth	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004134:	4413      	add	r3, r2
 8004136:	65bb      	str	r3, [r7, #88]	; 0x58
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	011a      	lsls	r2, r3, #4
 800413e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004140:	4413      	add	r3, r2
 8004142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004146:	657b      	str	r3, [r7, #84]	; 0x54
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	891b      	ldrh	r3, [r3, #8]
 800414c:	085b      	lsrs	r3, r3, #1
 800414e:	b29b      	uxth	r3, r3
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004156:	801a      	strh	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	653b      	str	r3, [r7, #80]	; 0x50
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004162:	b29b      	uxth	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004168:	4413      	add	r3, r2
 800416a:	653b      	str	r3, [r7, #80]	; 0x50
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	011a      	lsls	r2, r3, #4
 8004172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004174:	4413      	add	r3, r2
 8004176:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800417a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	895b      	ldrh	r3, [r3, #10]
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	b29b      	uxth	r3, r3
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	785b      	ldrb	r3, [r3, #1]
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 8091 	bne.w	80042b8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80041a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80041a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01b      	beq.n	80041e6 <USB_ActivateEndpoint+0x47e>
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	441a      	add	r2, r3
 80041d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80041d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	873b      	strh	r3, [r7, #56]	; 0x38
 80041f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d01b      	beq.n	8004236 <USB_ActivateEndpoint+0x4ce>
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004214:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800422a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004232:	b29b      	uxth	r3, r3
 8004234:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	b29b      	uxth	r3, r3
 8004244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800424e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004250:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004254:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004256:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004258:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800425c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	441a      	add	r2, r3
 8004268:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800426a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800426e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427a:	b29b      	uxth	r3, r3
 800427c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	b29b      	uxth	r3, r3
 800428c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004294:	867b      	strh	r3, [r7, #50]	; 0x32
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	441a      	add	r2, r3
 80042a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80042a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	8013      	strh	r3, [r2, #0]
 80042b6:	e0ba      	b.n	800442e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80042c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01d      	beq.n	8004310 <USB_ActivateEndpoint+0x5a8>
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	441a      	add	r2, r3
 80042f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004304:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430c:	b29b      	uxth	r3, r3
 800430e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004320:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01d      	beq.n	8004368 <USB_ActivateEndpoint+0x600>
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	b29b      	uxth	r3, r3
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004342:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	441a      	add	r2, r3
 8004350:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800435c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004360:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004364:	b29b      	uxth	r3, r3
 8004366:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	78db      	ldrb	r3, [r3, #3]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d024      	beq.n	80043ba <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	b29b      	uxth	r3, r3
 800437e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004386:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800438a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800438e:	f083 0320 	eor.w	r3, r3, #32
 8004392:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	441a      	add	r2, r3
 80043a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80043a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	8013      	strh	r3, [r2, #0]
 80043b8:	e01d      	b.n	80043f6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	441a      	add	r2, r3
 80043de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80043e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	441a      	add	r2, r3
 8004418:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800441a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800441e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800442a:	b29b      	uxth	r3, r3
 800442c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800442e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004432:	4618      	mov	r0, r3
 8004434:	376c      	adds	r7, #108	; 0x6c
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b0c4      	sub	sp, #272	; 0x110
 8004440:	af00      	add	r7, sp, #0
 8004442:	1d3b      	adds	r3, r7, #4
 8004444:	6018      	str	r0, [r3, #0]
 8004446:	463b      	mov	r3, r7
 8004448:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800444a:	463b      	mov	r3, r7
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	785b      	ldrb	r3, [r3, #1]
 8004450:	2b01      	cmp	r3, #1
 8004452:	f040 8566 	bne.w	8004f22 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004456:	463b      	mov	r3, r7
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699a      	ldr	r2, [r3, #24]
 800445c:	463b      	mov	r3, r7
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	429a      	cmp	r2, r3
 8004464:	d905      	bls.n	8004472 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004466:	463b      	mov	r3, r7
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004470:	e004      	b.n	800447c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004472:	463b      	mov	r3, r7
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800447c:	463b      	mov	r3, r7
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	7b1b      	ldrb	r3, [r3, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d12c      	bne.n	80044e0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004486:	463b      	mov	r3, r7
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6959      	ldr	r1, [r3, #20]
 800448c:	463b      	mov	r3, r7
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	88da      	ldrh	r2, [r3, #6]
 8004492:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004496:	b29b      	uxth	r3, r3
 8004498:	1d38      	adds	r0, r7, #4
 800449a:	6800      	ldr	r0, [r0, #0]
 800449c:	f001 fa3b 	bl	8005916 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80044a0:	1d3b      	adds	r3, r7, #4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	1d3b      	adds	r3, r7, #4
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	461a      	mov	r2, r3
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	4413      	add	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	463b      	mov	r3, r7
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	011a      	lsls	r2, r3, #4
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	4413      	add	r3, r2
 80044c4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80044c8:	f107 0310 	add.w	r3, r7, #16
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	f107 0310 	add.w	r3, r7, #16
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	801a      	strh	r2, [r3, #0]
 80044dc:	f000 bcec 	b.w	8004eb8 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80044e0:	463b      	mov	r3, r7
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	78db      	ldrb	r3, [r3, #3]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	f040 8356 	bne.w	8004b98 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80044ec:	463b      	mov	r3, r7
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6a1a      	ldr	r2, [r3, #32]
 80044f2:	463b      	mov	r3, r7
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	f240 82fa 	bls.w	8004af2 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80044fe:	1d3b      	adds	r3, r7, #4
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	463b      	mov	r3, r7
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	b29b      	uxth	r3, r3
 8004510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004518:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800451c:	1d3b      	adds	r3, r7, #4
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	463b      	mov	r3, r7
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	441a      	add	r2, r3
 800452a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800452e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004536:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800453a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453e:	b29b      	uxth	r3, r3
 8004540:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8004542:	463b      	mov	r3, r7
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800454c:	463b      	mov	r3, r7
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6a1a      	ldr	r2, [r3, #32]
 8004552:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004556:	1ad2      	subs	r2, r2, r3
 8004558:	463b      	mov	r3, r7
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800455e:	1d3b      	adds	r3, r7, #4
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	463b      	mov	r3, r7
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	b29b      	uxth	r3, r3
 8004570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 815e 	beq.w	8004836 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800457a:	1d3b      	adds	r3, r7, #4
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	637b      	str	r3, [r7, #52]	; 0x34
 8004580:	463b      	mov	r3, r7
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d164      	bne.n	8004654 <USB_EPStartXfer+0x218>
 800458a:	1d3b      	adds	r3, r7, #4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004590:	1d3b      	adds	r3, r7, #4
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004598:	b29b      	uxth	r3, r3
 800459a:	461a      	mov	r2, r3
 800459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459e:	4413      	add	r3, r2
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045a2:	463b      	mov	r3, r7
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	011a      	lsls	r2, r3, #4
 80045aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ac:	4413      	add	r3, r2
 80045ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80045b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d112      	bne.n	80045e2 <USB_EPStartXfer+0x1a6>
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	801a      	strh	r2, [r3, #0]
 80045cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045da:	b29a      	uxth	r2, r3
 80045dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045de:	801a      	strh	r2, [r3, #0]
 80045e0:	e054      	b.n	800468c <USB_EPStartXfer+0x250>
 80045e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80045e6:	2b3e      	cmp	r3, #62	; 0x3e
 80045e8:	d817      	bhi.n	800461a <USB_EPStartXfer+0x1de>
 80045ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80045ee:	085b      	lsrs	r3, r3, #1
 80045f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d004      	beq.n	800460a <USB_EPStartXfer+0x1ce>
 8004600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004604:	3301      	adds	r3, #1
 8004606:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800460a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800460e:	b29b      	uxth	r3, r3
 8004610:	029b      	lsls	r3, r3, #10
 8004612:	b29a      	uxth	r2, r3
 8004614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004616:	801a      	strh	r2, [r3, #0]
 8004618:	e038      	b.n	800468c <USB_EPStartXfer+0x250>
 800461a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004624:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004628:	f003 031f 	and.w	r3, r3, #31
 800462c:	2b00      	cmp	r3, #0
 800462e:	d104      	bne.n	800463a <USB_EPStartXfer+0x1fe>
 8004630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004634:	3b01      	subs	r3, #1
 8004636:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800463a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800463e:	b29b      	uxth	r3, r3
 8004640:	029b      	lsls	r3, r3, #10
 8004642:	b29b      	uxth	r3, r3
 8004644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800464c:	b29a      	uxth	r2, r3
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004650:	801a      	strh	r2, [r3, #0]
 8004652:	e01b      	b.n	800468c <USB_EPStartXfer+0x250>
 8004654:	463b      	mov	r3, r7
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	785b      	ldrb	r3, [r3, #1]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d116      	bne.n	800468c <USB_EPStartXfer+0x250>
 800465e:	1d3b      	adds	r3, r7, #4
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004666:	b29b      	uxth	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466c:	4413      	add	r3, r2
 800466e:	637b      	str	r3, [r7, #52]	; 0x34
 8004670:	463b      	mov	r3, r7
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	011a      	lsls	r2, r3, #4
 8004678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467a:	4413      	add	r3, r2
 800467c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004680:	633b      	str	r3, [r7, #48]	; 0x30
 8004682:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004686:	b29a      	uxth	r2, r3
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800468c:	463b      	mov	r3, r7
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	895b      	ldrh	r3, [r3, #10]
 8004692:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004696:	463b      	mov	r3, r7
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6959      	ldr	r1, [r3, #20]
 800469c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80046a6:	1d38      	adds	r0, r7, #4
 80046a8:	6800      	ldr	r0, [r0, #0]
 80046aa:	f001 f934 	bl	8005916 <USB_WritePMA>
            ep->xfer_buff += len;
 80046ae:	463b      	mov	r3, r7
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695a      	ldr	r2, [r3, #20]
 80046b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80046b8:	441a      	add	r2, r3
 80046ba:	463b      	mov	r3, r7
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80046c0:	463b      	mov	r3, r7
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6a1a      	ldr	r2, [r3, #32]
 80046c6:	463b      	mov	r3, r7
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d90e      	bls.n	80046ee <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 80046d0:	463b      	mov	r3, r7
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80046da:	463b      	mov	r3, r7
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6a1a      	ldr	r2, [r3, #32]
 80046e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80046e4:	1ad2      	subs	r2, r2, r3
 80046e6:	463b      	mov	r3, r7
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	621a      	str	r2, [r3, #32]
 80046ec:	e008      	b.n	8004700 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80046ee:	463b      	mov	r3, r7
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80046f8:	463b      	mov	r3, r7
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2200      	movs	r2, #0
 80046fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004700:	463b      	mov	r3, r7
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	785b      	ldrb	r3, [r3, #1]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d164      	bne.n	80047d4 <USB_EPStartXfer+0x398>
 800470a:	1d3b      	adds	r3, r7, #4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	1d3b      	adds	r3, r7, #4
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004718:	b29b      	uxth	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	4413      	add	r3, r2
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	463b      	mov	r3, r7
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	011a      	lsls	r2, r3, #4
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	4413      	add	r3, r2
 800472e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004738:	2b00      	cmp	r3, #0
 800473a:	d112      	bne.n	8004762 <USB_EPStartXfer+0x326>
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004746:	b29a      	uxth	r2, r3
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	801a      	strh	r2, [r3, #0]
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800475a:	b29a      	uxth	r2, r3
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	801a      	strh	r2, [r3, #0]
 8004760:	e057      	b.n	8004812 <USB_EPStartXfer+0x3d6>
 8004762:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004766:	2b3e      	cmp	r3, #62	; 0x3e
 8004768:	d817      	bhi.n	800479a <USB_EPStartXfer+0x35e>
 800476a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004774:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d004      	beq.n	800478a <USB_EPStartXfer+0x34e>
 8004780:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004784:	3301      	adds	r3, #1
 8004786:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800478a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800478e:	b29b      	uxth	r3, r3
 8004790:	029b      	lsls	r3, r3, #10
 8004792:	b29a      	uxth	r2, r3
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	801a      	strh	r2, [r3, #0]
 8004798:	e03b      	b.n	8004812 <USB_EPStartXfer+0x3d6>
 800479a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d104      	bne.n	80047ba <USB_EPStartXfer+0x37e>
 80047b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80047b4:	3b01      	subs	r3, #1
 80047b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80047be:	b29b      	uxth	r3, r3
 80047c0:	029b      	lsls	r3, r3, #10
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	801a      	strh	r2, [r3, #0]
 80047d2:	e01e      	b.n	8004812 <USB_EPStartXfer+0x3d6>
 80047d4:	463b      	mov	r3, r7
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	785b      	ldrb	r3, [r3, #1]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d119      	bne.n	8004812 <USB_EPStartXfer+0x3d6>
 80047de:	1d3b      	adds	r3, r7, #4
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
 80047e4:	1d3b      	adds	r3, r7, #4
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	4413      	add	r3, r2
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
 80047f6:	463b      	mov	r3, r7
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	011a      	lsls	r2, r3, #4
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	4413      	add	r3, r2
 8004802:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004806:	623b      	str	r3, [r7, #32]
 8004808:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800480c:	b29a      	uxth	r2, r3
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004812:	463b      	mov	r3, r7
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	891b      	ldrh	r3, [r3, #8]
 8004818:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800481c:	463b      	mov	r3, r7
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6959      	ldr	r1, [r3, #20]
 8004822:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004826:	b29b      	uxth	r3, r3
 8004828:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800482c:	1d38      	adds	r0, r7, #4
 800482e:	6800      	ldr	r0, [r0, #0]
 8004830:	f001 f871 	bl	8005916 <USB_WritePMA>
 8004834:	e340      	b.n	8004eb8 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004836:	463b      	mov	r3, r7
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	785b      	ldrb	r3, [r3, #1]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d164      	bne.n	800490a <USB_EPStartXfer+0x4ce>
 8004840:	1d3b      	adds	r3, r7, #4
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004846:	1d3b      	adds	r3, r7, #4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484e:	b29b      	uxth	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004854:	4413      	add	r3, r2
 8004856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004858:	463b      	mov	r3, r7
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	011a      	lsls	r2, r3, #4
 8004860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004862:	4413      	add	r3, r2
 8004864:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004868:	64bb      	str	r3, [r7, #72]	; 0x48
 800486a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800486e:	2b00      	cmp	r3, #0
 8004870:	d112      	bne.n	8004898 <USB_EPStartXfer+0x45c>
 8004872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800487c:	b29a      	uxth	r2, r3
 800487e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004880:	801a      	strh	r2, [r3, #0]
 8004882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29b      	uxth	r3, r3
 8004888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800488c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004890:	b29a      	uxth	r2, r3
 8004892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004894:	801a      	strh	r2, [r3, #0]
 8004896:	e057      	b.n	8004948 <USB_EPStartXfer+0x50c>
 8004898:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800489c:	2b3e      	cmp	r3, #62	; 0x3e
 800489e:	d817      	bhi.n	80048d0 <USB_EPStartXfer+0x494>
 80048a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d004      	beq.n	80048c0 <USB_EPStartXfer+0x484>
 80048b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ba:	3301      	adds	r3, #1
 80048bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	029b      	lsls	r3, r3, #10
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048cc:	801a      	strh	r2, [r3, #0]
 80048ce:	e03b      	b.n	8004948 <USB_EPStartXfer+0x50c>
 80048d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048d4:	095b      	lsrs	r3, r3, #5
 80048d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048de:	f003 031f 	and.w	r3, r3, #31
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d104      	bne.n	80048f0 <USB_EPStartXfer+0x4b4>
 80048e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ea:	3b01      	subs	r3, #1
 80048ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	029b      	lsls	r3, r3, #10
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004902:	b29a      	uxth	r2, r3
 8004904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004906:	801a      	strh	r2, [r3, #0]
 8004908:	e01e      	b.n	8004948 <USB_EPStartXfer+0x50c>
 800490a:	463b      	mov	r3, r7
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	785b      	ldrb	r3, [r3, #1]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d119      	bne.n	8004948 <USB_EPStartXfer+0x50c>
 8004914:	1d3b      	adds	r3, r7, #4
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	657b      	str	r3, [r7, #84]	; 0x54
 800491a:	1d3b      	adds	r3, r7, #4
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004922:	b29b      	uxth	r3, r3
 8004924:	461a      	mov	r2, r3
 8004926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004928:	4413      	add	r3, r2
 800492a:	657b      	str	r3, [r7, #84]	; 0x54
 800492c:	463b      	mov	r3, r7
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	011a      	lsls	r2, r3, #4
 8004934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004936:	4413      	add	r3, r2
 8004938:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800493c:	653b      	str	r3, [r7, #80]	; 0x50
 800493e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004942:	b29a      	uxth	r2, r3
 8004944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004946:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004948:	463b      	mov	r3, r7
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	891b      	ldrh	r3, [r3, #8]
 800494e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004952:	463b      	mov	r3, r7
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6959      	ldr	r1, [r3, #20]
 8004958:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800495c:	b29b      	uxth	r3, r3
 800495e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004962:	1d38      	adds	r0, r7, #4
 8004964:	6800      	ldr	r0, [r0, #0]
 8004966:	f000 ffd6 	bl	8005916 <USB_WritePMA>
            ep->xfer_buff += len;
 800496a:	463b      	mov	r3, r7
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695a      	ldr	r2, [r3, #20]
 8004970:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004974:	441a      	add	r2, r3
 8004976:	463b      	mov	r3, r7
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800497c:	463b      	mov	r3, r7
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6a1a      	ldr	r2, [r3, #32]
 8004982:	463b      	mov	r3, r7
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	429a      	cmp	r2, r3
 800498a:	d90e      	bls.n	80049aa <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800498c:	463b      	mov	r3, r7
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8004996:	463b      	mov	r3, r7
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6a1a      	ldr	r2, [r3, #32]
 800499c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049a0:	1ad2      	subs	r2, r2, r3
 80049a2:	463b      	mov	r3, r7
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	621a      	str	r2, [r3, #32]
 80049a8:	e008      	b.n	80049bc <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 80049aa:	463b      	mov	r3, r7
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80049b4:	463b      	mov	r3, r7
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2200      	movs	r2, #0
 80049ba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049bc:	1d3b      	adds	r3, r7, #4
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	647b      	str	r3, [r7, #68]	; 0x44
 80049c2:	463b      	mov	r3, r7
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	785b      	ldrb	r3, [r3, #1]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d164      	bne.n	8004a96 <USB_EPStartXfer+0x65a>
 80049cc:	1d3b      	adds	r3, r7, #4
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049d2:	1d3b      	adds	r3, r7, #4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049da:	b29b      	uxth	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e0:	4413      	add	r3, r2
 80049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e4:	463b      	mov	r3, r7
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	011a      	lsls	r2, r3, #4
 80049ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ee:	4413      	add	r3, r2
 80049f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80049f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d112      	bne.n	8004a24 <USB_EPStartXfer+0x5e8>
 80049fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0c:	801a      	strh	r2, [r3, #0]
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a20:	801a      	strh	r2, [r3, #0]
 8004a22:	e054      	b.n	8004ace <USB_EPStartXfer+0x692>
 8004a24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a28:	2b3e      	cmp	r3, #62	; 0x3e
 8004a2a:	d817      	bhi.n	8004a5c <USB_EPStartXfer+0x620>
 8004a2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a30:	085b      	lsrs	r3, r3, #1
 8004a32:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d004      	beq.n	8004a4c <USB_EPStartXfer+0x610>
 8004a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a46:	3301      	adds	r3, #1
 8004a48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	029b      	lsls	r3, r3, #10
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	801a      	strh	r2, [r3, #0]
 8004a5a:	e038      	b.n	8004ace <USB_EPStartXfer+0x692>
 8004a5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a6a:	f003 031f 	and.w	r3, r3, #31
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d104      	bne.n	8004a7c <USB_EPStartXfer+0x640>
 8004a72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a76:	3b01      	subs	r3, #1
 8004a78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	029b      	lsls	r3, r3, #10
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a92:	801a      	strh	r2, [r3, #0]
 8004a94:	e01b      	b.n	8004ace <USB_EPStartXfer+0x692>
 8004a96:	463b      	mov	r3, r7
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d116      	bne.n	8004ace <USB_EPStartXfer+0x692>
 8004aa0:	1d3b      	adds	r3, r7, #4
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	461a      	mov	r2, r3
 8004aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aae:	4413      	add	r3, r2
 8004ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab2:	463b      	mov	r3, r7
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	011a      	lsls	r2, r3, #4
 8004aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004abc:	4413      	add	r3, r2
 8004abe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ac2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ac4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004acc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ace:	463b      	mov	r3, r7
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	895b      	ldrh	r3, [r3, #10]
 8004ad4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ad8:	463b      	mov	r3, r7
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6959      	ldr	r1, [r3, #20]
 8004ade:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004ae8:	1d38      	adds	r0, r7, #4
 8004aea:	6800      	ldr	r0, [r0, #0]
 8004aec:	f000 ff13 	bl	8005916 <USB_WritePMA>
 8004af0:	e1e2      	b.n	8004eb8 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8004af2:	463b      	mov	r3, r7
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004afc:	1d3b      	adds	r3, r7, #4
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	463b      	mov	r3, r7
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b16:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004b1a:	1d3b      	adds	r3, r7, #4
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	463b      	mov	r3, r7
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	441a      	add	r2, r3
 8004b28:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004b40:	1d3b      	adds	r3, r7, #4
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	663b      	str	r3, [r7, #96]	; 0x60
 8004b46:	1d3b      	adds	r3, r7, #4
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	461a      	mov	r2, r3
 8004b52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b54:	4413      	add	r3, r2
 8004b56:	663b      	str	r3, [r7, #96]	; 0x60
 8004b58:	463b      	mov	r3, r7
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	011a      	lsls	r2, r3, #4
 8004b60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b62:	4413      	add	r3, r2
 8004b64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b74:	463b      	mov	r3, r7
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	891b      	ldrh	r3, [r3, #8]
 8004b7a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b7e:	463b      	mov	r3, r7
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6959      	ldr	r1, [r3, #20]
 8004b84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004b8e:	1d38      	adds	r0, r7, #4
 8004b90:	6800      	ldr	r0, [r0, #0]
 8004b92:	f000 fec0 	bl	8005916 <USB_WritePMA>
 8004b96:	e18f      	b.n	8004eb8 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b98:	1d3b      	adds	r3, r7, #4
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	463b      	mov	r3, r7
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 808f 	beq.w	8004cd2 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004bb4:	1d3b      	adds	r3, r7, #4
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bba:	463b      	mov	r3, r7
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d164      	bne.n	8004c8e <USB_EPStartXfer+0x852>
 8004bc4:	1d3b      	adds	r3, r7, #4
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	673b      	str	r3, [r7, #112]	; 0x70
 8004bca:	1d3b      	adds	r3, r7, #4
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bd8:	4413      	add	r3, r2
 8004bda:	673b      	str	r3, [r7, #112]	; 0x70
 8004bdc:	463b      	mov	r3, r7
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	011a      	lsls	r2, r3, #4
 8004be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004be6:	4413      	add	r3, r2
 8004be8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d112      	bne.n	8004c1c <USB_EPStartXfer+0x7e0>
 8004bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c04:	801a      	strh	r2, [r3, #0]
 8004c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c18:	801a      	strh	r2, [r3, #0]
 8004c1a:	e054      	b.n	8004cc6 <USB_EPStartXfer+0x88a>
 8004c1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c20:	2b3e      	cmp	r3, #62	; 0x3e
 8004c22:	d817      	bhi.n	8004c54 <USB_EPStartXfer+0x818>
 8004c24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c28:	085b      	lsrs	r3, r3, #1
 8004c2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d004      	beq.n	8004c44 <USB_EPStartXfer+0x808>
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	3301      	adds	r3, #1
 8004c40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	029b      	lsls	r3, r3, #10
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c50:	801a      	strh	r2, [r3, #0]
 8004c52:	e038      	b.n	8004cc6 <USB_EPStartXfer+0x88a>
 8004c54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c62:	f003 031f 	and.w	r3, r3, #31
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d104      	bne.n	8004c74 <USB_EPStartXfer+0x838>
 8004c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	029b      	lsls	r3, r3, #10
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c8a:	801a      	strh	r2, [r3, #0]
 8004c8c:	e01b      	b.n	8004cc6 <USB_EPStartXfer+0x88a>
 8004c8e:	463b      	mov	r3, r7
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	785b      	ldrb	r3, [r3, #1]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d116      	bne.n	8004cc6 <USB_EPStartXfer+0x88a>
 8004c98:	1d3b      	adds	r3, r7, #4
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ca6:	4413      	add	r3, r2
 8004ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004caa:	463b      	mov	r3, r7
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	011a      	lsls	r2, r3, #4
 8004cb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cba:	677b      	str	r3, [r7, #116]	; 0x74
 8004cbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004cc6:	463b      	mov	r3, r7
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	895b      	ldrh	r3, [r3, #10]
 8004ccc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8004cd0:	e097      	b.n	8004e02 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004cd2:	463b      	mov	r3, r7
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	785b      	ldrb	r3, [r3, #1]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d168      	bne.n	8004dae <USB_EPStartXfer+0x972>
 8004cdc:	1d3b      	adds	r3, r7, #4
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ce4:	1d3b      	adds	r3, r7, #4
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cfa:	463b      	mov	r3, r7
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	011a      	lsls	r2, r3, #4
 8004d02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d06:	4413      	add	r3, r2
 8004d08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d112      	bne.n	8004d3c <USB_EPStartXfer+0x900>
 8004d16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d24:	801a      	strh	r2, [r3, #0]
 8004d26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d38:	801a      	strh	r2, [r3, #0]
 8004d3a:	e05d      	b.n	8004df8 <USB_EPStartXfer+0x9bc>
 8004d3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d40:	2b3e      	cmp	r3, #62	; 0x3e
 8004d42:	d817      	bhi.n	8004d74 <USB_EPStartXfer+0x938>
 8004d44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d48:	085b      	lsrs	r3, r3, #1
 8004d4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d004      	beq.n	8004d64 <USB_EPStartXfer+0x928>
 8004d5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d5e:	3301      	adds	r3, #1
 8004d60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	029b      	lsls	r3, r3, #10
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d70:	801a      	strh	r2, [r3, #0]
 8004d72:	e041      	b.n	8004df8 <USB_EPStartXfer+0x9bc>
 8004d74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d82:	f003 031f 	and.w	r3, r3, #31
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <USB_EPStartXfer+0x958>
 8004d8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	029b      	lsls	r3, r3, #10
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004daa:	801a      	strh	r2, [r3, #0]
 8004dac:	e024      	b.n	8004df8 <USB_EPStartXfer+0x9bc>
 8004dae:	463b      	mov	r3, r7
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d11f      	bne.n	8004df8 <USB_EPStartXfer+0x9bc>
 8004db8:	1d3b      	adds	r3, r7, #4
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dc0:	1d3b      	adds	r3, r7, #4
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	011a      	lsls	r2, r3, #4
 8004dde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004de2:	4413      	add	r3, r2
 8004de4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004df6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004df8:	463b      	mov	r3, r7
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	891b      	ldrh	r3, [r3, #8]
 8004dfe:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e02:	463b      	mov	r3, r7
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6959      	ldr	r1, [r3, #20]
 8004e08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004e12:	1d38      	adds	r0, r7, #4
 8004e14:	6800      	ldr	r0, [r0, #0]
 8004e16:	f000 fd7e 	bl	8005916 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004e1a:	463b      	mov	r3, r7
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d122      	bne.n	8004e6a <USB_EPStartXfer+0xa2e>
 8004e24:	1d3b      	adds	r3, r7, #4
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	463b      	mov	r3, r7
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004e42:	1d3b      	adds	r3, r7, #4
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	463b      	mov	r3, r7
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	441a      	add	r2, r3
 8004e50:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	8013      	strh	r3, [r2, #0]
 8004e68:	e026      	b.n	8004eb8 <USB_EPStartXfer+0xa7c>
 8004e6a:	463b      	mov	r3, r7
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d121      	bne.n	8004eb8 <USB_EPStartXfer+0xa7c>
 8004e74:	1d3b      	adds	r3, r7, #4
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	463b      	mov	r3, r7
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004e92:	1d3b      	adds	r3, r7, #4
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	463b      	mov	r3, r7
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	441a      	add	r2, r3
 8004ea0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004eb8:	1d3b      	adds	r3, r7, #4
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	463b      	mov	r3, r7
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f107 020e 	add.w	r2, r7, #14
 8004ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed6:	8013      	strh	r3, [r2, #0]
 8004ed8:	f107 030e 	add.w	r3, r7, #14
 8004edc:	f107 020e 	add.w	r2, r7, #14
 8004ee0:	8812      	ldrh	r2, [r2, #0]
 8004ee2:	f082 0210 	eor.w	r2, r2, #16
 8004ee6:	801a      	strh	r2, [r3, #0]
 8004ee8:	f107 030e 	add.w	r3, r7, #14
 8004eec:	f107 020e 	add.w	r2, r7, #14
 8004ef0:	8812      	ldrh	r2, [r2, #0]
 8004ef2:	f082 0220 	eor.w	r2, r2, #32
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	1d3b      	adds	r3, r7, #4
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	463b      	mov	r3, r7
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	441a      	add	r2, r3
 8004f06:	f107 030e 	add.w	r3, r7, #14
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	8013      	strh	r3, [r2, #0]
 8004f20:	e3b5      	b.n	800568e <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004f22:	463b      	mov	r3, r7
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	7b1b      	ldrb	r3, [r3, #12]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f040 8090 	bne.w	800504e <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8004f2e:	463b      	mov	r3, r7
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699a      	ldr	r2, [r3, #24]
 8004f34:	463b      	mov	r3, r7
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d90e      	bls.n	8004f5c <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8004f3e:	463b      	mov	r3, r7
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8004f48:	463b      	mov	r3, r7
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f52:	1ad2      	subs	r2, r2, r3
 8004f54:	463b      	mov	r3, r7
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	619a      	str	r2, [r3, #24]
 8004f5a:	e008      	b.n	8004f6e <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8004f5c:	463b      	mov	r3, r7
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8004f66:	463b      	mov	r3, r7
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004f6e:	1d3b      	adds	r3, r7, #4
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f76:	1d3b      	adds	r3, r7, #4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f86:	4413      	add	r3, r2
 8004f88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f8c:	463b      	mov	r3, r7
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	011a      	lsls	r2, r3, #4
 8004f94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f98:	4413      	add	r3, r2
 8004f9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fa2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d116      	bne.n	8004fd8 <USB_EPStartXfer+0xb9c>
 8004faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fbc:	801a      	strh	r2, [r3, #0]
 8004fbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fd4:	801a      	strh	r2, [r3, #0]
 8004fd6:	e32c      	b.n	8005632 <USB_EPStartXfer+0x11f6>
 8004fd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fdc:	2b3e      	cmp	r3, #62	; 0x3e
 8004fde:	d818      	bhi.n	8005012 <USB_EPStartXfer+0xbd6>
 8004fe0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004fea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d004      	beq.n	8005000 <USB_EPStartXfer+0xbc4>
 8004ff6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005000:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005004:	b29b      	uxth	r3, r3
 8005006:	029b      	lsls	r3, r3, #10
 8005008:	b29a      	uxth	r2, r3
 800500a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800500e:	801a      	strh	r2, [r3, #0]
 8005010:	e30f      	b.n	8005632 <USB_EPStartXfer+0x11f6>
 8005012:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800501c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005020:	f003 031f 	and.w	r3, r3, #31
 8005024:	2b00      	cmp	r3, #0
 8005026:	d104      	bne.n	8005032 <USB_EPStartXfer+0xbf6>
 8005028:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800502c:	3b01      	subs	r3, #1
 800502e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005032:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005036:	b29b      	uxth	r3, r3
 8005038:	029b      	lsls	r3, r3, #10
 800503a:	b29b      	uxth	r3, r3
 800503c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005044:	b29a      	uxth	r2, r3
 8005046:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800504a:	801a      	strh	r2, [r3, #0]
 800504c:	e2f1      	b.n	8005632 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800504e:	463b      	mov	r3, r7
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	78db      	ldrb	r3, [r3, #3]
 8005054:	2b02      	cmp	r3, #2
 8005056:	f040 818f 	bne.w	8005378 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800505a:	463b      	mov	r3, r7
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	785b      	ldrb	r3, [r3, #1]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d175      	bne.n	8005150 <USB_EPStartXfer+0xd14>
 8005064:	1d3b      	adds	r3, r7, #4
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800506c:	1d3b      	adds	r3, r7, #4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005074:	b29b      	uxth	r3, r3
 8005076:	461a      	mov	r2, r3
 8005078:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800507c:	4413      	add	r3, r2
 800507e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005082:	463b      	mov	r3, r7
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	011a      	lsls	r2, r3, #4
 800508a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800508e:	4413      	add	r3, r2
 8005090:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005094:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005098:	463b      	mov	r3, r7
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d116      	bne.n	80050d0 <USB_EPStartXfer+0xc94>
 80050a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050cc:	801a      	strh	r2, [r3, #0]
 80050ce:	e065      	b.n	800519c <USB_EPStartXfer+0xd60>
 80050d0:	463b      	mov	r3, r7
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b3e      	cmp	r3, #62	; 0x3e
 80050d8:	d81a      	bhi.n	8005110 <USB_EPStartXfer+0xcd4>
 80050da:	463b      	mov	r3, r7
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	085b      	lsrs	r3, r3, #1
 80050e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050e6:	463b      	mov	r3, r7
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <USB_EPStartXfer+0xcc2>
 80050f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050f8:	3301      	adds	r3, #1
 80050fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005102:	b29b      	uxth	r3, r3
 8005104:	029b      	lsls	r3, r3, #10
 8005106:	b29a      	uxth	r2, r3
 8005108:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800510c:	801a      	strh	r2, [r3, #0]
 800510e:	e045      	b.n	800519c <USB_EPStartXfer+0xd60>
 8005110:	463b      	mov	r3, r7
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800511c:	463b      	mov	r3, r7
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 031f 	and.w	r3, r3, #31
 8005126:	2b00      	cmp	r3, #0
 8005128:	d104      	bne.n	8005134 <USB_EPStartXfer+0xcf8>
 800512a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800512e:	3b01      	subs	r3, #1
 8005130:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005134:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005138:	b29b      	uxth	r3, r3
 800513a:	029b      	lsls	r3, r3, #10
 800513c:	b29b      	uxth	r3, r3
 800513e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005146:	b29a      	uxth	r2, r3
 8005148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800514c:	801a      	strh	r2, [r3, #0]
 800514e:	e025      	b.n	800519c <USB_EPStartXfer+0xd60>
 8005150:	463b      	mov	r3, r7
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	785b      	ldrb	r3, [r3, #1]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d120      	bne.n	800519c <USB_EPStartXfer+0xd60>
 800515a:	1d3b      	adds	r3, r7, #4
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005162:	1d3b      	adds	r3, r7, #4
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516a:	b29b      	uxth	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005172:	4413      	add	r3, r2
 8005174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005178:	463b      	mov	r3, r7
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	011a      	lsls	r2, r3, #4
 8005180:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005184:	4413      	add	r3, r2
 8005186:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800518a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800518e:	463b      	mov	r3, r7
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	b29a      	uxth	r2, r3
 8005196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800519a:	801a      	strh	r2, [r3, #0]
 800519c:	1d3b      	adds	r3, r7, #4
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051a4:	463b      	mov	r3, r7
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	785b      	ldrb	r3, [r3, #1]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d175      	bne.n	800529a <USB_EPStartXfer+0xe5e>
 80051ae:	1d3b      	adds	r3, r7, #4
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051b6:	1d3b      	adds	r3, r7, #4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051be:	b29b      	uxth	r3, r3
 80051c0:	461a      	mov	r2, r3
 80051c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051c6:	4413      	add	r3, r2
 80051c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051cc:	463b      	mov	r3, r7
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	011a      	lsls	r2, r3, #4
 80051d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051d8:	4413      	add	r3, r2
 80051da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051e2:	463b      	mov	r3, r7
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d116      	bne.n	800521a <USB_EPStartXfer+0xdde>
 80051ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051fe:	801a      	strh	r2, [r3, #0]
 8005200:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800520c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005210:	b29a      	uxth	r2, r3
 8005212:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005216:	801a      	strh	r2, [r3, #0]
 8005218:	e061      	b.n	80052de <USB_EPStartXfer+0xea2>
 800521a:	463b      	mov	r3, r7
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	2b3e      	cmp	r3, #62	; 0x3e
 8005222:	d81a      	bhi.n	800525a <USB_EPStartXfer+0xe1e>
 8005224:	463b      	mov	r3, r7
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	085b      	lsrs	r3, r3, #1
 800522c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005230:	463b      	mov	r3, r7
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d004      	beq.n	8005248 <USB_EPStartXfer+0xe0c>
 800523e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005242:	3301      	adds	r3, #1
 8005244:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524c:	b29b      	uxth	r3, r3
 800524e:	029b      	lsls	r3, r3, #10
 8005250:	b29a      	uxth	r2, r3
 8005252:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005256:	801a      	strh	r2, [r3, #0]
 8005258:	e041      	b.n	80052de <USB_EPStartXfer+0xea2>
 800525a:	463b      	mov	r3, r7
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005266:	463b      	mov	r3, r7
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f003 031f 	and.w	r3, r3, #31
 8005270:	2b00      	cmp	r3, #0
 8005272:	d104      	bne.n	800527e <USB_EPStartXfer+0xe42>
 8005274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005278:	3b01      	subs	r3, #1
 800527a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800527e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005282:	b29b      	uxth	r3, r3
 8005284:	029b      	lsls	r3, r3, #10
 8005286:	b29b      	uxth	r3, r3
 8005288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800528c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005290:	b29a      	uxth	r2, r3
 8005292:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005296:	801a      	strh	r2, [r3, #0]
 8005298:	e021      	b.n	80052de <USB_EPStartXfer+0xea2>
 800529a:	463b      	mov	r3, r7
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	785b      	ldrb	r3, [r3, #1]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d11c      	bne.n	80052de <USB_EPStartXfer+0xea2>
 80052a4:	1d3b      	adds	r3, r7, #4
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052b4:	4413      	add	r3, r2
 80052b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052ba:	463b      	mov	r3, r7
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	011a      	lsls	r2, r3, #4
 80052c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052c6:	4413      	add	r3, r2
 80052c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80052d0:	463b      	mov	r3, r7
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80052dc:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 80052de:	463b      	mov	r3, r7
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 81a4 	beq.w	8005632 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80052ea:	1d3b      	adds	r3, r7, #4
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	463b      	mov	r3, r7
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80052fe:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <USB_EPStartXfer+0xeda>
 800530a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800530e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10d      	bne.n	8005332 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005316:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800531a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800531e:	2b00      	cmp	r3, #0
 8005320:	f040 8187 	bne.w	8005632 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005324:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	f040 8180 	bne.w	8005632 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005332:	1d3b      	adds	r3, r7, #4
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	463b      	mov	r3, r7
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005350:	1d3b      	adds	r3, r7, #4
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	463b      	mov	r3, r7
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	441a      	add	r2, r3
 800535e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800536a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800536e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005372:	b29b      	uxth	r3, r3
 8005374:	8013      	strh	r3, [r2, #0]
 8005376:	e15c      	b.n	8005632 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005378:	463b      	mov	r3, r7
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	78db      	ldrb	r3, [r3, #3]
 800537e:	2b01      	cmp	r3, #1
 8005380:	f040 8155 	bne.w	800562e <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8005384:	463b      	mov	r3, r7
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	463b      	mov	r3, r7
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	429a      	cmp	r2, r3
 8005392:	d90e      	bls.n	80053b2 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8005394:	463b      	mov	r3, r7
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800539e:	463b      	mov	r3, r7
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699a      	ldr	r2, [r3, #24]
 80053a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80053a8:	1ad2      	subs	r2, r2, r3
 80053aa:	463b      	mov	r3, r7
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	619a      	str	r2, [r3, #24]
 80053b0:	e008      	b.n	80053c4 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80053b2:	463b      	mov	r3, r7
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80053bc:	463b      	mov	r3, r7
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2200      	movs	r2, #0
 80053c2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80053c4:	463b      	mov	r3, r7
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	785b      	ldrb	r3, [r3, #1]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d16f      	bne.n	80054ae <USB_EPStartXfer+0x1072>
 80053ce:	1d3b      	adds	r3, r7, #4
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053d6:	1d3b      	adds	r3, r7, #4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053de:	b29b      	uxth	r3, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80053e6:	4413      	add	r3, r2
 80053e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053ec:	463b      	mov	r3, r7
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	011a      	lsls	r2, r3, #4
 80053f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80053f8:	4413      	add	r3, r2
 80053fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005402:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005406:	2b00      	cmp	r3, #0
 8005408:	d116      	bne.n	8005438 <USB_EPStartXfer+0xffc>
 800540a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	b29b      	uxth	r3, r3
 8005412:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005416:	b29a      	uxth	r2, r3
 8005418:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800541c:	801a      	strh	r2, [r3, #0]
 800541e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	b29b      	uxth	r3, r3
 8005426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542e:	b29a      	uxth	r2, r3
 8005430:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005434:	801a      	strh	r2, [r3, #0]
 8005436:	e05f      	b.n	80054f8 <USB_EPStartXfer+0x10bc>
 8005438:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800543c:	2b3e      	cmp	r3, #62	; 0x3e
 800543e:	d818      	bhi.n	8005472 <USB_EPStartXfer+0x1036>
 8005440:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005444:	085b      	lsrs	r3, r3, #1
 8005446:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800544a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d004      	beq.n	8005460 <USB_EPStartXfer+0x1024>
 8005456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800545a:	3301      	adds	r3, #1
 800545c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005464:	b29b      	uxth	r3, r3
 8005466:	029b      	lsls	r3, r3, #10
 8005468:	b29a      	uxth	r2, r3
 800546a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800546e:	801a      	strh	r2, [r3, #0]
 8005470:	e042      	b.n	80054f8 <USB_EPStartXfer+0x10bc>
 8005472:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800547c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	2b00      	cmp	r3, #0
 8005486:	d104      	bne.n	8005492 <USB_EPStartXfer+0x1056>
 8005488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800548c:	3b01      	subs	r3, #1
 800548e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005496:	b29b      	uxth	r3, r3
 8005498:	029b      	lsls	r3, r3, #10
 800549a:	b29b      	uxth	r3, r3
 800549c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	e024      	b.n	80054f8 <USB_EPStartXfer+0x10bc>
 80054ae:	463b      	mov	r3, r7
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	785b      	ldrb	r3, [r3, #1]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d11f      	bne.n	80054f8 <USB_EPStartXfer+0x10bc>
 80054b8:	1d3b      	adds	r3, r7, #4
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054c0:	1d3b      	adds	r3, r7, #4
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	461a      	mov	r2, r3
 80054cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054d0:	4413      	add	r3, r2
 80054d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054d6:	463b      	mov	r3, r7
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	011a      	lsls	r2, r3, #4
 80054de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054e2:	4413      	add	r3, r2
 80054e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80054ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	1d3b      	adds	r3, r7, #4
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005500:	463b      	mov	r3, r7
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	785b      	ldrb	r3, [r3, #1]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d16f      	bne.n	80055ea <USB_EPStartXfer+0x11ae>
 800550a:	1d3b      	adds	r3, r7, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005512:	1d3b      	adds	r3, r7, #4
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800551a:	b29b      	uxth	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005522:	4413      	add	r3, r2
 8005524:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005528:	463b      	mov	r3, r7
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	011a      	lsls	r2, r3, #4
 8005530:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005534:	4413      	add	r3, r2
 8005536:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800553a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800553e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005542:	2b00      	cmp	r3, #0
 8005544:	d116      	bne.n	8005574 <USB_EPStartXfer+0x1138>
 8005546:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b29b      	uxth	r3, r3
 800554e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005552:	b29a      	uxth	r2, r3
 8005554:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005558:	801a      	strh	r2, [r3, #0]
 800555a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29b      	uxth	r3, r3
 8005562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800556a:	b29a      	uxth	r2, r3
 800556c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	e05e      	b.n	8005632 <USB_EPStartXfer+0x11f6>
 8005574:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005578:	2b3e      	cmp	r3, #62	; 0x3e
 800557a:	d818      	bhi.n	80055ae <USB_EPStartXfer+0x1172>
 800557c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005580:	085b      	lsrs	r3, r3, #1
 8005582:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005586:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d004      	beq.n	800559c <USB_EPStartXfer+0x1160>
 8005592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005596:	3301      	adds	r3, #1
 8005598:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800559c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	029b      	lsls	r3, r3, #10
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	e041      	b.n	8005632 <USB_EPStartXfer+0x11f6>
 80055ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055b2:	095b      	lsrs	r3, r3, #5
 80055b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80055b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055bc:	f003 031f 	and.w	r3, r3, #31
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d104      	bne.n	80055ce <USB_EPStartXfer+0x1192>
 80055c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055c8:	3b01      	subs	r3, #1
 80055ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80055ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	029b      	lsls	r3, r3, #10
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055e6:	801a      	strh	r2, [r3, #0]
 80055e8:	e023      	b.n	8005632 <USB_EPStartXfer+0x11f6>
 80055ea:	463b      	mov	r3, r7
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d11e      	bne.n	8005632 <USB_EPStartXfer+0x11f6>
 80055f4:	1d3b      	adds	r3, r7, #4
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005604:	4413      	add	r3, r2
 8005606:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800560a:	463b      	mov	r3, r7
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	011a      	lsls	r2, r3, #4
 8005612:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005616:	4413      	add	r3, r2
 8005618:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800561c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005620:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005624:	b29a      	uxth	r2, r3
 8005626:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800562a:	801a      	strh	r2, [r3, #0]
 800562c:	e001      	b.n	8005632 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e02e      	b.n	8005690 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005632:	1d3b      	adds	r3, r7, #4
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	463b      	mov	r3, r7
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	b29b      	uxth	r3, r3
 8005644:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005650:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005654:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005658:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800565c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005660:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005664:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005668:	1d3b      	adds	r3, r7, #4
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	463b      	mov	r3, r7
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	441a      	add	r2, r3
 8005676:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800567a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800567e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800568a:	b29b      	uxth	r3, r3
 800568c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800569a:	b480      	push	{r7}
 800569c:	b085      	sub	sp, #20
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	785b      	ldrb	r3, [r3, #1]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d020      	beq.n	80056ee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c2:	81bb      	strh	r3, [r7, #12]
 80056c4:	89bb      	ldrh	r3, [r7, #12]
 80056c6:	f083 0310 	eor.w	r3, r3, #16
 80056ca:	81bb      	strh	r3, [r7, #12]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	441a      	add	r2, r3
 80056d6:	89bb      	ldrh	r3, [r7, #12]
 80056d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	8013      	strh	r3, [r2, #0]
 80056ec:	e01f      	b.n	800572e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005704:	81fb      	strh	r3, [r7, #14]
 8005706:	89fb      	ldrh	r3, [r7, #14]
 8005708:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800570c:	81fb      	strh	r3, [r7, #14]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	441a      	add	r2, r3
 8005718:	89fb      	ldrh	r3, [r7, #14]
 800571a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800571e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800572a:	b29b      	uxth	r3, r3
 800572c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr

0800573a <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800573a:	b480      	push	{r7}
 800573c:	b087      	sub	sp, #28
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	7b1b      	ldrb	r3, [r3, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	f040 809d 	bne.w	8005888 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d04c      	beq.n	80057f0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	823b      	strh	r3, [r7, #16]
 8005764:	8a3b      	ldrh	r3, [r7, #16]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01b      	beq.n	80057a6 <USB_EPClearStall+0x6c>
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29b      	uxth	r3, r3
 800577c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005784:	81fb      	strh	r3, [r7, #14]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	441a      	add	r2, r3
 8005790:	89fb      	ldrh	r3, [r7, #14]
 8005792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800579a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800579e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	78db      	ldrb	r3, [r3, #3]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d06c      	beq.n	8005888 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c4:	81bb      	strh	r3, [r7, #12]
 80057c6:	89bb      	ldrh	r3, [r7, #12]
 80057c8:	f083 0320 	eor.w	r3, r3, #32
 80057cc:	81bb      	strh	r3, [r7, #12]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	441a      	add	r2, r3
 80057d8:	89bb      	ldrh	r3, [r7, #12]
 80057da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	8013      	strh	r3, [r2, #0]
 80057ee:	e04b      	b.n	8005888 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	82fb      	strh	r3, [r7, #22]
 80057fe:	8afb      	ldrh	r3, [r7, #22]
 8005800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01b      	beq.n	8005840 <USB_EPClearStall+0x106>
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	82bb      	strh	r3, [r7, #20]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	441a      	add	r2, r3
 800582a:	8abb      	ldrh	r3, [r7, #20]
 800582c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583c:	b29b      	uxth	r3, r3
 800583e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29b      	uxth	r3, r3
 800584e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005856:	827b      	strh	r3, [r7, #18]
 8005858:	8a7b      	ldrh	r3, [r7, #18]
 800585a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800585e:	827b      	strh	r3, [r7, #18]
 8005860:	8a7b      	ldrh	r3, [r7, #18]
 8005862:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005866:	827b      	strh	r3, [r7, #18]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	441a      	add	r2, r3
 8005872:	8a7b      	ldrh	r3, [r7, #18]
 8005874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800587c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005884:	b29b      	uxth	r3, r3
 8005886:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr

08005894 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80058a0:	78fb      	ldrb	r3, [r7, #3]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2280      	movs	r2, #128	; 0x80
 80058aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bc80      	pop	{r7}
 80058b8:	4770      	bx	lr

080058ba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc80      	pop	{r7}
 80058cc:	4770      	bx	lr

080058ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	bc80      	pop	{r7}
 80058e0:	4770      	bx	lr

080058e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b085      	sub	sp, #20
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80058f4:	68fb      	ldr	r3, [r7, #12]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr

08005900 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr

08005916 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005916:	b480      	push	{r7}
 8005918:	b08d      	sub	sp, #52	; 0x34
 800591a:	af00      	add	r7, sp, #0
 800591c:	60f8      	str	r0, [r7, #12]
 800591e:	60b9      	str	r1, [r7, #8]
 8005920:	4611      	mov	r1, r2
 8005922:	461a      	mov	r2, r3
 8005924:	460b      	mov	r3, r1
 8005926:	80fb      	strh	r3, [r7, #6]
 8005928:	4613      	mov	r3, r2
 800592a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800592c:	88bb      	ldrh	r3, [r7, #4]
 800592e:	3301      	adds	r3, #1
 8005930:	085b      	lsrs	r3, r3, #1
 8005932:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800593c:	88fb      	ldrh	r3, [r7, #6]
 800593e:	005a      	lsls	r2, r3, #1
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005948:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800594e:	e01e      	b.n	800598e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	3301      	adds	r3, #1
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	b29b      	uxth	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	b29a      	uxth	r2, r3
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005978:	3302      	adds	r3, #2
 800597a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	3302      	adds	r3, #2
 8005980:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	3301      	adds	r3, #1
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598a:	3b01      	subs	r3, #1
 800598c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1dd      	bne.n	8005950 <USB_WritePMA+0x3a>
  }
}
 8005994:	bf00      	nop
 8005996:	3734      	adds	r7, #52	; 0x34
 8005998:	46bd      	mov	sp, r7
 800599a:	bc80      	pop	{r7}
 800599c:	4770      	bx	lr

0800599e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800599e:	b480      	push	{r7}
 80059a0:	b08b      	sub	sp, #44	; 0x2c
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	4611      	mov	r1, r2
 80059aa:	461a      	mov	r2, r3
 80059ac:	460b      	mov	r3, r1
 80059ae:	80fb      	strh	r3, [r7, #6]
 80059b0:	4613      	mov	r3, r2
 80059b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80059b4:	88bb      	ldrh	r3, [r7, #4]
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80059c4:	88fb      	ldrh	r3, [r7, #6]
 80059c6:	005a      	lsls	r2, r3, #1
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059d0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	627b      	str	r3, [r7, #36]	; 0x24
 80059d6:	e01b      	b.n	8005a10 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	3302      	adds	r3, #2
 80059e4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	3301      	adds	r3, #1
 80059f2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	0a1b      	lsrs	r3, r3, #8
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	3301      	adds	r3, #1
 8005a02:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	3302      	adds	r3, #2
 8005a08:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e0      	bne.n	80059d8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005a16:	88bb      	ldrh	r3, [r7, #4]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d007      	beq.n	8005a32 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	701a      	strb	r2, [r3, #0]
  }
}
 8005a32:	bf00      	nop
 8005a34:	372c      	adds	r7, #44	; 0x2c
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr

08005a3c <__NVIC_SystemReset>:
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005a40:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <__NVIC_SystemReset+0x20>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005a4c:	4903      	ldr	r1, [pc, #12]	; (8005a5c <__NVIC_SystemReset+0x20>)
 8005a4e:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <__NVIC_SystemReset+0x24>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60cb      	str	r3, [r1, #12]
 8005a54:	f3bf 8f4f 	dsb	sy
    __NOP();
 8005a58:	bf00      	nop
 8005a5a:	e7fd      	b.n	8005a58 <__NVIC_SystemReset+0x1c>
 8005a5c:	e000ed00 	.word	0xe000ed00
 8005a60:	05fa0004 	.word	0x05fa0004

08005a64 <USBD_DFU_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;

 /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof (USBD_DFU_HandleTypeDef));
 8005a70:	f240 401c 	movw	r0, #1052	; 0x41c
 8005a74:	f002 fa9c 	bl	8007fb0 <USBD_static_malloc>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <USBD_DFU_Init+0x2a>
  {
    return USBD_FAIL;
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e03e      	b.n	8005b0c <USBD_DFU_Init+0xa8>
  }
  else
  {
    hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005a94:	60fb      	str	r3, [r7, #12]

    hdfu->alt_setting = 0U;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4a1c      	ldr	r2, [pc, #112]	; (8005b14 <USBD_DFU_Init+0xb0>)
 8005aa2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wblock_num = 0U;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

    hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->dev_state = DFU_STATE_IDLE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    /* Initialize Hardware layer */
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4798      	blx	r3
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <USBD_DFU_Init+0xa6>
    {
      return USBD_FAIL;
 8005b06:	2302      	movs	r3, #2
 8005b08:	e000      	b.n	8005b0c <USBD_DFU_Init+0xa8>
    }
  }
  return USBD_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	08009000 	.word	0x08009000

08005b18 <USBD_DFU_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;
  hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005b2a:	60fb      	str	r3, [r7, #12]

  hdfu->wblock_num = 0U;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00e      	beq.n	8005b7c <USBD_DFU_DeInit+0x64>
  {
    /* De-Initialize Hardware layer */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f002 fa2a 	bl	8007fc8 <USBD_static_free>
    pdev->pClassData = NULL;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return USBD_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <USBD_DFU_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_DFU_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;
  uint8_t *pbuf = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	617b      	str	r3, [r7, #20]
  uint16_t len = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	827b      	strh	r3, [r7, #18]
  uint16_t status_info = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	817b      	strh	r3, [r7, #10]
  uint8_t ret = USBD_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	747b      	strb	r3, [r7, #17]

  hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ba8:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d03f      	beq.n	8005c36 <USBD_DFU_Setup+0xae>
 8005bb6:	2b20      	cmp	r3, #32
 8005bb8:	f040 80c2 	bne.w	8005d40 <USBD_DFU_Setup+0x1b8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	785b      	ldrb	r3, [r3, #1]
 8005bc0:	2b06      	cmp	r3, #6
 8005bc2:	d830      	bhi.n	8005c26 <USBD_DFU_Setup+0x9e>
 8005bc4:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <USBD_DFU_Setup+0x44>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005c1d 	.word	0x08005c1d
 8005bd0:	08005be9 	.word	0x08005be9
 8005bd4:	08005bf3 	.word	0x08005bf3
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005c05 	.word	0x08005c05
 8005be0:	08005c0d 	.word	0x08005c0d
 8005be4:	08005c15 	.word	0x08005c15
    {
    case DFU_DNLOAD:
      DFU_Download(pdev, req);
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fa90 	bl	8006110 <DFU_Download>
      break;
 8005bf0:	e020      	b.n	8005c34 <USBD_DFU_Setup+0xac>

    case DFU_UPLOAD:
      DFU_Upload(pdev, req);
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 faf5 	bl	80061e4 <DFU_Upload>
      break;
 8005bfa:	e01b      	b.n	8005c34 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATUS:
      DFU_GetStatus(pdev);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fbcd 	bl	800639c <DFU_GetStatus>
      break;
 8005c02:	e017      	b.n	8005c34 <USBD_DFU_Setup+0xac>

    case DFU_CLRSTATUS:
      DFU_ClearStatus(pdev);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fc7b 	bl	8006500 <DFU_ClearStatus>
      break;
 8005c0a:	e013      	b.n	8005c34 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATE:
      DFU_GetState(pdev);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fcc6 	bl	800659e <DFU_GetState>
      break;
 8005c12:	e00f      	b.n	8005c34 <USBD_DFU_Setup+0xac>

    case DFU_ABORT:
      DFU_Abort(pdev);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fcd6 	bl	80065c6 <DFU_Abort>
      break;
 8005c1a:	e00b      	b.n	8005c34 <USBD_DFU_Setup+0xac>

    case DFU_DETACH:
      DFU_Detach(pdev, req);
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fa16 	bl	8006050 <DFU_Detach>
      break;
 8005c24:	e006      	b.n	8005c34 <USBD_DFU_Setup+0xac>

    default:
      USBD_CtlError (pdev, req);
 8005c26:	6839      	ldr	r1, [r7, #0]
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f001 fcaf 	bl	800758c <USBD_CtlError>
      ret = USBD_FAIL;
 8005c2e:	2302      	movs	r3, #2
 8005c30:	747b      	strb	r3, [r7, #17]
      break;
 8005c32:	bf00      	nop
    }
    break;
 8005c34:	e08b      	b.n	8005d4e <USBD_DFU_Setup+0x1c6>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	785b      	ldrb	r3, [r3, #1]
 8005c3a:	2b0b      	cmp	r3, #11
 8005c3c:	d878      	bhi.n	8005d30 <USBD_DFU_Setup+0x1a8>
 8005c3e:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <USBD_DFU_Setup+0xbc>)
 8005c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c44:	08005c75 	.word	0x08005c75
 8005c48:	08005d31 	.word	0x08005d31
 8005c4c:	08005d31 	.word	0x08005d31
 8005c50:	08005d31 	.word	0x08005d31
 8005c54:	08005d31 	.word	0x08005d31
 8005c58:	08005d31 	.word	0x08005d31
 8005c5c:	08005c9d 	.word	0x08005c9d
 8005c60:	08005d31 	.word	0x08005d31
 8005c64:	08005d31 	.word	0x08005d31
 8005c68:	08005d31 	.word	0x08005d31
 8005c6c:	08005cc7 	.word	0x08005cc7
 8005c70:	08005cf1 	.word	0x08005cf1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	d107      	bne.n	8005c8e <USBD_DFU_Setup+0x106>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8005c7e:	f107 030a 	add.w	r3, r7, #10
 8005c82:	2202      	movs	r2, #2
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f001 fcea 	bl	8007660 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005c8c:	e057      	b.n	8005d3e <USBD_DFU_Setup+0x1b6>
        USBD_CtlError (pdev, req);
 8005c8e:	6839      	ldr	r1, [r7, #0]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f001 fc7b 	bl	800758c <USBD_CtlError>
			  ret = USBD_FAIL;
 8005c96:	2302      	movs	r3, #2
 8005c98:	747b      	strb	r3, [r7, #17]
      break;
 8005c9a:	e050      	b.n	8005d3e <USBD_DFU_Setup+0x1b6>

    case USB_REQ_GET_DESCRIPTOR:
      if( (req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	885b      	ldrh	r3, [r3, #2]
 8005ca0:	0a1b      	lsrs	r3, r3, #8
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b21      	cmp	r3, #33	; 0x21
 8005ca6:	d107      	bne.n	8005cb8 <USBD_DFU_Setup+0x130>
      {
        pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8005ca8:	4b2b      	ldr	r3, [pc, #172]	; (8005d58 <USBD_DFU_Setup+0x1d0>)
 8005caa:	617b      	str	r3, [r7, #20]
        len = MIN(USB_DFU_DESC_SIZ , req->wLength);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	88db      	ldrh	r3, [r3, #6]
 8005cb0:	2b09      	cmp	r3, #9
 8005cb2:	bf28      	it	cs
 8005cb4:	2309      	movcs	r3, #9
 8005cb6:	827b      	strh	r3, [r7, #18]
      }

      USBD_CtlSendData (pdev, pbuf, len);
 8005cb8:	8a7b      	ldrh	r3, [r7, #18]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	6979      	ldr	r1, [r7, #20]
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f001 fcce 	bl	8007660 <USBD_CtlSendData>
      break;
 8005cc4:	e03b      	b.n	8005d3e <USBD_DFU_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d108      	bne.n	8005ce2 <USBD_DFU_Setup+0x15a>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 fcc0 	bl	8007660 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005ce0:	e02d      	b.n	8005d3e <USBD_DFU_Setup+0x1b6>
        USBD_CtlError (pdev, req);
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 fc51 	bl	800758c <USBD_CtlError>
			  ret = USBD_FAIL;
 8005cea:	2302      	movs	r3, #2
 8005cec:	747b      	strb	r3, [r7, #17]
      break;
 8005cee:	e026      	b.n	8005d3e <USBD_DFU_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	885b      	ldrh	r3, [r3, #2]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d113      	bne.n	8005d22 <USBD_DFU_Setup+0x19a>
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d107      	bne.n	8005d14 <USBD_DFU_Setup+0x18c>
        {
          hdfu->alt_setting = (uint8_t)(req->wValue);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	885b      	ldrh	r3, [r3, #2]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005d12:	e014      	b.n	8005d3e <USBD_DFU_Setup+0x1b6>
          USBD_CtlError (pdev, req);
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f001 fc38 	bl	800758c <USBD_CtlError>
          ret = USBD_FAIL;
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	747b      	strb	r3, [r7, #17]
      break;
 8005d20:	e00d      	b.n	8005d3e <USBD_DFU_Setup+0x1b6>
        USBD_CtlError (pdev, req);
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f001 fc31 	bl	800758c <USBD_CtlError>
        ret = USBD_FAIL;
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	747b      	strb	r3, [r7, #17]
      break;
 8005d2e:	e006      	b.n	8005d3e <USBD_DFU_Setup+0x1b6>

    default:
      USBD_CtlError (pdev, req);
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f001 fc2a 	bl	800758c <USBD_CtlError>
      ret = USBD_FAIL;
 8005d38:	2302      	movs	r3, #2
 8005d3a:	747b      	strb	r3, [r7, #17]
      break;
 8005d3c:	bf00      	nop
    }
    break;
 8005d3e:	e006      	b.n	8005d4e <USBD_DFU_Setup+0x1c6>

  default:
    USBD_CtlError (pdev, req);
 8005d40:	6839      	ldr	r1, [r7, #0]
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f001 fc22 	bl	800758c <USBD_CtlError>
    ret = USBD_FAIL;
 8005d48:	2302      	movs	r3, #2
 8005d4a:	747b      	strb	r3, [r7, #17]
    break;
 8005d4c:	bf00      	nop
  }

  return ret;
 8005d4e:	7c7b      	ldrb	r3, [r7, #17]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	2000005a 	.word	0x2000005a

08005d5c <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc (uint16_t *length)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_DFU_CfgDesc);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	221b      	movs	r2, #27
 8005d68:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_CfgDesc;
 8005d6a:	4b03      	ldr	r3, [pc, #12]	; (8005d78 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bc80      	pop	{r7}
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	20000048 	.word	0x20000048

08005d7c <USBD_DFU_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr

08005d94 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bc80      	pop	{r7}
 8005da6:	4770      	bx	lr

08005da8 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 uint32_t addr;
 USBD_SetupReqTypedef     req;
 USBD_DFU_HandleTypeDef   *hdfu;

 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005db6:	617b      	str	r3, [r7, #20]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	f040 80cb 	bne.w	8005f5a <USBD_DFU_EP0_TxReady+0x1b2>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f040 8086 	bne.w	8005edc <USBD_DFU_EP0_TxReady+0x134>
    {
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d105      	bne.n	8005de4 <USBD_DFU_EP0_TxReady+0x3c>
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	f000 809b 	beq.w	8005f1a <USBD_DFU_EP0_TxReady+0x172>
      {

      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b21      	cmp	r3, #33	; 0x21
 8005dea:	d129      	bne.n	8005e40 <USBD_DFU_EP0_TxReady+0x98>
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005df2:	2b05      	cmp	r3, #5
 8005df4:	d124      	bne.n	8005e40 <USBD_DFU_EP0_TxReady+0x98>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	789b      	ldrb	r3, [r3, #2]
 8005e0c:	021b      	lsls	r3, r3, #8
 8005e0e:	441a      	add	r2, r3
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	78db      	ldrb	r3, [r3, #3]
 8005e20:	041b      	lsls	r3, r3, #16
 8005e22:	441a      	add	r2, r3
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	791b      	ldrb	r3, [r3, #4]
 8005e34:	061b      	lsls	r3, r3, #24
 8005e36:	441a      	add	r2, r3
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8005e3e:	e06c      	b.n	8005f1a <USBD_DFU_EP0_TxReady+0x172>
      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b41      	cmp	r3, #65	; 0x41
 8005e46:	d136      	bne.n	8005eb6 <USBD_DFU_EP0_TxReady+0x10e>
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e4e:	2b05      	cmp	r3, #5
 8005e50:	d131      	bne.n	8005eb6 <USBD_DFU_EP0_TxReady+0x10e>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	461a      	mov	r2, r3
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	789b      	ldrb	r3, [r3, #2]
 8005e68:	021b      	lsls	r3, r3, #8
 8005e6a:	441a      	add	r2, r3
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	78db      	ldrb	r3, [r3, #3]
 8005e7c:	041b      	lsls	r3, r3, #16
 8005e7e:	441a      	add	r2, r3
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	791b      	ldrb	r3, [r3, #4]
 8005e90:	061b      	lsls	r3, r3, #24
 8005e92:	441a      	add	r2, r3
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	4798      	blx	r3
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d033      	beq.n	8005f1a <USBD_DFU_EP0_TxReady+0x172>
        {
          return USBD_FAIL;
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	e05a      	b.n	8005f6c <USBD_DFU_EP0_TxReady+0x1c4>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError (pdev, &req);
 8005ece:	f107 0308 	add.w	r3, r7, #8
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f001 fb59 	bl	800758c <USBD_CtlError>
 8005eda:	e01e      	b.n	8005f1a <USBD_DFU_EP0_TxReady+0x172>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d919      	bls.n	8005f1a <USBD_DFU_EP0_TxReady+0x172>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005eec:	4b21      	ldr	r3, [pc, #132]	; (8005f74 <USBD_DFU_EP0_TxReady+0x1cc>)
 8005eee:	4413      	add	r3, r2
 8005ef0:	029a      	lsls	r2, r3, #10
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005ef8:	4413      	add	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]

        /* Preform the write operation */
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	6978      	ldr	r0, [r7, #20]
 8005f06:	6939      	ldr	r1, [r7, #16]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8005f0e:	4798      	blx	r3
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <USBD_DFU_EP0_TxReady+0x172>
                                     (uint8_t *)addr, hdfu->wlength) != USBD_OK)
        {
          return USBD_FAIL;
 8005f16:	2302      	movs	r3, #2
 8005f18:	e028      	b.n	8005f6c <USBD_DFU_EP0_TxReady+0x1c4>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return USBD_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	e008      	b.n	8005f6c <USBD_DFU_EP0_TxReady+0x1c4>
  }
  else
  {
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005f60:	2b07      	cmp	r3, #7
 8005f62:	d102      	bne.n	8005f6a <USBD_DFU_EP0_TxReady+0x1c2>
    {
      /* Start leaving DFU mode */
      DFU_Leave(pdev);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fb7b 	bl	8006660 <DFU_Leave>
    }
  }

  return USBD_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	003ffffe 	.word	0x003ffffe

08005f78 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_SOF (USBD_HandleTypeDef *pdev)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr

08005f8c <USBD_DFU_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr

08005fa4 <USBD_DFU_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bc80      	pop	{r7}
 8005fba:	4770      	bx	lr

08005fbc <USBD_DFU_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr

08005fd4 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc (uint16_t *length)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_DFU_DeviceQualifierDesc);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	220a      	movs	r2, #10
 8005fe0:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceQualifierDesc;
 8005fe2:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bc80      	pop	{r7}
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20000064 	.word	0x20000064

08005ff4 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING == 1U)
static uint8_t* USBD_DFU_GetUsrStringDesc (USBD_HandleTypeDef *pdev, uint8_t index , uint16_t *length)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8006002:	7afb      	ldrb	r3, [r7, #11]
 8006004:	2b06      	cmp	r3, #6
 8006006:	d80a      	bhi.n	800601e <USBD_DFU_GetUsrStringDesc+0x2a>
  {
    USBD_GetString ((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	4905      	ldr	r1, [pc, #20]	; (8006028 <USBD_DFU_GetUsrStringDesc+0x34>)
 8006014:	4618      	mov	r0, r3
 8006016:	f001 faca 	bl	80075ae <USBD_GetString>
    return USBD_StrDesc;
 800601a:	4b03      	ldr	r3, [pc, #12]	; (8006028 <USBD_DFU_GetUsrStringDesc+0x34>)
 800601c:	e000      	b.n	8006020 <USBD_DFU_GetUsrStringDesc+0x2c>
  }
  /* Not supported Interface Descriptor index */
  else
  {
    return NULL;
 800601e:	2300      	movs	r3, #0
  }
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	20000160 	.word	0x20000160

0800602c <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_DFU_RegisterMedia    (USBD_HandleTypeDef   *pdev,
                                    USBD_DFU_MediaTypeDef *fops)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <USBD_DFU_RegisterMedia+0x18>
  {
    pdev->pUserData= fops;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  }
  return 0U;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	bc80      	pop	{r7}
 800604e:	4770      	bx	lr

08006050 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
 USBD_DFU_HandleTypeDef   *hdfu;

 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006060:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006068:	2b02      	cmp	r3, #2
 800606a:	d013      	beq.n	8006094 <DFU_Detach+0x44>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006072:	2b03      	cmp	r3, #3
 8006074:	d00e      	beq.n	8006094 <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800607c:	2b05      	cmp	r3, #5
 800607e:	d009      	beq.n	8006094 <DFU_Detach+0x44>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006086:	2b06      	cmp	r3, #6
 8006088:	d004      	beq.n	8006094 <DFU_Detach+0x44>
        || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE )
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006090:	2b09      	cmp	r3, #9
 8006092:	d125      	bne.n	80060e0 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2202      	movs	r2, #2
 8006098:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 80060e0:	4b0a      	ldr	r3, [pc, #40]	; (800610c <DFU_Detach+0xbc>)
 80060e2:	7d5b      	ldrb	r3, [r3, #21]
 80060e4:	f003 0310 	and.w	r3, r3, #16
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d006      	beq.n	80060fa <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    USBD_Stop (pdev);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fb55 	bl	800679c <USBD_Stop>
    USBD_Start (pdev);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fb46 	bl	8006784 <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay ((uint32_t)req->wValue);
  }
}
 80060f8:	e004      	b.n	8006104 <DFU_Detach+0xb4>
    USBD_Delay ((uint32_t)req->wValue);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	885b      	ldrh	r3, [r3, #2]
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fa fc90 	bl	8000a24 <HAL_Delay>
}
 8006104:	bf00      	nop
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20000048 	.word	0x20000048

08006110 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
 USBD_DFU_HandleTypeDef   *hdfu;

 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006120:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	88db      	ldrh	r3, [r3, #6]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d02e      	beq.n	8006188 <DFU_Download+0x78>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006130:	2b02      	cmp	r3, #2
 8006132:	d004      	beq.n	800613e <DFU_Download+0x2e>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800613a:	2b05      	cmp	r3, #5
 800613c:	d11f      	bne.n	800617e <DFU_Download+0x6e>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	885b      	ldrh	r3, [r3, #2]
 8006142:	461a      	mov	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	88db      	ldrh	r3, [r3, #6]
 800614e:	461a      	mov	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2203      	movs	r2, #3
 800615a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      USBD_CtlPrepareRx (pdev, (uint8_t*)hdfu->buffer.d8,
 800616a:	68f9      	ldr	r1, [r7, #12]
                         (uint16_t)hdfu->wlength);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
      USBD_CtlPrepareRx (pdev, (uint8_t*)hdfu->buffer.d8,
 8006172:	b29b      	uxth	r3, r3
 8006174:	461a      	mov	r2, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f001 faa0 	bl	80076bc <USBD_CtlPrepareRx>
 800617c:	e02e      	b.n	80061dc <DFU_Download+0xcc>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError (pdev, req);
 800617e:	6839      	ldr	r1, [r7, #0]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f001 fa03 	bl	800758c <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError (pdev, req);
    }
  }
}
 8006186:	e029      	b.n	80061dc <DFU_Download+0xcc>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE )
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800618e:	2b05      	cmp	r3, #5
 8006190:	d004      	beq.n	800619c <DFU_Download+0x8c>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006198:	2b02      	cmp	r3, #2
 800619a:	d11a      	bne.n	80061d2 <DFU_Download+0xc2>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2206      	movs	r2, #6
 80061a8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80061d0:	e004      	b.n	80061dc <DFU_Download+0xcc>
      USBD_CtlError (pdev, req);
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f001 f9d9 	bl	800758c <USBD_CtlError>
}
 80061da:	e7ff      	b.n	80061dc <DFU_Download+0xcc>
 80061dc:	bf00      	nop
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
 USBD_DFU_HandleTypeDef   *hdfu;

 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80061f4:	617b      	str	r3, [r7, #20]

  uint8_t *phaddr = NULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	613b      	str	r3, [r7, #16]
  uint32_t addr = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	88db      	ldrh	r3, [r3, #6]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 80ac 	beq.w	8006360 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800620e:	2b02      	cmp	r3, #2
 8006210:	d005      	beq.n	800621e <DFU_Upload+0x3a>
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006218:	2b09      	cmp	r3, #9
 800621a:	f040 8094 	bne.w	8006346 <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	885b      	ldrh	r3, [r3, #2]
 8006222:	461a      	mov	r2, r3
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	88db      	ldrh	r3, [r3, #6]
 800622e:	461a      	mov	r2, r3
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800623c:	2b00      	cmp	r3, #0
 800623e:	d12c      	bne.n	800629a <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U)? DFU_STATE_IDLE:DFU_STATE_UPLOAD_IDLE;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006246:	2b03      	cmp	r3, #3
 8006248:	d901      	bls.n	800624e <DFU_Upload+0x6a>
 800624a:	2202      	movs	r2, #2
 800624c:	e000      	b.n	8006250 <DFU_Upload+0x6c>
 800624e:	2209      	movs	r2, #9
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2200      	movs	r2, #0
 800627e:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2221      	movs	r2, #33	; 0x21
 8006284:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2241      	movs	r2, #65	; 0x41
 800628a:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        USBD_CtlSendData (pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2203      	movs	r2, #3
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f001 f9e4 	bl	8007660 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8006298:	e079      	b.n	800638e <DFU_Upload+0x1aa>
      }
      else if (hdfu->wblock_num > 1U)
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d935      	bls.n	8006310 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2209      	movs	r2, #9
 80062a8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80062d6:	4b30      	ldr	r3, [pc, #192]	; (8006398 <DFU_Upload+0x1b4>)
 80062d8:	4413      	add	r3, r2
 80062da:	029a      	lsls	r2, r3, #10
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80062e2:	4413      	add	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	6979      	ldr	r1, [r7, #20]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80062f8:	4798      	blx	r3
 80062fa:	6138      	str	r0, [r7, #16]

        /* Send the status data over EP0 */
        USBD_CtlSendData (pdev, phaddr, (uint16_t)hdfu->wlength);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006302:	b29b      	uxth	r3, r3
 8006304:	461a      	mov	r2, r3
 8006306:	6939      	ldr	r1, [r7, #16]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 f9a9 	bl	8007660 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800630e:	e03e      	b.n	800638e <DFU_Upload+0x1aa>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	220f      	movs	r2, #15
 8006314:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 f924 	bl	800758c <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8006344:	e023      	b.n	800638e <DFU_Upload+0x1aa>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2200      	movs	r2, #0
 800634a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2200      	movs	r2, #0
 8006352:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      /* Call the error management function (command will be nacked */
      USBD_CtlError (pdev, req);
 8006356:	6839      	ldr	r1, [r7, #0]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 f917 	bl	800758c <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 800635e:	e016      	b.n	800638e <DFU_Upload+0x1aa>
    hdfu->dev_state = DFU_STATE_IDLE;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 800638c:	e7ff      	b.n	800638e <DFU_Upload+0x1aa>
 800638e:	bf00      	nop
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	003ffffe 	.word	0x003ffffe

0800639c <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 USBD_DFU_HandleTypeDef   *hdfu;

 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063aa:	60fb      	str	r3, [r7, #12]

  switch (hdfu->dev_state)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d002      	beq.n	80063bc <DFU_GetStatus+0x20>
 80063b6:	2b06      	cmp	r3, #6
 80063b8:	d055      	beq.n	8006466 <DFU_GetStatus+0xca>
      }
    }
    break;

  default :
    break;
 80063ba:	e092      	b.n	80064e2 <DFU_GetStatus+0x146>
    if (hdfu->wlength != 0U)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d038      	beq.n	8006438 <DFU_GetStatus+0x9c>
      hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2204      	movs	r2, #4
 80063ca:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d110      	bne.n	800641e <DFU_GetStatus+0x82>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b41      	cmp	r3, #65	; 0x41
 8006402:	d10c      	bne.n	800641e <DFU_GetStatus+0x82>
        ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8006418:	2100      	movs	r1, #0
 800641a:	4798      	blx	r3
    break;
 800641c:	e061      	b.n	80064e2 <DFU_GetStatus+0x146>
        ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8006432:	2101      	movs	r1, #1
 8006434:	4798      	blx	r3
    break;
 8006436:	e054      	b.n	80064e2 <DFU_GetStatus+0x146>
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2205      	movs	r2, #5
 800643c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8006464:	e03d      	b.n	80064e2 <DFU_GetStatus+0x146>
    if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800646c:	2b01      	cmp	r3, #1
 800646e:	d116      	bne.n	800649e <DFU_GetStatus+0x102>
      hdfu->dev_state = DFU_STATE_MANIFEST;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2207      	movs	r2, #7
 8006474:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 800649c:	e020      	b.n	80064e0 <DFU_GetStatus+0x144>
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d11b      	bne.n	80064e0 <DFU_GetStatus+0x144>
         ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 80064a8:	4b14      	ldr	r3, [pc, #80]	; (80064fc <DFU_GetStatus+0x160>)
 80064aa:	7d1b      	ldrb	r3, [r3, #20]
 80064ac:	f003 0304 	and.w	r3, r3, #4
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d015      	beq.n	80064e0 <DFU_GetStatus+0x144>
        hdfu->dev_state = DFU_STATE_IDLE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 80064e0:	bf00      	nop
  }

  /* Send the status data over EP0 */
  USBD_CtlSendData (pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80064e8:	2206      	movs	r2, #6
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 f8b7 	bl	8007660 <USBD_CtlSendData>
}
 80064f2:	bf00      	nop
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000048 	.word	0x20000048

08006500 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 USBD_DFU_HandleTypeDef   *hdfu;

 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800650e:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006516:	2b0a      	cmp	r3, #10
 8006518:	d11e      	bne.n	8006558 <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2202      	movs	r2, #2
 800651e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
    hdfu->dev_status[5] = 0U;/*iString*/
  }
}
 8006556:	e01d      	b.n	8006594 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	220a      	movs	r2, #10
 800655c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	220e      	movs	r2, #14
 8006564:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 8006594:	bf00      	nop
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	bc80      	pop	{r7}
 800659c:	4770      	bx	lr

0800659e <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 USBD_DFU_HandleTypeDef   *hdfu;

 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80065ac:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  USBD_CtlSendData (pdev, &hdfu->dev_state, 1U);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80065b4:	2201      	movs	r2, #1
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f001 f851 	bl	8007660 <USBD_CtlSendData>
}
 80065be:	bf00      	nop
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b085      	sub	sp, #20
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 USBD_DFU_HandleTypeDef   *hdfu;

 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80065d4:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d013      	beq.n	8006608 <DFU_Abort+0x42>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d00e      	beq.n	8006608 <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80065f0:	2b05      	cmp	r3, #5
 80065f2:	d009      	beq.n	8006608 <DFU_Abort+0x42>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80065fa:	2b06      	cmp	r3, #6
 80065fc:	d004      	beq.n	8006608 <DFU_Abort+0x42>
        || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE )
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006604:	2b09      	cmp	r3, #9
 8006606:	d125      	bne.n	8006654 <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 8006654:	bf00      	nop
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	bc80      	pop	{r7}
 800665c:	4770      	bx	lr
	...

08006660 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 USBD_DFU_HandleTypeDef   *hdfu;

 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800666e:	60fb      	str	r3, [r7, #12]

 hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8006678:	4b1f      	ldr	r3, [pc, #124]	; (80066f8 <DFU_Leave+0x98>)
 800667a:	7d1b      	ldrb	r3, [r3, #20]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d016      	beq.n	80066b2 <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2206      	movs	r2, #6
 8006688:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 80066b0:	e01f      	b.n	80066f2 <DFU_Leave+0x92>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2208      	movs	r2, #8
 80066b6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    USBD_Stop (pdev);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f85c 	bl	800679c <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	4798      	blx	r3

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 80066ee:	f7ff f9a5 	bl	8005a3c <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20000048 	.word	0x20000048

080066fc <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	4613      	mov	r3, r2
 8006708:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006710:	2302      	movs	r3, #2
 8006712:	e01a      	b.n	800674a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	79fa      	ldrb	r2, [r7, #7]
 8006740:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f001 fac8 	bl	8007cd8 <USBD_LL_Init>

  return USBD_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006752:	b480      	push	{r7}
 8006754:	b085      	sub	sp, #20
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d006      	beq.n	8006774 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]
 8006772:	e001      	b.n	8006778 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006774:	2302      	movs	r3, #2
 8006776:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006778:	7bfb      	ldrb	r3, [r7, #15]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	bc80      	pop	{r7}
 8006782:	4770      	bx	lr

08006784 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 fae3 	bl	8007d58 <USBD_LL_Start>

  return USBD_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6852      	ldr	r2, [r2, #4]
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	4611      	mov	r1, r2
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f001 fae8 	bl	8007d8e <USBD_LL_Stop>

  return USBD_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bc80      	pop	{r7}
 80067da:	4770      	bx	lr

080067dc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80067e8:	2302      	movs	r3, #2
 80067ea:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00c      	beq.n	8006810 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	78fa      	ldrb	r2, [r7, #3]
 8006800:	4611      	mov	r1, r2
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	4798      	blx	r3
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	460b      	mov	r3, r1
 8006824:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	78fa      	ldrb	r2, [r7, #3]
 8006830:	4611      	mov	r1, r2
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	4798      	blx	r3
  return USBD_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fe5e 	bl	8007514 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006866:	461a      	mov	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006874:	f003 031f 	and.w	r3, r3, #31
 8006878:	2b01      	cmp	r3, #1
 800687a:	d00c      	beq.n	8006896 <USBD_LL_SetupStage+0x56>
 800687c:	2b01      	cmp	r3, #1
 800687e:	d302      	bcc.n	8006886 <USBD_LL_SetupStage+0x46>
 8006880:	2b02      	cmp	r3, #2
 8006882:	d010      	beq.n	80068a6 <USBD_LL_SetupStage+0x66>
 8006884:	e017      	b.n	80068b6 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f9c6 	bl	8006c20 <USBD_StdDevReq>
    break;
 8006894:	e01a      	b.n	80068cc <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800689c:	4619      	mov	r1, r3
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fa28 	bl	8006cf4 <USBD_StdItfReq>
    break;
 80068a4:	e012      	b.n	80068cc <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa66 	bl	8006d80 <USBD_StdEPReq>
    break;
 80068b4:	e00a      	b.n	80068cc <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80068bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 faa3 	bl	8007e10 <USBD_LL_StallEP>
    break;
 80068ca:	bf00      	nop
  }

  return USBD_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b086      	sub	sp, #24
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	460b      	mov	r3, r1
 80068e0:	607a      	str	r2, [r7, #4]
 80068e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80068e4:	7afb      	ldrb	r3, [r7, #11]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d14b      	bne.n	8006982 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80068f0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d134      	bne.n	8006966 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	429a      	cmp	r2, r3
 8006906:	d919      	bls.n	800693c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	1ad2      	subs	r2, r2, r3
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800691e:	429a      	cmp	r2, r3
 8006920:	d203      	bcs.n	800692a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006926:	b29b      	uxth	r3, r3
 8006928:	e002      	b.n	8006930 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800692e:	b29b      	uxth	r3, r3
 8006930:	461a      	mov	r2, r3
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 fedf 	bl	80076f8 <USBD_CtlContinueRx>
 800693a:	e038      	b.n	80069ae <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00a      	beq.n	800695e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800694e:	2b03      	cmp	r3, #3
 8006950:	d105      	bne.n	800695e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 fedc 	bl	800771c <USBD_CtlSendStatus>
 8006964:	e023      	b.n	80069ae <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800696c:	2b05      	cmp	r3, #5
 800696e:	d11e      	bne.n	80069ae <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006978:	2100      	movs	r1, #0
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f001 fa48 	bl	8007e10 <USBD_LL_StallEP>
 8006980:	e015      	b.n	80069ae <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00d      	beq.n	80069aa <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006994:	2b03      	cmp	r3, #3
 8006996:	d108      	bne.n	80069aa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	7afa      	ldrb	r2, [r7, #11]
 80069a2:	4611      	mov	r1, r2
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	4798      	blx	r3
 80069a8:	e001      	b.n	80069ae <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80069aa:	2302      	movs	r3, #2
 80069ac:	e000      	b.n	80069b0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	460b      	mov	r3, r1
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d17f      	bne.n	8006acc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3314      	adds	r3, #20
 80069d0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d15c      	bne.n	8006a96 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d915      	bls.n	8006a14 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	68da      	ldr	r2, [r3, #12]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	1ad2      	subs	r2, r2, r3
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 fe49 	bl	8007698 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006a06:	2300      	movs	r3, #0
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f001 faab 	bl	8007f68 <USBD_LL_PrepareReceive>
 8006a12:	e04e      	b.n	8006ab2 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	6912      	ldr	r2, [r2, #16]
 8006a1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a20:	fb02 f201 	mul.w	r2, r2, r1
 8006a24:	1a9b      	subs	r3, r3, r2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d11c      	bne.n	8006a64 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d316      	bcc.n	8006a64 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	689a      	ldr	r2, [r3, #8]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d20f      	bcs.n	8006a64 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a44:	2200      	movs	r2, #0
 8006a46:	2100      	movs	r1, #0
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 fe25 	bl	8007698 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006a56:	2300      	movs	r3, #0
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f001 fa83 	bl	8007f68 <USBD_LL_PrepareReceive>
 8006a62:	e026      	b.n	8006ab2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00a      	beq.n	8006a86 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d105      	bne.n	8006a86 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006a86:	2180      	movs	r1, #128	; 0x80
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f001 f9c1 	bl	8007e10 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 fe57 	bl	8007742 <USBD_CtlReceiveStatus>
 8006a94:	e00d      	b.n	8006ab2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d004      	beq.n	8006aaa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d103      	bne.n	8006ab2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006aaa:	2180      	movs	r1, #128	; 0x80
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f001 f9af 	bl	8007e10 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d11d      	bne.n	8006af8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f7ff fe83 	bl	80067c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006aca:	e015      	b.n	8006af8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00d      	beq.n	8006af4 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d108      	bne.n	8006af4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	7afa      	ldrb	r2, [r7, #11]
 8006aec:	4611      	mov	r1, r2
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	4798      	blx	r3
 8006af2:	e001      	b.n	8006af8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006af4:	2302      	movs	r3, #2
 8006af6:	e000      	b.n	8006afa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b0a:	2340      	movs	r3, #64	; 0x40
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2100      	movs	r1, #0
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f001 f957 	bl	8007dc4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2240      	movs	r2, #64	; 0x40
 8006b22:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b26:	2340      	movs	r3, #64	; 0x40
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2180      	movs	r1, #128	; 0x80
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 f949 	bl	8007dc4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2240      	movs	r2, #64	; 0x40
 8006b3c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d009      	beq.n	8006b7a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6852      	ldr	r2, [r2, #4]
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	4611      	mov	r1, r2
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	4798      	blx	r3
  }

  return USBD_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	78fa      	ldrb	r2, [r7, #3]
 8006b94:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr

08006ba2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2204      	movs	r2, #4
 8006bba:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr

08006bca <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bc80      	pop	{r7}
 8006be8:	4770      	bx	lr

08006bea <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b082      	sub	sp, #8
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d10b      	bne.n	8006c14 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d005      	beq.n	8006c14 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c36:	2b20      	cmp	r3, #32
 8006c38:	d004      	beq.n	8006c44 <USBD_StdDevReq+0x24>
 8006c3a:	2b40      	cmp	r3, #64	; 0x40
 8006c3c:	d002      	beq.n	8006c44 <USBD_StdDevReq+0x24>
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d008      	beq.n	8006c54 <USBD_StdDevReq+0x34>
 8006c42:	e04c      	b.n	8006cde <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	4798      	blx	r3
    break;
 8006c52:	e049      	b.n	8006ce8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	785b      	ldrb	r3, [r3, #1]
 8006c58:	2b09      	cmp	r3, #9
 8006c5a:	d83a      	bhi.n	8006cd2 <USBD_StdDevReq+0xb2>
 8006c5c:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <USBD_StdDevReq+0x44>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006cb5 	.word	0x08006cb5
 8006c68:	08006cc9 	.word	0x08006cc9
 8006c6c:	08006cd3 	.word	0x08006cd3
 8006c70:	08006cbf 	.word	0x08006cbf
 8006c74:	08006cd3 	.word	0x08006cd3
 8006c78:	08006c97 	.word	0x08006c97
 8006c7c:	08006c8d 	.word	0x08006c8d
 8006c80:	08006cd3 	.word	0x08006cd3
 8006c84:	08006cab 	.word	0x08006cab
 8006c88:	08006ca1 	.word	0x08006ca1
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f9d2 	bl	8007038 <USBD_GetDescriptor>
      break;
 8006c94:	e022      	b.n	8006cdc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006c96:	6839      	ldr	r1, [r7, #0]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 facf 	bl	800723c <USBD_SetAddress>
      break;
 8006c9e:	e01d      	b.n	8006cdc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fb0c 	bl	80072c0 <USBD_SetConfig>
      break;
 8006ca8:	e018      	b.n	8006cdc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fb95 	bl	80073dc <USBD_GetConfig>
      break;
 8006cb2:	e013      	b.n	8006cdc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fbc4 	bl	8007444 <USBD_GetStatus>
      break;
 8006cbc:	e00e      	b.n	8006cdc <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fbf2 	bl	80074aa <USBD_SetFeature>
      break;
 8006cc6:	e009      	b.n	8006cdc <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fc01 	bl	80074d2 <USBD_ClrFeature>
      break;
 8006cd0:	e004      	b.n	8006cdc <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fc59 	bl	800758c <USBD_CtlError>
      break;
 8006cda:	bf00      	nop
    }
    break;
 8006cdc:	e004      	b.n	8006ce8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fc53 	bl	800758c <USBD_CtlError>
    break;
 8006ce6:	bf00      	nop
  }

  return ret;
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop

08006cf4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	d003      	beq.n	8006d16 <USBD_StdItfReq+0x22>
 8006d0e:	2b40      	cmp	r3, #64	; 0x40
 8006d10:	d001      	beq.n	8006d16 <USBD_StdItfReq+0x22>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d12a      	bne.n	8006d6c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d81d      	bhi.n	8006d5e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	889b      	ldrh	r3, [r3, #4]
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d813      	bhi.n	8006d54 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	88db      	ldrh	r3, [r3, #6]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d110      	bne.n	8006d68 <USBD_StdItfReq+0x74>
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10d      	bne.n	8006d68 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fce5 	bl	800771c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006d52:	e009      	b.n	8006d68 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fc18 	bl	800758c <USBD_CtlError>
      break;
 8006d5c:	e004      	b.n	8006d68 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fc13 	bl	800758c <USBD_CtlError>
      break;
 8006d66:	e000      	b.n	8006d6a <USBD_StdItfReq+0x76>
      break;
 8006d68:	bf00      	nop
    }
    break;
 8006d6a:	e004      	b.n	8006d76 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fc0c 	bl	800758c <USBD_CtlError>
    break;
 8006d74:	bf00      	nop
  }

  return USBD_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	889b      	ldrh	r3, [r3, #4]
 8006d92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d9c:	2b20      	cmp	r3, #32
 8006d9e:	d004      	beq.n	8006daa <USBD_StdEPReq+0x2a>
 8006da0:	2b40      	cmp	r3, #64	; 0x40
 8006da2:	d002      	beq.n	8006daa <USBD_StdEPReq+0x2a>
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d008      	beq.n	8006dba <USBD_StdEPReq+0x3a>
 8006da8:	e13b      	b.n	8007022 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	4798      	blx	r3
    break;
 8006db8:	e138      	b.n	800702c <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	d10a      	bne.n	8006ddc <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	6839      	ldr	r1, [r7, #0]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	4798      	blx	r3
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	73fb      	strb	r3, [r7, #15]

      return ret;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	e128      	b.n	800702e <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d03e      	beq.n	8006e62 <USBD_StdEPReq+0xe2>
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d002      	beq.n	8006dee <USBD_StdEPReq+0x6e>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d070      	beq.n	8006ece <USBD_StdEPReq+0x14e>
 8006dec:	e113      	b.n	8007016 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d002      	beq.n	8006dfe <USBD_StdEPReq+0x7e>
 8006df8:	2b03      	cmp	r3, #3
 8006dfa:	d015      	beq.n	8006e28 <USBD_StdEPReq+0xa8>
 8006dfc:	e02b      	b.n	8006e56 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00c      	beq.n	8006e1e <USBD_StdEPReq+0x9e>
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	2b80      	cmp	r3, #128	; 0x80
 8006e08:	d009      	beq.n	8006e1e <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fffe 	bl	8007e10 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006e14:	2180      	movs	r1, #128	; 0x80
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fffa 	bl	8007e10 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006e1c:	e020      	b.n	8006e60 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fbb3 	bl	800758c <USBD_CtlError>
        break;
 8006e26:	e01b      	b.n	8006e60 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	885b      	ldrh	r3, [r3, #2]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10e      	bne.n	8006e4e <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e30:	7bbb      	ldrb	r3, [r7, #14]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00b      	beq.n	8006e4e <USBD_StdEPReq+0xce>
 8006e36:	7bbb      	ldrb	r3, [r7, #14]
 8006e38:	2b80      	cmp	r3, #128	; 0x80
 8006e3a:	d008      	beq.n	8006e4e <USBD_StdEPReq+0xce>
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	88db      	ldrh	r3, [r3, #6]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d104      	bne.n	8006e4e <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006e44:	7bbb      	ldrb	r3, [r7, #14]
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 ffe1 	bl	8007e10 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fc64 	bl	800771c <USBD_CtlSendStatus>

        break;
 8006e54:	e004      	b.n	8006e60 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fb97 	bl	800758c <USBD_CtlError>
        break;
 8006e5e:	bf00      	nop
      }
      break;
 8006e60:	e0de      	b.n	8007020 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d002      	beq.n	8006e72 <USBD_StdEPReq+0xf2>
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d015      	beq.n	8006e9c <USBD_StdEPReq+0x11c>
 8006e70:	e026      	b.n	8006ec0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00c      	beq.n	8006e92 <USBD_StdEPReq+0x112>
 8006e78:	7bbb      	ldrb	r3, [r7, #14]
 8006e7a:	2b80      	cmp	r3, #128	; 0x80
 8006e7c:	d009      	beq.n	8006e92 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 ffc4 	bl	8007e10 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006e88:	2180      	movs	r1, #128	; 0x80
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 ffc0 	bl	8007e10 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006e90:	e01c      	b.n	8006ecc <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fb79 	bl	800758c <USBD_CtlError>
        break;
 8006e9a:	e017      	b.n	8006ecc <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	885b      	ldrh	r3, [r3, #2]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d112      	bne.n	8006eca <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006ea4:	7bbb      	ldrb	r3, [r7, #14]
 8006ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d004      	beq.n	8006eb8 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006eae:	7bbb      	ldrb	r3, [r7, #14]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 ffcb 	bl	8007e4e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fc2f 	bl	800771c <USBD_CtlSendStatus>
        }
        break;
 8006ebe:	e004      	b.n	8006eca <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fb62 	bl	800758c <USBD_CtlError>
        break;
 8006ec8:	e000      	b.n	8006ecc <USBD_StdEPReq+0x14c>
        break;
 8006eca:	bf00      	nop
      }
      break;
 8006ecc:	e0a8      	b.n	8007020 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d002      	beq.n	8006ede <USBD_StdEPReq+0x15e>
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d031      	beq.n	8006f40 <USBD_StdEPReq+0x1c0>
 8006edc:	e095      	b.n	800700a <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d007      	beq.n	8006ef4 <USBD_StdEPReq+0x174>
 8006ee4:	7bbb      	ldrb	r3, [r7, #14]
 8006ee6:	2b80      	cmp	r3, #128	; 0x80
 8006ee8:	d004      	beq.n	8006ef4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fb4d 	bl	800758c <USBD_CtlError>
          break;
 8006ef2:	e08f      	b.n	8007014 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	da0b      	bge.n	8006f14 <USBD_StdEPReq+0x194>
 8006efc:	7bbb      	ldrb	r3, [r7, #14]
 8006efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f02:	4613      	mov	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	3310      	adds	r3, #16
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	4413      	add	r3, r2
 8006f10:	3304      	adds	r3, #4
 8006f12:	e00a      	b.n	8006f2a <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	4413      	add	r3, r2
 8006f2a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2202      	movs	r2, #2
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fb91 	bl	8007660 <USBD_CtlSendData>
          break;
 8006f3e:	e069      	b.n	8007014 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006f40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	da11      	bge.n	8006f6c <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f48:	7bbb      	ldrb	r3, [r7, #14]
 8006f4a:	f003 020f 	and.w	r2, r3, #15
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	3318      	adds	r3, #24
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d117      	bne.n	8006f92 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fb11 	bl	800758c <USBD_CtlError>
            break;
 8006f6a:	e053      	b.n	8007014 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	f003 020f 	and.w	r2, r3, #15
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	4613      	mov	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d104      	bne.n	8006f92 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fafe 	bl	800758c <USBD_CtlError>
            break;
 8006f90:	e040      	b.n	8007014 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006f92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	da0b      	bge.n	8006fb2 <USBD_StdEPReq+0x232>
 8006f9a:	7bbb      	ldrb	r3, [r7, #14]
 8006f9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	3310      	adds	r3, #16
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	4413      	add	r3, r2
 8006fae:	3304      	adds	r3, #4
 8006fb0:	e00a      	b.n	8006fc8 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fca:	7bbb      	ldrb	r3, [r7, #14]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <USBD_StdEPReq+0x256>
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	2b80      	cmp	r3, #128	; 0x80
 8006fd4:	d103      	bne.n	8006fde <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	e00e      	b.n	8006ffc <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006fde:	7bbb      	ldrb	r3, [r7, #14]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 ff52 	bl	8007e8c <USBD_LL_IsStallEP>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	e002      	b.n	8006ffc <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2202      	movs	r2, #2
 8007000:	4619      	mov	r1, r3
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fb2c 	bl	8007660 <USBD_CtlSendData>
          break;
 8007008:	e004      	b.n	8007014 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fabd 	bl	800758c <USBD_CtlError>
        break;
 8007012:	bf00      	nop
      }
      break;
 8007014:	e004      	b.n	8007020 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fab7 	bl	800758c <USBD_CtlError>
      break;
 800701e:	bf00      	nop
    }
    break;
 8007020:	e004      	b.n	800702c <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fab1 	bl	800758c <USBD_CtlError>
    break;
 800702a:	bf00      	nop
  }

  return ret;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	885b      	ldrh	r3, [r3, #2]
 8007046:	0a1b      	lsrs	r3, r3, #8
 8007048:	b29b      	uxth	r3, r3
 800704a:	3b01      	subs	r3, #1
 800704c:	2b06      	cmp	r3, #6
 800704e:	f200 80d1 	bhi.w	80071f4 <USBD_GetDescriptor+0x1bc>
 8007052:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <USBD_GetDescriptor+0x20>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	08007075 	.word	0x08007075
 800705c:	0800708d 	.word	0x0800708d
 8007060:	080070cd 	.word	0x080070cd
 8007064:	080071f5 	.word	0x080071f5
 8007068:	080071f5 	.word	0x080071f5
 800706c:	080071a1 	.word	0x080071a1
 8007070:	080071c7 	.word	0x080071c7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	7c12      	ldrb	r2, [r2, #16]
 8007080:	f107 010a 	add.w	r1, r7, #10
 8007084:	4610      	mov	r0, r2
 8007086:	4798      	blx	r3
 8007088:	60f8      	str	r0, [r7, #12]
    break;
 800708a:	e0b8      	b.n	80071fe <USBD_GetDescriptor+0x1c6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	7c1b      	ldrb	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10d      	bne.n	80070b0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800709a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709c:	f107 020a 	add.w	r2, r7, #10
 80070a0:	4610      	mov	r0, r2
 80070a2:	4798      	blx	r3
 80070a4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3301      	adds	r3, #1
 80070aa:	2202      	movs	r2, #2
 80070ac:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80070ae:	e0a6      	b.n	80071fe <USBD_GetDescriptor+0x1c6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	f107 020a 	add.w	r2, r7, #10
 80070bc:	4610      	mov	r0, r2
 80070be:	4798      	blx	r3
 80070c0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3301      	adds	r3, #1
 80070c6:	2202      	movs	r2, #2
 80070c8:	701a      	strb	r2, [r3, #0]
    break;
 80070ca:	e098      	b.n	80071fe <USBD_GetDescriptor+0x1c6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	885b      	ldrh	r3, [r3, #2]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b05      	cmp	r3, #5
 80070d4:	d856      	bhi.n	8007184 <USBD_GetDescriptor+0x14c>
 80070d6:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <USBD_GetDescriptor+0xa4>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	080070f5 	.word	0x080070f5
 80070e0:	0800710d 	.word	0x0800710d
 80070e4:	08007125 	.word	0x08007125
 80070e8:	0800713d 	.word	0x0800713d
 80070ec:	08007155 	.word	0x08007155
 80070f0:	0800716d 	.word	0x0800716d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	7c12      	ldrb	r2, [r2, #16]
 8007100:	f107 010a 	add.w	r1, r7, #10
 8007104:	4610      	mov	r0, r2
 8007106:	4798      	blx	r3
 8007108:	60f8      	str	r0, [r7, #12]
      break;
 800710a:	e048      	b.n	800719e <USBD_GetDescriptor+0x166>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	7c12      	ldrb	r2, [r2, #16]
 8007118:	f107 010a 	add.w	r1, r7, #10
 800711c:	4610      	mov	r0, r2
 800711e:	4798      	blx	r3
 8007120:	60f8      	str	r0, [r7, #12]
      break;
 8007122:	e03c      	b.n	800719e <USBD_GetDescriptor+0x166>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	7c12      	ldrb	r2, [r2, #16]
 8007130:	f107 010a 	add.w	r1, r7, #10
 8007134:	4610      	mov	r0, r2
 8007136:	4798      	blx	r3
 8007138:	60f8      	str	r0, [r7, #12]
      break;
 800713a:	e030      	b.n	800719e <USBD_GetDescriptor+0x166>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	7c12      	ldrb	r2, [r2, #16]
 8007148:	f107 010a 	add.w	r1, r7, #10
 800714c:	4610      	mov	r0, r2
 800714e:	4798      	blx	r3
 8007150:	60f8      	str	r0, [r7, #12]
      break;
 8007152:	e024      	b.n	800719e <USBD_GetDescriptor+0x166>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	7c12      	ldrb	r2, [r2, #16]
 8007160:	f107 010a 	add.w	r1, r7, #10
 8007164:	4610      	mov	r0, r2
 8007166:	4798      	blx	r3
 8007168:	60f8      	str	r0, [r7, #12]
      break;
 800716a:	e018      	b.n	800719e <USBD_GetDescriptor+0x166>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	7c12      	ldrb	r2, [r2, #16]
 8007178:	f107 010a 	add.w	r1, r7, #10
 800717c:	4610      	mov	r0, r2
 800717e:	4798      	blx	r3
 8007180:	60f8      	str	r0, [r7, #12]
      break;
 8007182:	e00c      	b.n	800719e <USBD_GetDescriptor+0x166>

    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	8852      	ldrh	r2, [r2, #2]
 8007190:	b2d1      	uxtb	r1, r2
 8007192:	f107 020a 	add.w	r2, r7, #10
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	4798      	blx	r3
 800719a:	60f8      	str	r0, [r7, #12]
      break;
 800719c:	bf00      	nop
#else
       USBD_CtlError(pdev , req);
      return;
#endif
    }
    break;
 800719e:	e02e      	b.n	80071fe <USBD_GetDescriptor+0x1c6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	7c1b      	ldrb	r3, [r3, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d109      	bne.n	80071bc <USBD_GetDescriptor+0x184>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b0:	f107 020a 	add.w	r2, r7, #10
 80071b4:	4610      	mov	r0, r2
 80071b6:	4798      	blx	r3
 80071b8:	60f8      	str	r0, [r7, #12]
      break;
 80071ba:	e020      	b.n	80071fe <USBD_GetDescriptor+0x1c6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f9e4 	bl	800758c <USBD_CtlError>
      return;
 80071c4:	e037      	b.n	8007236 <USBD_GetDescriptor+0x1fe>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	7c1b      	ldrb	r3, [r3, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10d      	bne.n	80071ea <USBD_GetDescriptor+0x1b2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d6:	f107 020a 	add.w	r2, r7, #10
 80071da:	4610      	mov	r0, r2
 80071dc:	4798      	blx	r3
 80071de:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3301      	adds	r3, #1
 80071e4:	2207      	movs	r2, #7
 80071e6:	701a      	strb	r2, [r3, #0]
      break;
 80071e8:	e009      	b.n	80071fe <USBD_GetDescriptor+0x1c6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f9cd 	bl	800758c <USBD_CtlError>
      return;
 80071f2:	e020      	b.n	8007236 <USBD_GetDescriptor+0x1fe>
    }

  default:
     USBD_CtlError(pdev , req);
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f9c8 	bl	800758c <USBD_CtlError>
    return;
 80071fc:	e01b      	b.n	8007236 <USBD_GetDescriptor+0x1fe>
  }

  if((len != 0U) && (req->wLength != 0U))
 80071fe:	897b      	ldrh	r3, [r7, #10]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d011      	beq.n	8007228 <USBD_GetDescriptor+0x1f0>
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	88db      	ldrh	r3, [r3, #6]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00d      	beq.n	8007228 <USBD_GetDescriptor+0x1f0>
  {

    len = MIN(len, req->wLength);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	88da      	ldrh	r2, [r3, #6]
 8007210:	897b      	ldrh	r3, [r7, #10]
 8007212:	4293      	cmp	r3, r2
 8007214:	bf28      	it	cs
 8007216:	4613      	movcs	r3, r2
 8007218:	b29b      	uxth	r3, r3
 800721a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800721c:	897b      	ldrh	r3, [r7, #10]
 800721e:	461a      	mov	r2, r3
 8007220:	68f9      	ldr	r1, [r7, #12]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fa1c 	bl	8007660 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	88db      	ldrh	r3, [r3, #6]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d102      	bne.n	8007236 <USBD_GetDescriptor+0x1fe>
  {
   USBD_CtlSendStatus(pdev);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fa73 	bl	800771c <USBD_CtlSendStatus>
  }
}
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	889b      	ldrh	r3, [r3, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d130      	bne.n	80072b0 <USBD_SetAddress+0x74>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	88db      	ldrh	r3, [r3, #6]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d12c      	bne.n	80072b0 <USBD_SetAddress+0x74>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	885b      	ldrh	r3, [r3, #2]
 800725a:	2b7f      	cmp	r3, #127	; 0x7f
 800725c:	d828      	bhi.n	80072b0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	885b      	ldrh	r3, [r3, #2]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007268:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007270:	2b03      	cmp	r3, #3
 8007272:	d104      	bne.n	800727e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f988 	bl	800758c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727c:	e01c      	b.n	80072b8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	7bfa      	ldrb	r2, [r7, #15]
 8007282:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fe2a 	bl	8007ee4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fa43 	bl	800771c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007296:	7bfb      	ldrb	r3, [r7, #15]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d004      	beq.n	80072a6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2202      	movs	r2, #2
 80072a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a4:	e008      	b.n	80072b8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ae:	e003      	b.n	80072b8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f96a 	bl	800758c <USBD_CtlError>
  }
}
 80072b8:	bf00      	nop
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	885b      	ldrh	r3, [r3, #2]
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	4b41      	ldr	r3, [pc, #260]	; (80073d8 <USBD_SetConfig+0x118>)
 80072d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80072d4:	4b40      	ldr	r3, [pc, #256]	; (80073d8 <USBD_SetConfig+0x118>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d904      	bls.n	80072e6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f954 	bl	800758c <USBD_CtlError>
 80072e4:	e075      	b.n	80073d2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d002      	beq.n	80072f6 <USBD_SetConfig+0x36>
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d023      	beq.n	800733c <USBD_SetConfig+0x7c>
 80072f4:	e062      	b.n	80073bc <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80072f6:	4b38      	ldr	r3, [pc, #224]	; (80073d8 <USBD_SetConfig+0x118>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d01a      	beq.n	8007334 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80072fe:	4b36      	ldr	r3, [pc, #216]	; (80073d8 <USBD_SetConfig+0x118>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2203      	movs	r2, #3
 800730c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007310:	4b31      	ldr	r3, [pc, #196]	; (80073d8 <USBD_SetConfig+0x118>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff fa60 	bl	80067dc <USBD_SetClassConfig>
 800731c:	4603      	mov	r3, r0
 800731e:	2b02      	cmp	r3, #2
 8007320:	d104      	bne.n	800732c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f931 	bl	800758c <USBD_CtlError>
          return;
 800732a:	e052      	b.n	80073d2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f9f5 	bl	800771c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007332:	e04e      	b.n	80073d2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f9f1 	bl	800771c <USBD_CtlSendStatus>
      break;
 800733a:	e04a      	b.n	80073d2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800733c:	4b26      	ldr	r3, [pc, #152]	; (80073d8 <USBD_SetConfig+0x118>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d112      	bne.n	800736a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800734c:	4b22      	ldr	r3, [pc, #136]	; (80073d8 <USBD_SetConfig+0x118>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	461a      	mov	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007356:	4b20      	ldr	r3, [pc, #128]	; (80073d8 <USBD_SetConfig+0x118>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff fa5c 	bl	800681a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f9da 	bl	800771c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007368:	e033      	b.n	80073d2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800736a:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <USBD_SetConfig+0x118>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	429a      	cmp	r2, r3
 8007376:	d01d      	beq.n	80073b4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff fa4a 	bl	800681a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007386:	4b14      	ldr	r3, [pc, #80]	; (80073d8 <USBD_SetConfig+0x118>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007390:	4b11      	ldr	r3, [pc, #68]	; (80073d8 <USBD_SetConfig+0x118>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	4619      	mov	r1, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7ff fa20 	bl	80067dc <USBD_SetClassConfig>
 800739c:	4603      	mov	r3, r0
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d104      	bne.n	80073ac <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f8f1 	bl	800758c <USBD_CtlError>
          return;
 80073aa:	e012      	b.n	80073d2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f9b5 	bl	800771c <USBD_CtlSendStatus>
      break;
 80073b2:	e00e      	b.n	80073d2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f9b1 	bl	800771c <USBD_CtlSendStatus>
      break;
 80073ba:	e00a      	b.n	80073d2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f8e4 	bl	800758c <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80073c4:	4b04      	ldr	r3, [pc, #16]	; (80073d8 <USBD_SetConfig+0x118>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7ff fa25 	bl	800681a <USBD_ClrClassConfig>
      break;
 80073d0:	bf00      	nop
    }
  }
}
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	2000025f 	.word	0x2000025f

080073dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	88db      	ldrh	r3, [r3, #6]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d004      	beq.n	80073f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f8cb 	bl	800758c <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80073f6:	e021      	b.n	800743c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80073fe:	2b01      	cmp	r3, #1
 8007400:	db17      	blt.n	8007432 <USBD_GetConfig+0x56>
 8007402:	2b02      	cmp	r3, #2
 8007404:	dd02      	ble.n	800740c <USBD_GetConfig+0x30>
 8007406:	2b03      	cmp	r3, #3
 8007408:	d00b      	beq.n	8007422 <USBD_GetConfig+0x46>
 800740a:	e012      	b.n	8007432 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	3308      	adds	r3, #8
 8007416:	2201      	movs	r2, #1
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f920 	bl	8007660 <USBD_CtlSendData>
      break;
 8007420:	e00c      	b.n	800743c <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3304      	adds	r3, #4
 8007426:	2201      	movs	r2, #1
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f918 	bl	8007660 <USBD_CtlSendData>
      break;
 8007430:	e004      	b.n	800743c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f8a9 	bl	800758c <USBD_CtlError>
      break;
 800743a:	bf00      	nop
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007454:	3b01      	subs	r3, #1
 8007456:	2b02      	cmp	r3, #2
 8007458:	d81e      	bhi.n	8007498 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	88db      	ldrh	r3, [r3, #6]
 800745e:	2b02      	cmp	r3, #2
 8007460:	d004      	beq.n	800746c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f891 	bl	800758c <USBD_CtlError>
      break;
 800746a:	e01a      	b.n	80074a2 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007478:	2b00      	cmp	r3, #0
 800747a:	d005      	beq.n	8007488 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f043 0202 	orr.w	r2, r3, #2
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	330c      	adds	r3, #12
 800748c:	2202      	movs	r2, #2
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f8e5 	bl	8007660 <USBD_CtlSendData>
    break;
 8007496:	e004      	b.n	80074a2 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f876 	bl	800758c <USBD_CtlError>
    break;
 80074a0:	bf00      	nop
  }
}
 80074a2:	bf00      	nop
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	885b      	ldrh	r3, [r3, #2]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d106      	bne.n	80074ca <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f929 	bl	800771c <USBD_CtlSendStatus>
  }

}
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80074e2:	3b01      	subs	r3, #1
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d80b      	bhi.n	8007500 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	885b      	ldrh	r3, [r3, #2]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d10c      	bne.n	800750a <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f90f 	bl	800771c <USBD_CtlSendStatus>
    }
    break;
 80074fe:	e004      	b.n	800750a <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f842 	bl	800758c <USBD_CtlError>
    break;
 8007508:	e000      	b.n	800750c <USBD_ClrFeature+0x3a>
    break;
 800750a:	bf00      	nop
  }
}
 800750c:	bf00      	nop
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	781a      	ldrb	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	785a      	ldrb	r2, [r3, #1]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	3302      	adds	r3, #2
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	b29a      	uxth	r2, r3
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	3303      	adds	r3, #3
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	b29b      	uxth	r3, r3
 800753e:	021b      	lsls	r3, r3, #8
 8007540:	b29b      	uxth	r3, r3
 8007542:	4413      	add	r3, r2
 8007544:	b29a      	uxth	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	3304      	adds	r3, #4
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	b29a      	uxth	r2, r3
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	3305      	adds	r3, #5
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	b29b      	uxth	r3, r3
 800755a:	021b      	lsls	r3, r3, #8
 800755c:	b29b      	uxth	r3, r3
 800755e:	4413      	add	r3, r2
 8007560:	b29a      	uxth	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	3306      	adds	r3, #6
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	b29a      	uxth	r2, r3
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	3307      	adds	r3, #7
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	021b      	lsls	r3, r3, #8
 8007578:	b29b      	uxth	r3, r3
 800757a:	4413      	add	r3, r2
 800757c:	b29a      	uxth	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	80da      	strh	r2, [r3, #6]

}
 8007582:	bf00      	nop
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	bc80      	pop	{r7}
 800758a:	4770      	bx	lr

0800758c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007596:	2180      	movs	r1, #128	; 0x80
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fc39 	bl	8007e10 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800759e:	2100      	movs	r1, #0
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fc35 	bl	8007e10 <USBD_LL_StallEP>
}
 80075a6:	bf00      	nop
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b086      	sub	sp, #24
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d032      	beq.n	800762a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 f834 	bl	8007632 <USBD_GetLen>
 80075ca:	4603      	mov	r3, r0
 80075cc:	3301      	adds	r3, #1
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	75fa      	strb	r2, [r7, #23]
 80075de:	461a      	mov	r2, r3
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4413      	add	r3, r2
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	7812      	ldrb	r2, [r2, #0]
 80075e8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	75fa      	strb	r2, [r7, #23]
 80075f0:	461a      	mov	r2, r3
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	4413      	add	r3, r2
 80075f6:	2203      	movs	r2, #3
 80075f8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80075fa:	e012      	b.n	8007622 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	60fa      	str	r2, [r7, #12]
 8007602:	7dfa      	ldrb	r2, [r7, #23]
 8007604:	1c51      	adds	r1, r2, #1
 8007606:	75f9      	strb	r1, [r7, #23]
 8007608:	4611      	mov	r1, r2
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	440a      	add	r2, r1
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007612:	7dfb      	ldrb	r3, [r7, #23]
 8007614:	1c5a      	adds	r2, r3, #1
 8007616:	75fa      	strb	r2, [r7, #23]
 8007618:	461a      	mov	r2, r3
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	4413      	add	r3, r2
 800761e:	2200      	movs	r2, #0
 8007620:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e8      	bne.n	80075fc <USBD_GetString+0x4e>
    }
  }
}
 800762a:	bf00      	nop
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007632:	b480      	push	{r7}
 8007634:	b085      	sub	sp, #20
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800763e:	e005      	b.n	800764c <USBD_GetLen+0x1a>
    {
        len++;
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	3301      	adds	r3, #1
 8007644:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3301      	adds	r3, #1
 800764a:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1f5      	bne.n	8007640 <USBD_GetLen+0xe>
    }

    return len;
 8007654:	7bfb      	ldrb	r3, [r7, #15]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	bc80      	pop	{r7}
 800765e:	4770      	bx	lr

08007660 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	4613      	mov	r3, r2
 800766c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2202      	movs	r2, #2
 8007672:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007676:	88fa      	ldrh	r2, [r7, #6]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800767c:	88fa      	ldrh	r2, [r7, #6]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007682:	88fb      	ldrh	r3, [r7, #6]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	2100      	movs	r1, #0
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 fc4a 	bl	8007f22 <USBD_LL_Transmit>

  return USBD_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	4613      	mov	r3, r2
 80076a4:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80076a6:	88fb      	ldrh	r3, [r7, #6]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	2100      	movs	r1, #0
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 fc38 	bl	8007f22 <USBD_LL_Transmit>

  return USBD_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	4613      	mov	r3, r2
 80076c8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2203      	movs	r2, #3
 80076ce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80076d2:	88fa      	ldrh	r2, [r7, #6]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80076da:	88fa      	ldrh	r2, [r7, #6]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80076e2:	88fb      	ldrh	r3, [r7, #6]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	2100      	movs	r1, #0
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 fc3d 	bl	8007f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	4613      	mov	r3, r2
 8007704:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007706:	88fb      	ldrh	r3, [r7, #6]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	2100      	movs	r1, #0
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 fc2b 	bl	8007f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2204      	movs	r2, #4
 8007728:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800772c:	2300      	movs	r3, #0
 800772e:	2200      	movs	r2, #0
 8007730:	2100      	movs	r1, #0
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fbf5 	bl	8007f22 <USBD_LL_Transmit>

  return USBD_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b082      	sub	sp, #8
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2205      	movs	r2, #5
 800774e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007752:	2300      	movs	r3, #0
 8007754:	2200      	movs	r2, #0
 8007756:	2100      	movs	r1, #0
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fc05 	bl	8007f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800776c:	2200      	movs	r2, #0
 800776e:	4912      	ldr	r1, [pc, #72]	; (80077b8 <MX_USB_DEVICE_Init+0x50>)
 8007770:	4812      	ldr	r0, [pc, #72]	; (80077bc <MX_USB_DEVICE_Init+0x54>)
 8007772:	f7fe ffc3 	bl	80066fc <USBD_Init>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800777c:	f7f8 ff98 	bl	80006b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8007780:	490f      	ldr	r1, [pc, #60]	; (80077c0 <MX_USB_DEVICE_Init+0x58>)
 8007782:	480e      	ldr	r0, [pc, #56]	; (80077bc <MX_USB_DEVICE_Init+0x54>)
 8007784:	f7fe ffe5 	bl	8006752 <USBD_RegisterClass>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800778e:	f7f8 ff8f 	bl	80006b0 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8007792:	490c      	ldr	r1, [pc, #48]	; (80077c4 <MX_USB_DEVICE_Init+0x5c>)
 8007794:	4809      	ldr	r0, [pc, #36]	; (80077bc <MX_USB_DEVICE_Init+0x54>)
 8007796:	f7fe fc49 	bl	800602c <USBD_DFU_RegisterMedia>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d001      	beq.n	80077a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80077a0:	f7f8 ff86 	bl	80006b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80077a4:	4805      	ldr	r0, [pc, #20]	; (80077bc <MX_USB_DEVICE_Init+0x54>)
 80077a6:	f7fe ffed 	bl	8006784 <USBD_Start>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d001      	beq.n	80077b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80077b0:	f7f8 ff7e 	bl	80006b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077b4:	bf00      	nop
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	20000070 	.word	0x20000070
 80077bc:	200006e4 	.word	0x200006e4
 80077c0:	2000000c 	.word	0x2000000c
 80077c4:	200000c0 	.word	0x200000c0

080077c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4603      	mov	r3, r0
 80077d0:	6039      	str	r1, [r7, #0]
 80077d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2212      	movs	r2, #18
 80077d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077da:	4b03      	ldr	r3, [pc, #12]	; (80077e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80077dc:	4618      	mov	r0, r3
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bc80      	pop	{r7}
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	2000008c 	.word	0x2000008c

080077ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	6039      	str	r1, [r7, #0]
 80077f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2204      	movs	r2, #4
 80077fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077fe:	4b03      	ldr	r3, [pc, #12]	; (800780c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	200000a0 	.word	0x200000a0

08007810 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	4603      	mov	r3, r0
 8007818:	6039      	str	r1, [r7, #0]
 800781a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800781c:	79fb      	ldrb	r3, [r7, #7]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d105      	bne.n	800782e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	4907      	ldr	r1, [pc, #28]	; (8007844 <USBD_FS_ProductStrDescriptor+0x34>)
 8007826:	4808      	ldr	r0, [pc, #32]	; (8007848 <USBD_FS_ProductStrDescriptor+0x38>)
 8007828:	f7ff fec1 	bl	80075ae <USBD_GetString>
 800782c:	e004      	b.n	8007838 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	4904      	ldr	r1, [pc, #16]	; (8007844 <USBD_FS_ProductStrDescriptor+0x34>)
 8007832:	4805      	ldr	r0, [pc, #20]	; (8007848 <USBD_FS_ProductStrDescriptor+0x38>)
 8007834:	f7ff febb 	bl	80075ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8007838:	4b02      	ldr	r3, [pc, #8]	; (8007844 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	20000980 	.word	0x20000980
 8007848:	08008928 	.word	0x08008928

0800784c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	4603      	mov	r3, r0
 8007854:	6039      	str	r1, [r7, #0]
 8007856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	4904      	ldr	r1, [pc, #16]	; (800786c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800785c:	4804      	ldr	r0, [pc, #16]	; (8007870 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800785e:	f7ff fea6 	bl	80075ae <USBD_GetString>
  return USBD_StrDesc;
 8007862:	4b02      	ldr	r3, [pc, #8]	; (800786c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	20000980 	.word	0x20000980
 8007870:	08008948 	.word	0x08008948

08007874 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	6039      	str	r1, [r7, #0]
 800787e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	221a      	movs	r2, #26
 8007884:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007886:	f000 f843 	bl	8007910 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800788a:	4b02      	ldr	r3, [pc, #8]	; (8007894 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	200000a4 	.word	0x200000a4

08007898 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	6039      	str	r1, [r7, #0]
 80078a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d105      	bne.n	80078b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	4907      	ldr	r1, [pc, #28]	; (80078cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80078ae:	4808      	ldr	r0, [pc, #32]	; (80078d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078b0:	f7ff fe7d 	bl	80075ae <USBD_GetString>
 80078b4:	e004      	b.n	80078c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	4904      	ldr	r1, [pc, #16]	; (80078cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80078ba:	4805      	ldr	r0, [pc, #20]	; (80078d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078bc:	f7ff fe77 	bl	80075ae <USBD_GetString>
  }
  return USBD_StrDesc;
 80078c0:	4b02      	ldr	r3, [pc, #8]	; (80078cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20000980 	.word	0x20000980
 80078d0:	0800895c 	.word	0x0800895c

080078d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	6039      	str	r1, [r7, #0]
 80078de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078e0:	79fb      	ldrb	r3, [r7, #7]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d105      	bne.n	80078f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	4907      	ldr	r1, [pc, #28]	; (8007908 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078ea:	4808      	ldr	r0, [pc, #32]	; (800790c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078ec:	f7ff fe5f 	bl	80075ae <USBD_GetString>
 80078f0:	e004      	b.n	80078fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	4904      	ldr	r1, [pc, #16]	; (8007908 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078f6:	4805      	ldr	r0, [pc, #20]	; (800790c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078f8:	f7ff fe59 	bl	80075ae <USBD_GetString>
  }
  return USBD_StrDesc;
 80078fc:	4b02      	ldr	r3, [pc, #8]	; (8007908 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20000980 	.word	0x20000980
 800790c:	08008968 	.word	0x08008968

08007910 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007916:	4b0f      	ldr	r3, [pc, #60]	; (8007954 <Get_SerialNum+0x44>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800791c:	4b0e      	ldr	r3, [pc, #56]	; (8007958 <Get_SerialNum+0x48>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007922:	4b0e      	ldr	r3, [pc, #56]	; (800795c <Get_SerialNum+0x4c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4413      	add	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d009      	beq.n	800794a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007936:	2208      	movs	r2, #8
 8007938:	4909      	ldr	r1, [pc, #36]	; (8007960 <Get_SerialNum+0x50>)
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 f814 	bl	8007968 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007940:	2204      	movs	r2, #4
 8007942:	4908      	ldr	r1, [pc, #32]	; (8007964 <Get_SerialNum+0x54>)
 8007944:	68b8      	ldr	r0, [r7, #8]
 8007946:	f000 f80f 	bl	8007968 <IntToUnicode>
  }
}
 800794a:	bf00      	nop
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	1ff80050 	.word	0x1ff80050
 8007958:	1ff80054 	.word	0x1ff80054
 800795c:	1ff80058 	.word	0x1ff80058
 8007960:	200000a6 	.word	0x200000a6
 8007964:	200000b6 	.word	0x200000b6

08007968 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	4613      	mov	r3, r2
 8007974:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007976:	2300      	movs	r3, #0
 8007978:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800797a:	2300      	movs	r3, #0
 800797c:	75fb      	strb	r3, [r7, #23]
 800797e:	e027      	b.n	80079d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	0f1b      	lsrs	r3, r3, #28
 8007984:	2b09      	cmp	r3, #9
 8007986:	d80b      	bhi.n	80079a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	0f1b      	lsrs	r3, r3, #28
 800798c:	b2da      	uxtb	r2, r3
 800798e:	7dfb      	ldrb	r3, [r7, #23]
 8007990:	005b      	lsls	r3, r3, #1
 8007992:	4619      	mov	r1, r3
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	440b      	add	r3, r1
 8007998:	3230      	adds	r2, #48	; 0x30
 800799a:	b2d2      	uxtb	r2, r2
 800799c:	701a      	strb	r2, [r3, #0]
 800799e:	e00a      	b.n	80079b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	0f1b      	lsrs	r3, r3, #28
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	7dfb      	ldrb	r3, [r7, #23]
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	4619      	mov	r1, r3
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	440b      	add	r3, r1
 80079b0:	3237      	adds	r2, #55	; 0x37
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	011b      	lsls	r3, r3, #4
 80079ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80079bc:	7dfb      	ldrb	r3, [r7, #23]
 80079be:	005b      	lsls	r3, r3, #1
 80079c0:	3301      	adds	r3, #1
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	4413      	add	r3, r2
 80079c6:	2200      	movs	r2, #0
 80079c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80079ca:	7dfb      	ldrb	r3, [r7, #23]
 80079cc:	3301      	adds	r3, #1
 80079ce:	75fb      	strb	r3, [r7, #23]
 80079d0:	7dfa      	ldrb	r2, [r7, #23]
 80079d2:	79fb      	ldrb	r3, [r7, #7]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d3d3      	bcc.n	8007980 <IntToUnicode+0x18>
  }
}
 80079d8:	bf00      	nop
 80079da:	371c      	adds	r7, #28
 80079dc:	46bd      	mov	sp, r7
 80079de:	bc80      	pop	{r7}
 80079e0:	4770      	bx	lr
	...

080079e4 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
	HAL_FLASH_Unlock();
 80079e8:	f7f9 f9bc 	bl	8000d64 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR |
 80079ec:	4b03      	ldr	r3, [pc, #12]	; (80079fc <MEM_If_Init_FS+0x18>)
 80079ee:	f640 7202 	movw	r2, #3842	; 0xf02
 80079f2:	619a      	str	r2, [r3, #24]
							FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_OPTVERR);
	return (USBD_OK);
 80079f4:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	40023c00 	.word	0x40023c00

08007a00 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_FLASH_Lock();
 8007a04:	f7f9 f9e8 	bl	8000dd8 <HAL_FLASH_Lock>
	return (USBD_OK);
 8007a08:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b086      	sub	sp, #24
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef pEraseInit;
	uint32_t SectorError;
	//HAL_StatusTypeDef status = HAL_ERROR;


	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8007a16:	2300      	movs	r3, #0
 8007a18:	60fb      	str	r3, [r7, #12]
	pEraseInit.NbPages = 16;
 8007a1a:	2310      	movs	r3, #16
 8007a1c:	617b      	str	r3, [r7, #20]
	pEraseInit.PageAddress = Add;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	613b      	str	r3, [r7, #16]
	//status = HAL_FLASHEx_Erase(&pEraseInit,&SectorError);
	//if(status != HAL_OK)
	if(HAL_FLASHEx_Erase(&pEraseInit,&SectorError)!=HAL_OK)
 8007a22:	f107 0208 	add.w	r2, r7, #8
 8007a26:	f107 030c 	add.w	r3, r7, #12
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7f9 fa6f 	bl	8000f10 <HAL_FLASHEx_Erase>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <MEM_If_Erase_FS+0x2e>
	{
		return (USBD_FAIL);
 8007a38:	2302      	movs	r3, #2
 8007a3a:	e000      	b.n	8007a3e <MEM_If_Erase_FS+0x30>
	}
	return (USBD_OK);
 8007a3c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b086      	sub	sp, #24
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
	uint32_t i = 0;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]
	for(i = 0;i < Len;i += 4)
 8007a56:	2300      	movs	r3, #0
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	e01f      	b.n	8007a9c <MEM_If_Write_FS+0x56>
	{
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)(dest + i),*(uint32_t *)(src + i)) == HAL_OK)
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	4413      	add	r3, r2
 8007a62:	4619      	mov	r1, r3
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	4413      	add	r3, r2
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	2002      	movs	r0, #2
 8007a70:	f7f9 f948 	bl	8000d04 <HAL_FLASH_Program>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10b      	bne.n	8007a92 <MEM_If_Write_FS+0x4c>
		{
			if(*(uint32_t *)(src + i) != *(uint32_t *)(dest + i))
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	4413      	add	r3, r2
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68b9      	ldr	r1, [r7, #8]
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	440b      	add	r3, r1
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d003      	beq.n	8007a96 <MEM_If_Write_FS+0x50>
				return 2;
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e009      	b.n	8007aa6 <MEM_If_Write_FS+0x60>
		}
		else
			return 1;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e007      	b.n	8007aa6 <MEM_If_Write_FS+0x60>
	for(i = 0;i < Len;i += 4)
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	3304      	adds	r3, #4
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d3db      	bcc.n	8007a5c <MEM_If_Write_FS+0x16>
	}
	return (USBD_OK);
 8007aa4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3718      	adds	r7, #24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b087      	sub	sp, #28
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	60f8      	str	r0, [r7, #12]
 8007ab6:	60b9      	str	r1, [r7, #8]
 8007ab8:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
	uint32_t i = 0;
 8007aba:	2300      	movs	r3, #0
 8007abc:	617b      	str	r3, [r7, #20]
	uint8_t *psrc = src;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	613b      	str	r3, [r7, #16]
	for(i = 0;i < Len;i++)
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	617b      	str	r3, [r7, #20]
 8007ac6:	e00a      	b.n	8007ade <MEM_If_Read_FS+0x30>
		{
			dest[i] = *psrc++;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	1c5a      	adds	r2, r3, #1
 8007acc:	613a      	str	r2, [r7, #16]
 8007ace:	68b9      	ldr	r1, [r7, #8]
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	440a      	add	r2, r1
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	7013      	strb	r3, [r2, #0]
	for(i = 0;i < Len;i++)
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	3301      	adds	r3, #1
 8007adc:	617b      	str	r3, [r7, #20]
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d3f0      	bcc.n	8007ac8 <MEM_If_Read_FS+0x1a>
		}
	return (uint8_t*)(USBD_OK);
 8007ae6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	371c      	adds	r7, #28
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bc80      	pop	{r7}
 8007af0:	4770      	bx	lr

08007af2 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b085      	sub	sp, #20
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	60f8      	str	r0, [r7, #12]
 8007afa:	460b      	mov	r3, r1
 8007afc:	607a      	str	r2, [r7, #4]
 8007afe:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8007b00:	7afb      	ldrb	r3, [r7, #11]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d000      	beq.n	8007b08 <MEM_If_GetStatus_FS+0x16>
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8007b06:	e000      	b.n	8007b0a <MEM_If_GetStatus_FS+0x18>
    break;
 8007b08:	bf00      	nop
  }
  return (USBD_OK);
 8007b0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bc80      	pop	{r7}
 8007b14:	4770      	bx	lr
	...

08007b18 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d106      	bne.n	8007b38 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8007b2a:	4b09      	ldr	r3, [pc, #36]	; (8007b50 <HAL_PCDEx_SetConnectionState+0x38>)
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	4a08      	ldr	r2, [pc, #32]	; (8007b50 <HAL_PCDEx_SetConnectionState+0x38>)
 8007b30:	f043 0301 	orr.w	r3, r3, #1
 8007b34:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8007b36:	e005      	b.n	8007b44 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8007b38:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <HAL_PCDEx_SetConnectionState+0x38>)
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	4a04      	ldr	r2, [pc, #16]	; (8007b50 <HAL_PCDEx_SetConnectionState+0x38>)
 8007b3e:	f023 0301 	bic.w	r3, r3, #1
 8007b42:	6053      	str	r3, [r2, #4]
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bc80      	pop	{r7}
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	40010000 	.word	0x40010000

08007b54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a0d      	ldr	r2, [pc, #52]	; (8007b98 <HAL_PCD_MspInit+0x44>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d113      	bne.n	8007b8e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007b66:	4b0d      	ldr	r3, [pc, #52]	; (8007b9c <HAL_PCD_MspInit+0x48>)
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	4a0c      	ldr	r2, [pc, #48]	; (8007b9c <HAL_PCD_MspInit+0x48>)
 8007b6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b70:	6253      	str	r3, [r2, #36]	; 0x24
 8007b72:	4b0a      	ldr	r3, [pc, #40]	; (8007b9c <HAL_PCD_MspInit+0x48>)
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007b7e:	2200      	movs	r2, #0
 8007b80:	2100      	movs	r1, #0
 8007b82:	2014      	movs	r0, #20
 8007b84:	f7f9 f847 	bl	8000c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007b88:	2014      	movs	r0, #20
 8007b8a:	f7f9 f860 	bl	8000c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007b8e:	bf00      	nop
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	40005c00 	.word	0x40005c00
 8007b9c:	40023800 	.word	0x40023800

08007ba0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f7fe fe42 	bl	8006840 <USBD_LL_SetupStage>
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007bd6:	78fa      	ldrb	r2, [r7, #3]
 8007bd8:	6879      	ldr	r1, [r7, #4]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	00db      	lsls	r3, r3, #3
 8007be2:	440b      	add	r3, r1
 8007be4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	78fb      	ldrb	r3, [r7, #3]
 8007bec:	4619      	mov	r1, r3
 8007bee:	f7fe fe72 	bl	80068d6 <USBD_LL_DataOutStage>
}
 8007bf2:	bf00      	nop
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	460b      	mov	r3, r1
 8007c04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007c0c:	78fa      	ldrb	r2, [r7, #3]
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	440b      	add	r3, r1
 8007c1a:	333c      	adds	r3, #60	; 0x3c
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	78fb      	ldrb	r3, [r7, #3]
 8007c20:	4619      	mov	r1, r3
 8007c22:	f7fe fec9 	bl	80069b8 <USBD_LL_DataInStage>
}
 8007c26:	bf00      	nop
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe ffd4 	bl	8006bea <USBD_LL_SOF>
}
 8007c42:	bf00      	nop
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c52:	2301      	movs	r3, #1
 8007c54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d001      	beq.n	8007c62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c5e:	f7f8 fd27 	bl	80006b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c68:	7bfa      	ldrb	r2, [r7, #15]
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fe ff89 	bl	8006b84 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fe ff42 	bl	8006b02 <USBD_LL_Reset>
}
 8007c7e:	bf00      	nop
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe ff83 	bl	8006ba2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d005      	beq.n	8007cb0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ca4:	4b04      	ldr	r3, [pc, #16]	; (8007cb8 <HAL_PCD_SuspendCallback+0x30>)
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	4a03      	ldr	r2, [pc, #12]	; (8007cb8 <HAL_PCD_SuspendCallback+0x30>)
 8007caa:	f043 0306 	orr.w	r3, r3, #6
 8007cae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	e000ed00 	.word	0xe000ed00

08007cbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fe ff7d 	bl	8006bca <USBD_LL_Resume>
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007ce0:	4a1b      	ldr	r2, [pc, #108]	; (8007d50 <USBD_LL_Init+0x78>)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a19      	ldr	r2, [pc, #100]	; (8007d50 <USBD_LL_Init+0x78>)
 8007cec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8007cf0:	4b17      	ldr	r3, [pc, #92]	; (8007d50 <USBD_LL_Init+0x78>)
 8007cf2:	4a18      	ldr	r2, [pc, #96]	; (8007d54 <USBD_LL_Init+0x7c>)
 8007cf4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007cf6:	4b16      	ldr	r3, [pc, #88]	; (8007d50 <USBD_LL_Init+0x78>)
 8007cf8:	2208      	movs	r2, #8
 8007cfa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007cfc:	4b14      	ldr	r3, [pc, #80]	; (8007d50 <USBD_LL_Init+0x78>)
 8007cfe:	2202      	movs	r2, #2
 8007d00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d02:	4b13      	ldr	r3, [pc, #76]	; (8007d50 <USBD_LL_Init+0x78>)
 8007d04:	2202      	movs	r2, #2
 8007d06:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007d08:	4b11      	ldr	r3, [pc, #68]	; (8007d50 <USBD_LL_Init+0x78>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007d0e:	4b10      	ldr	r3, [pc, #64]	; (8007d50 <USBD_LL_Init+0x78>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007d14:	480e      	ldr	r0, [pc, #56]	; (8007d50 <USBD_LL_Init+0x78>)
 8007d16:	f7f9 fb0a 	bl	800132e <HAL_PCD_Init>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007d20:	f7f8 fcc6 	bl	80006b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007d2a:	2318      	movs	r3, #24
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2100      	movs	r1, #0
 8007d30:	f7fa fd7a 	bl	8002828 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007d3a:	2358      	movs	r3, #88	; 0x58
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	2180      	movs	r1, #128	; 0x80
 8007d40:	f7fa fd72 	bl	8002828 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000b80 	.word	0x20000b80
 8007d54:	40005c00 	.word	0x40005c00

08007d58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7f9 fbbb 	bl	80014ea <HAL_PCD_Start>
 8007d74:	4603      	mov	r3, r0
 8007d76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 f92e 	bl	8007fdc <USBD_Get_USB_Status>
 8007d80:	4603      	mov	r3, r0
 8007d82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b084      	sub	sp, #16
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7f9 fbc6 	bl	8001536 <HAL_PCD_Stop>
 8007daa:	4603      	mov	r3, r0
 8007dac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 f913 	bl	8007fdc <USBD_Get_USB_Status>
 8007db6:	4603      	mov	r3, r0
 8007db8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	4608      	mov	r0, r1
 8007dce:	4611      	mov	r1, r2
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	70fb      	strb	r3, [r7, #3]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	70bb      	strb	r3, [r7, #2]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007dec:	78bb      	ldrb	r3, [r7, #2]
 8007dee:	883a      	ldrh	r2, [r7, #0]
 8007df0:	78f9      	ldrb	r1, [r7, #3]
 8007df2:	f7f9 fce2 	bl	80017ba <HAL_PCD_EP_Open>
 8007df6:	4603      	mov	r3, r0
 8007df8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 f8ed 	bl	8007fdc <USBD_Get_USB_Status>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007e2a:	78fa      	ldrb	r2, [r7, #3]
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7f9 fda9 	bl	8001986 <HAL_PCD_EP_SetStall>
 8007e34:	4603      	mov	r3, r0
 8007e36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 f8ce 	bl	8007fdc <USBD_Get_USB_Status>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	460b      	mov	r3, r1
 8007e58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007e68:	78fa      	ldrb	r2, [r7, #3]
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7f9 fdea 	bl	8001a46 <HAL_PCD_EP_ClrStall>
 8007e72:	4603      	mov	r3, r0
 8007e74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 f8af 	bl	8007fdc <USBD_Get_USB_Status>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007e9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	da0c      	bge.n	8007ec2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ea8:	78fb      	ldrb	r3, [r7, #3]
 8007eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eae:	68f9      	ldr	r1, [r7, #12]
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	00db      	lsls	r3, r3, #3
 8007eba:	440b      	add	r3, r1
 8007ebc:	3302      	adds	r3, #2
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	e00b      	b.n	8007eda <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ec2:	78fb      	ldrb	r3, [r7, #3]
 8007ec4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ec8:	68f9      	ldr	r1, [r7, #12]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	440b      	add	r3, r1
 8007ed4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007ed8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bc80      	pop	{r7}
 8007ee2:	4770      	bx	lr

08007ee4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007efe:	78fa      	ldrb	r2, [r7, #3]
 8007f00:	4611      	mov	r1, r2
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7f9 fc34 	bl	8001770 <HAL_PCD_SetAddress>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f864 	bl	8007fdc <USBD_Get_USB_Status>
 8007f14:	4603      	mov	r3, r0
 8007f16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b086      	sub	sp, #24
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	607a      	str	r2, [r7, #4]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	460b      	mov	r3, r1
 8007f30:	72fb      	strb	r3, [r7, #11]
 8007f32:	4613      	mov	r3, r2
 8007f34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f44:	893b      	ldrh	r3, [r7, #8]
 8007f46:	7af9      	ldrb	r1, [r7, #11]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	f7f9 fcd9 	bl	8001900 <HAL_PCD_EP_Transmit>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 f841 	bl	8007fdc <USBD_Get_USB_Status>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3718      	adds	r7, #24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	607a      	str	r2, [r7, #4]
 8007f72:	461a      	mov	r2, r3
 8007f74:	460b      	mov	r3, r1
 8007f76:	72fb      	strb	r3, [r7, #11]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f8a:	893b      	ldrh	r3, [r7, #8]
 8007f8c:	7af9      	ldrb	r1, [r7, #11]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	f7f9 fc79 	bl	8001886 <HAL_PCD_EP_Receive>
 8007f94:	4603      	mov	r3, r0
 8007f96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f98:	7dfb      	ldrb	r3, [r7, #23]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 f81e 	bl	8007fdc <USBD_Get_USB_Status>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fa4:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007fb8:	4b02      	ldr	r3, [pc, #8]	; (8007fc4 <USBD_static_malloc+0x14>)
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bc80      	pop	{r7}
 8007fc2:	4770      	bx	lr
 8007fc4:	20000260 	.word	0x20000260

08007fc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]

}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bc80      	pop	{r7}
 8007fd8:	4770      	bx	lr
	...

08007fdc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	d817      	bhi.n	8008020 <USBD_Get_USB_Status+0x44>
 8007ff0:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <USBD_Get_USB_Status+0x1c>)
 8007ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff6:	bf00      	nop
 8007ff8:	08008009 	.word	0x08008009
 8007ffc:	0800800f 	.word	0x0800800f
 8008000:	08008015 	.word	0x08008015
 8008004:	0800801b 	.word	0x0800801b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	73fb      	strb	r3, [r7, #15]
    break;
 800800c:	e00b      	b.n	8008026 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800800e:	2302      	movs	r3, #2
 8008010:	73fb      	strb	r3, [r7, #15]
    break;
 8008012:	e008      	b.n	8008026 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008014:	2301      	movs	r3, #1
 8008016:	73fb      	strb	r3, [r7, #15]
    break;
 8008018:	e005      	b.n	8008026 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800801a:	2302      	movs	r3, #2
 800801c:	73fb      	strb	r3, [r7, #15]
    break;
 800801e:	e002      	b.n	8008026 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008020:	2302      	movs	r3, #2
 8008022:	73fb      	strb	r3, [r7, #15]
    break;
 8008024:	bf00      	nop
  }
  return usb_status;
 8008026:	7bfb      	ldrb	r3, [r7, #15]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	bc80      	pop	{r7}
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop

08008034 <__errno>:
 8008034:	4b01      	ldr	r3, [pc, #4]	; (800803c <__errno+0x8>)
 8008036:	6818      	ldr	r0, [r3, #0]
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	200000dc 	.word	0x200000dc

08008040 <__libc_init_array>:
 8008040:	b570      	push	{r4, r5, r6, lr}
 8008042:	2500      	movs	r5, #0
 8008044:	4e0c      	ldr	r6, [pc, #48]	; (8008078 <__libc_init_array+0x38>)
 8008046:	4c0d      	ldr	r4, [pc, #52]	; (800807c <__libc_init_array+0x3c>)
 8008048:	1ba4      	subs	r4, r4, r6
 800804a:	10a4      	asrs	r4, r4, #2
 800804c:	42a5      	cmp	r5, r4
 800804e:	d109      	bne.n	8008064 <__libc_init_array+0x24>
 8008050:	f000 fc34 	bl	80088bc <_init>
 8008054:	2500      	movs	r5, #0
 8008056:	4e0a      	ldr	r6, [pc, #40]	; (8008080 <__libc_init_array+0x40>)
 8008058:	4c0a      	ldr	r4, [pc, #40]	; (8008084 <__libc_init_array+0x44>)
 800805a:	1ba4      	subs	r4, r4, r6
 800805c:	10a4      	asrs	r4, r4, #2
 800805e:	42a5      	cmp	r5, r4
 8008060:	d105      	bne.n	800806e <__libc_init_array+0x2e>
 8008062:	bd70      	pop	{r4, r5, r6, pc}
 8008064:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008068:	4798      	blx	r3
 800806a:	3501      	adds	r5, #1
 800806c:	e7ee      	b.n	800804c <__libc_init_array+0xc>
 800806e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008072:	4798      	blx	r3
 8008074:	3501      	adds	r5, #1
 8008076:	e7f2      	b.n	800805e <__libc_init_array+0x1e>
 8008078:	08008a08 	.word	0x08008a08
 800807c:	08008a08 	.word	0x08008a08
 8008080:	08008a08 	.word	0x08008a08
 8008084:	08008a0c 	.word	0x08008a0c

08008088 <memset>:
 8008088:	4603      	mov	r3, r0
 800808a:	4402      	add	r2, r0
 800808c:	4293      	cmp	r3, r2
 800808e:	d100      	bne.n	8008092 <memset+0xa>
 8008090:	4770      	bx	lr
 8008092:	f803 1b01 	strb.w	r1, [r3], #1
 8008096:	e7f9      	b.n	800808c <memset+0x4>

08008098 <siprintf>:
 8008098:	b40e      	push	{r1, r2, r3}
 800809a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800809e:	b500      	push	{lr}
 80080a0:	b09c      	sub	sp, #112	; 0x70
 80080a2:	ab1d      	add	r3, sp, #116	; 0x74
 80080a4:	9002      	str	r0, [sp, #8]
 80080a6:	9006      	str	r0, [sp, #24]
 80080a8:	9107      	str	r1, [sp, #28]
 80080aa:	9104      	str	r1, [sp, #16]
 80080ac:	4808      	ldr	r0, [pc, #32]	; (80080d0 <siprintf+0x38>)
 80080ae:	4909      	ldr	r1, [pc, #36]	; (80080d4 <siprintf+0x3c>)
 80080b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80080b4:	9105      	str	r1, [sp, #20]
 80080b6:	6800      	ldr	r0, [r0, #0]
 80080b8:	a902      	add	r1, sp, #8
 80080ba:	9301      	str	r3, [sp, #4]
 80080bc:	f000 f866 	bl	800818c <_svfiprintf_r>
 80080c0:	2200      	movs	r2, #0
 80080c2:	9b02      	ldr	r3, [sp, #8]
 80080c4:	701a      	strb	r2, [r3, #0]
 80080c6:	b01c      	add	sp, #112	; 0x70
 80080c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080cc:	b003      	add	sp, #12
 80080ce:	4770      	bx	lr
 80080d0:	200000dc 	.word	0x200000dc
 80080d4:	ffff0208 	.word	0xffff0208

080080d8 <__ssputs_r>:
 80080d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080dc:	688e      	ldr	r6, [r1, #8]
 80080de:	4682      	mov	sl, r0
 80080e0:	429e      	cmp	r6, r3
 80080e2:	460c      	mov	r4, r1
 80080e4:	4690      	mov	r8, r2
 80080e6:	4699      	mov	r9, r3
 80080e8:	d837      	bhi.n	800815a <__ssputs_r+0x82>
 80080ea:	898a      	ldrh	r2, [r1, #12]
 80080ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080f0:	d031      	beq.n	8008156 <__ssputs_r+0x7e>
 80080f2:	2302      	movs	r3, #2
 80080f4:	6825      	ldr	r5, [r4, #0]
 80080f6:	6909      	ldr	r1, [r1, #16]
 80080f8:	1a6f      	subs	r7, r5, r1
 80080fa:	6965      	ldr	r5, [r4, #20]
 80080fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008100:	fb95 f5f3 	sdiv	r5, r5, r3
 8008104:	f109 0301 	add.w	r3, r9, #1
 8008108:	443b      	add	r3, r7
 800810a:	429d      	cmp	r5, r3
 800810c:	bf38      	it	cc
 800810e:	461d      	movcc	r5, r3
 8008110:	0553      	lsls	r3, r2, #21
 8008112:	d530      	bpl.n	8008176 <__ssputs_r+0x9e>
 8008114:	4629      	mov	r1, r5
 8008116:	f000 fb37 	bl	8008788 <_malloc_r>
 800811a:	4606      	mov	r6, r0
 800811c:	b950      	cbnz	r0, 8008134 <__ssputs_r+0x5c>
 800811e:	230c      	movs	r3, #12
 8008120:	f04f 30ff 	mov.w	r0, #4294967295
 8008124:	f8ca 3000 	str.w	r3, [sl]
 8008128:	89a3      	ldrh	r3, [r4, #12]
 800812a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800812e:	81a3      	strh	r3, [r4, #12]
 8008130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008134:	463a      	mov	r2, r7
 8008136:	6921      	ldr	r1, [r4, #16]
 8008138:	f000 fab6 	bl	80086a8 <memcpy>
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008146:	81a3      	strh	r3, [r4, #12]
 8008148:	6126      	str	r6, [r4, #16]
 800814a:	443e      	add	r6, r7
 800814c:	6026      	str	r6, [r4, #0]
 800814e:	464e      	mov	r6, r9
 8008150:	6165      	str	r5, [r4, #20]
 8008152:	1bed      	subs	r5, r5, r7
 8008154:	60a5      	str	r5, [r4, #8]
 8008156:	454e      	cmp	r6, r9
 8008158:	d900      	bls.n	800815c <__ssputs_r+0x84>
 800815a:	464e      	mov	r6, r9
 800815c:	4632      	mov	r2, r6
 800815e:	4641      	mov	r1, r8
 8008160:	6820      	ldr	r0, [r4, #0]
 8008162:	f000 faac 	bl	80086be <memmove>
 8008166:	68a3      	ldr	r3, [r4, #8]
 8008168:	2000      	movs	r0, #0
 800816a:	1b9b      	subs	r3, r3, r6
 800816c:	60a3      	str	r3, [r4, #8]
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	441e      	add	r6, r3
 8008172:	6026      	str	r6, [r4, #0]
 8008174:	e7dc      	b.n	8008130 <__ssputs_r+0x58>
 8008176:	462a      	mov	r2, r5
 8008178:	f000 fb60 	bl	800883c <_realloc_r>
 800817c:	4606      	mov	r6, r0
 800817e:	2800      	cmp	r0, #0
 8008180:	d1e2      	bne.n	8008148 <__ssputs_r+0x70>
 8008182:	6921      	ldr	r1, [r4, #16]
 8008184:	4650      	mov	r0, sl
 8008186:	f000 fab3 	bl	80086f0 <_free_r>
 800818a:	e7c8      	b.n	800811e <__ssputs_r+0x46>

0800818c <_svfiprintf_r>:
 800818c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008190:	461d      	mov	r5, r3
 8008192:	898b      	ldrh	r3, [r1, #12]
 8008194:	b09d      	sub	sp, #116	; 0x74
 8008196:	061f      	lsls	r7, r3, #24
 8008198:	4680      	mov	r8, r0
 800819a:	460c      	mov	r4, r1
 800819c:	4616      	mov	r6, r2
 800819e:	d50f      	bpl.n	80081c0 <_svfiprintf_r+0x34>
 80081a0:	690b      	ldr	r3, [r1, #16]
 80081a2:	b96b      	cbnz	r3, 80081c0 <_svfiprintf_r+0x34>
 80081a4:	2140      	movs	r1, #64	; 0x40
 80081a6:	f000 faef 	bl	8008788 <_malloc_r>
 80081aa:	6020      	str	r0, [r4, #0]
 80081ac:	6120      	str	r0, [r4, #16]
 80081ae:	b928      	cbnz	r0, 80081bc <_svfiprintf_r+0x30>
 80081b0:	230c      	movs	r3, #12
 80081b2:	f8c8 3000 	str.w	r3, [r8]
 80081b6:	f04f 30ff 	mov.w	r0, #4294967295
 80081ba:	e0c8      	b.n	800834e <_svfiprintf_r+0x1c2>
 80081bc:	2340      	movs	r3, #64	; 0x40
 80081be:	6163      	str	r3, [r4, #20]
 80081c0:	2300      	movs	r3, #0
 80081c2:	9309      	str	r3, [sp, #36]	; 0x24
 80081c4:	2320      	movs	r3, #32
 80081c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081ca:	2330      	movs	r3, #48	; 0x30
 80081cc:	f04f 0b01 	mov.w	fp, #1
 80081d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081d4:	9503      	str	r5, [sp, #12]
 80081d6:	4637      	mov	r7, r6
 80081d8:	463d      	mov	r5, r7
 80081da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80081de:	b10b      	cbz	r3, 80081e4 <_svfiprintf_r+0x58>
 80081e0:	2b25      	cmp	r3, #37	; 0x25
 80081e2:	d13e      	bne.n	8008262 <_svfiprintf_r+0xd6>
 80081e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80081e8:	d00b      	beq.n	8008202 <_svfiprintf_r+0x76>
 80081ea:	4653      	mov	r3, sl
 80081ec:	4632      	mov	r2, r6
 80081ee:	4621      	mov	r1, r4
 80081f0:	4640      	mov	r0, r8
 80081f2:	f7ff ff71 	bl	80080d8 <__ssputs_r>
 80081f6:	3001      	adds	r0, #1
 80081f8:	f000 80a4 	beq.w	8008344 <_svfiprintf_r+0x1b8>
 80081fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fe:	4453      	add	r3, sl
 8008200:	9309      	str	r3, [sp, #36]	; 0x24
 8008202:	783b      	ldrb	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 809d 	beq.w	8008344 <_svfiprintf_r+0x1b8>
 800820a:	2300      	movs	r3, #0
 800820c:	f04f 32ff 	mov.w	r2, #4294967295
 8008210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	9307      	str	r3, [sp, #28]
 8008218:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800821c:	931a      	str	r3, [sp, #104]	; 0x68
 800821e:	462f      	mov	r7, r5
 8008220:	2205      	movs	r2, #5
 8008222:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008226:	4850      	ldr	r0, [pc, #320]	; (8008368 <_svfiprintf_r+0x1dc>)
 8008228:	f000 fa30 	bl	800868c <memchr>
 800822c:	9b04      	ldr	r3, [sp, #16]
 800822e:	b9d0      	cbnz	r0, 8008266 <_svfiprintf_r+0xda>
 8008230:	06d9      	lsls	r1, r3, #27
 8008232:	bf44      	itt	mi
 8008234:	2220      	movmi	r2, #32
 8008236:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800823a:	071a      	lsls	r2, r3, #28
 800823c:	bf44      	itt	mi
 800823e:	222b      	movmi	r2, #43	; 0x2b
 8008240:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008244:	782a      	ldrb	r2, [r5, #0]
 8008246:	2a2a      	cmp	r2, #42	; 0x2a
 8008248:	d015      	beq.n	8008276 <_svfiprintf_r+0xea>
 800824a:	462f      	mov	r7, r5
 800824c:	2000      	movs	r0, #0
 800824e:	250a      	movs	r5, #10
 8008250:	9a07      	ldr	r2, [sp, #28]
 8008252:	4639      	mov	r1, r7
 8008254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008258:	3b30      	subs	r3, #48	; 0x30
 800825a:	2b09      	cmp	r3, #9
 800825c:	d94d      	bls.n	80082fa <_svfiprintf_r+0x16e>
 800825e:	b1b8      	cbz	r0, 8008290 <_svfiprintf_r+0x104>
 8008260:	e00f      	b.n	8008282 <_svfiprintf_r+0xf6>
 8008262:	462f      	mov	r7, r5
 8008264:	e7b8      	b.n	80081d8 <_svfiprintf_r+0x4c>
 8008266:	4a40      	ldr	r2, [pc, #256]	; (8008368 <_svfiprintf_r+0x1dc>)
 8008268:	463d      	mov	r5, r7
 800826a:	1a80      	subs	r0, r0, r2
 800826c:	fa0b f000 	lsl.w	r0, fp, r0
 8008270:	4318      	orrs	r0, r3
 8008272:	9004      	str	r0, [sp, #16]
 8008274:	e7d3      	b.n	800821e <_svfiprintf_r+0x92>
 8008276:	9a03      	ldr	r2, [sp, #12]
 8008278:	1d11      	adds	r1, r2, #4
 800827a:	6812      	ldr	r2, [r2, #0]
 800827c:	9103      	str	r1, [sp, #12]
 800827e:	2a00      	cmp	r2, #0
 8008280:	db01      	blt.n	8008286 <_svfiprintf_r+0xfa>
 8008282:	9207      	str	r2, [sp, #28]
 8008284:	e004      	b.n	8008290 <_svfiprintf_r+0x104>
 8008286:	4252      	negs	r2, r2
 8008288:	f043 0302 	orr.w	r3, r3, #2
 800828c:	9207      	str	r2, [sp, #28]
 800828e:	9304      	str	r3, [sp, #16]
 8008290:	783b      	ldrb	r3, [r7, #0]
 8008292:	2b2e      	cmp	r3, #46	; 0x2e
 8008294:	d10c      	bne.n	80082b0 <_svfiprintf_r+0x124>
 8008296:	787b      	ldrb	r3, [r7, #1]
 8008298:	2b2a      	cmp	r3, #42	; 0x2a
 800829a:	d133      	bne.n	8008304 <_svfiprintf_r+0x178>
 800829c:	9b03      	ldr	r3, [sp, #12]
 800829e:	3702      	adds	r7, #2
 80082a0:	1d1a      	adds	r2, r3, #4
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	9203      	str	r2, [sp, #12]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	bfb8      	it	lt
 80082aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80082ae:	9305      	str	r3, [sp, #20]
 80082b0:	4d2e      	ldr	r5, [pc, #184]	; (800836c <_svfiprintf_r+0x1e0>)
 80082b2:	2203      	movs	r2, #3
 80082b4:	7839      	ldrb	r1, [r7, #0]
 80082b6:	4628      	mov	r0, r5
 80082b8:	f000 f9e8 	bl	800868c <memchr>
 80082bc:	b138      	cbz	r0, 80082ce <_svfiprintf_r+0x142>
 80082be:	2340      	movs	r3, #64	; 0x40
 80082c0:	1b40      	subs	r0, r0, r5
 80082c2:	fa03 f000 	lsl.w	r0, r3, r0
 80082c6:	9b04      	ldr	r3, [sp, #16]
 80082c8:	3701      	adds	r7, #1
 80082ca:	4303      	orrs	r3, r0
 80082cc:	9304      	str	r3, [sp, #16]
 80082ce:	7839      	ldrb	r1, [r7, #0]
 80082d0:	2206      	movs	r2, #6
 80082d2:	4827      	ldr	r0, [pc, #156]	; (8008370 <_svfiprintf_r+0x1e4>)
 80082d4:	1c7e      	adds	r6, r7, #1
 80082d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082da:	f000 f9d7 	bl	800868c <memchr>
 80082de:	2800      	cmp	r0, #0
 80082e0:	d038      	beq.n	8008354 <_svfiprintf_r+0x1c8>
 80082e2:	4b24      	ldr	r3, [pc, #144]	; (8008374 <_svfiprintf_r+0x1e8>)
 80082e4:	bb13      	cbnz	r3, 800832c <_svfiprintf_r+0x1a0>
 80082e6:	9b03      	ldr	r3, [sp, #12]
 80082e8:	3307      	adds	r3, #7
 80082ea:	f023 0307 	bic.w	r3, r3, #7
 80082ee:	3308      	adds	r3, #8
 80082f0:	9303      	str	r3, [sp, #12]
 80082f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f4:	444b      	add	r3, r9
 80082f6:	9309      	str	r3, [sp, #36]	; 0x24
 80082f8:	e76d      	b.n	80081d6 <_svfiprintf_r+0x4a>
 80082fa:	fb05 3202 	mla	r2, r5, r2, r3
 80082fe:	2001      	movs	r0, #1
 8008300:	460f      	mov	r7, r1
 8008302:	e7a6      	b.n	8008252 <_svfiprintf_r+0xc6>
 8008304:	2300      	movs	r3, #0
 8008306:	250a      	movs	r5, #10
 8008308:	4619      	mov	r1, r3
 800830a:	3701      	adds	r7, #1
 800830c:	9305      	str	r3, [sp, #20]
 800830e:	4638      	mov	r0, r7
 8008310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008314:	3a30      	subs	r2, #48	; 0x30
 8008316:	2a09      	cmp	r2, #9
 8008318:	d903      	bls.n	8008322 <_svfiprintf_r+0x196>
 800831a:	2b00      	cmp	r3, #0
 800831c:	d0c8      	beq.n	80082b0 <_svfiprintf_r+0x124>
 800831e:	9105      	str	r1, [sp, #20]
 8008320:	e7c6      	b.n	80082b0 <_svfiprintf_r+0x124>
 8008322:	fb05 2101 	mla	r1, r5, r1, r2
 8008326:	2301      	movs	r3, #1
 8008328:	4607      	mov	r7, r0
 800832a:	e7f0      	b.n	800830e <_svfiprintf_r+0x182>
 800832c:	ab03      	add	r3, sp, #12
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	4622      	mov	r2, r4
 8008332:	4b11      	ldr	r3, [pc, #68]	; (8008378 <_svfiprintf_r+0x1ec>)
 8008334:	a904      	add	r1, sp, #16
 8008336:	4640      	mov	r0, r8
 8008338:	f3af 8000 	nop.w
 800833c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008340:	4681      	mov	r9, r0
 8008342:	d1d6      	bne.n	80082f2 <_svfiprintf_r+0x166>
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	065b      	lsls	r3, r3, #25
 8008348:	f53f af35 	bmi.w	80081b6 <_svfiprintf_r+0x2a>
 800834c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800834e:	b01d      	add	sp, #116	; 0x74
 8008350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008354:	ab03      	add	r3, sp, #12
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	4622      	mov	r2, r4
 800835a:	4b07      	ldr	r3, [pc, #28]	; (8008378 <_svfiprintf_r+0x1ec>)
 800835c:	a904      	add	r1, sp, #16
 800835e:	4640      	mov	r0, r8
 8008360:	f000 f882 	bl	8008468 <_printf_i>
 8008364:	e7ea      	b.n	800833c <_svfiprintf_r+0x1b0>
 8008366:	bf00      	nop
 8008368:	080089cc 	.word	0x080089cc
 800836c:	080089d2 	.word	0x080089d2
 8008370:	080089d6 	.word	0x080089d6
 8008374:	00000000 	.word	0x00000000
 8008378:	080080d9 	.word	0x080080d9

0800837c <_printf_common>:
 800837c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008380:	4691      	mov	r9, r2
 8008382:	461f      	mov	r7, r3
 8008384:	688a      	ldr	r2, [r1, #8]
 8008386:	690b      	ldr	r3, [r1, #16]
 8008388:	4606      	mov	r6, r0
 800838a:	4293      	cmp	r3, r2
 800838c:	bfb8      	it	lt
 800838e:	4613      	movlt	r3, r2
 8008390:	f8c9 3000 	str.w	r3, [r9]
 8008394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008398:	460c      	mov	r4, r1
 800839a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800839e:	b112      	cbz	r2, 80083a6 <_printf_common+0x2a>
 80083a0:	3301      	adds	r3, #1
 80083a2:	f8c9 3000 	str.w	r3, [r9]
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	0699      	lsls	r1, r3, #26
 80083aa:	bf42      	ittt	mi
 80083ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80083b0:	3302      	addmi	r3, #2
 80083b2:	f8c9 3000 	strmi.w	r3, [r9]
 80083b6:	6825      	ldr	r5, [r4, #0]
 80083b8:	f015 0506 	ands.w	r5, r5, #6
 80083bc:	d107      	bne.n	80083ce <_printf_common+0x52>
 80083be:	f104 0a19 	add.w	sl, r4, #25
 80083c2:	68e3      	ldr	r3, [r4, #12]
 80083c4:	f8d9 2000 	ldr.w	r2, [r9]
 80083c8:	1a9b      	subs	r3, r3, r2
 80083ca:	42ab      	cmp	r3, r5
 80083cc:	dc29      	bgt.n	8008422 <_printf_common+0xa6>
 80083ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80083d2:	6822      	ldr	r2, [r4, #0]
 80083d4:	3300      	adds	r3, #0
 80083d6:	bf18      	it	ne
 80083d8:	2301      	movne	r3, #1
 80083da:	0692      	lsls	r2, r2, #26
 80083dc:	d42e      	bmi.n	800843c <_printf_common+0xc0>
 80083de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083e2:	4639      	mov	r1, r7
 80083e4:	4630      	mov	r0, r6
 80083e6:	47c0      	blx	r8
 80083e8:	3001      	adds	r0, #1
 80083ea:	d021      	beq.n	8008430 <_printf_common+0xb4>
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	68e5      	ldr	r5, [r4, #12]
 80083f0:	f003 0306 	and.w	r3, r3, #6
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	bf18      	it	ne
 80083f8:	2500      	movne	r5, #0
 80083fa:	f8d9 2000 	ldr.w	r2, [r9]
 80083fe:	f04f 0900 	mov.w	r9, #0
 8008402:	bf08      	it	eq
 8008404:	1aad      	subeq	r5, r5, r2
 8008406:	68a3      	ldr	r3, [r4, #8]
 8008408:	6922      	ldr	r2, [r4, #16]
 800840a:	bf08      	it	eq
 800840c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008410:	4293      	cmp	r3, r2
 8008412:	bfc4      	itt	gt
 8008414:	1a9b      	subgt	r3, r3, r2
 8008416:	18ed      	addgt	r5, r5, r3
 8008418:	341a      	adds	r4, #26
 800841a:	454d      	cmp	r5, r9
 800841c:	d11a      	bne.n	8008454 <_printf_common+0xd8>
 800841e:	2000      	movs	r0, #0
 8008420:	e008      	b.n	8008434 <_printf_common+0xb8>
 8008422:	2301      	movs	r3, #1
 8008424:	4652      	mov	r2, sl
 8008426:	4639      	mov	r1, r7
 8008428:	4630      	mov	r0, r6
 800842a:	47c0      	blx	r8
 800842c:	3001      	adds	r0, #1
 800842e:	d103      	bne.n	8008438 <_printf_common+0xbc>
 8008430:	f04f 30ff 	mov.w	r0, #4294967295
 8008434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008438:	3501      	adds	r5, #1
 800843a:	e7c2      	b.n	80083c2 <_printf_common+0x46>
 800843c:	2030      	movs	r0, #48	; 0x30
 800843e:	18e1      	adds	r1, r4, r3
 8008440:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008444:	1c5a      	adds	r2, r3, #1
 8008446:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800844a:	4422      	add	r2, r4
 800844c:	3302      	adds	r3, #2
 800844e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008452:	e7c4      	b.n	80083de <_printf_common+0x62>
 8008454:	2301      	movs	r3, #1
 8008456:	4622      	mov	r2, r4
 8008458:	4639      	mov	r1, r7
 800845a:	4630      	mov	r0, r6
 800845c:	47c0      	blx	r8
 800845e:	3001      	adds	r0, #1
 8008460:	d0e6      	beq.n	8008430 <_printf_common+0xb4>
 8008462:	f109 0901 	add.w	r9, r9, #1
 8008466:	e7d8      	b.n	800841a <_printf_common+0x9e>

08008468 <_printf_i>:
 8008468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800846c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008470:	460c      	mov	r4, r1
 8008472:	7e09      	ldrb	r1, [r1, #24]
 8008474:	b085      	sub	sp, #20
 8008476:	296e      	cmp	r1, #110	; 0x6e
 8008478:	4617      	mov	r7, r2
 800847a:	4606      	mov	r6, r0
 800847c:	4698      	mov	r8, r3
 800847e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008480:	f000 80b3 	beq.w	80085ea <_printf_i+0x182>
 8008484:	d822      	bhi.n	80084cc <_printf_i+0x64>
 8008486:	2963      	cmp	r1, #99	; 0x63
 8008488:	d036      	beq.n	80084f8 <_printf_i+0x90>
 800848a:	d80a      	bhi.n	80084a2 <_printf_i+0x3a>
 800848c:	2900      	cmp	r1, #0
 800848e:	f000 80b9 	beq.w	8008604 <_printf_i+0x19c>
 8008492:	2958      	cmp	r1, #88	; 0x58
 8008494:	f000 8083 	beq.w	800859e <_printf_i+0x136>
 8008498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800849c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80084a0:	e032      	b.n	8008508 <_printf_i+0xa0>
 80084a2:	2964      	cmp	r1, #100	; 0x64
 80084a4:	d001      	beq.n	80084aa <_printf_i+0x42>
 80084a6:	2969      	cmp	r1, #105	; 0x69
 80084a8:	d1f6      	bne.n	8008498 <_printf_i+0x30>
 80084aa:	6820      	ldr	r0, [r4, #0]
 80084ac:	6813      	ldr	r3, [r2, #0]
 80084ae:	0605      	lsls	r5, r0, #24
 80084b0:	f103 0104 	add.w	r1, r3, #4
 80084b4:	d52a      	bpl.n	800850c <_printf_i+0xa4>
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6011      	str	r1, [r2, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	da03      	bge.n	80084c6 <_printf_i+0x5e>
 80084be:	222d      	movs	r2, #45	; 0x2d
 80084c0:	425b      	negs	r3, r3
 80084c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80084c6:	486f      	ldr	r0, [pc, #444]	; (8008684 <_printf_i+0x21c>)
 80084c8:	220a      	movs	r2, #10
 80084ca:	e039      	b.n	8008540 <_printf_i+0xd8>
 80084cc:	2973      	cmp	r1, #115	; 0x73
 80084ce:	f000 809d 	beq.w	800860c <_printf_i+0x1a4>
 80084d2:	d808      	bhi.n	80084e6 <_printf_i+0x7e>
 80084d4:	296f      	cmp	r1, #111	; 0x6f
 80084d6:	d020      	beq.n	800851a <_printf_i+0xb2>
 80084d8:	2970      	cmp	r1, #112	; 0x70
 80084da:	d1dd      	bne.n	8008498 <_printf_i+0x30>
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	f043 0320 	orr.w	r3, r3, #32
 80084e2:	6023      	str	r3, [r4, #0]
 80084e4:	e003      	b.n	80084ee <_printf_i+0x86>
 80084e6:	2975      	cmp	r1, #117	; 0x75
 80084e8:	d017      	beq.n	800851a <_printf_i+0xb2>
 80084ea:	2978      	cmp	r1, #120	; 0x78
 80084ec:	d1d4      	bne.n	8008498 <_printf_i+0x30>
 80084ee:	2378      	movs	r3, #120	; 0x78
 80084f0:	4865      	ldr	r0, [pc, #404]	; (8008688 <_printf_i+0x220>)
 80084f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084f6:	e055      	b.n	80085a4 <_printf_i+0x13c>
 80084f8:	6813      	ldr	r3, [r2, #0]
 80084fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084fe:	1d19      	adds	r1, r3, #4
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6011      	str	r1, [r2, #0]
 8008504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008508:	2301      	movs	r3, #1
 800850a:	e08c      	b.n	8008626 <_printf_i+0x1be>
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008512:	6011      	str	r1, [r2, #0]
 8008514:	bf18      	it	ne
 8008516:	b21b      	sxthne	r3, r3
 8008518:	e7cf      	b.n	80084ba <_printf_i+0x52>
 800851a:	6813      	ldr	r3, [r2, #0]
 800851c:	6825      	ldr	r5, [r4, #0]
 800851e:	1d18      	adds	r0, r3, #4
 8008520:	6010      	str	r0, [r2, #0]
 8008522:	0628      	lsls	r0, r5, #24
 8008524:	d501      	bpl.n	800852a <_printf_i+0xc2>
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	e002      	b.n	8008530 <_printf_i+0xc8>
 800852a:	0668      	lsls	r0, r5, #25
 800852c:	d5fb      	bpl.n	8008526 <_printf_i+0xbe>
 800852e:	881b      	ldrh	r3, [r3, #0]
 8008530:	296f      	cmp	r1, #111	; 0x6f
 8008532:	bf14      	ite	ne
 8008534:	220a      	movne	r2, #10
 8008536:	2208      	moveq	r2, #8
 8008538:	4852      	ldr	r0, [pc, #328]	; (8008684 <_printf_i+0x21c>)
 800853a:	2100      	movs	r1, #0
 800853c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008540:	6865      	ldr	r5, [r4, #4]
 8008542:	2d00      	cmp	r5, #0
 8008544:	60a5      	str	r5, [r4, #8]
 8008546:	f2c0 8095 	blt.w	8008674 <_printf_i+0x20c>
 800854a:	6821      	ldr	r1, [r4, #0]
 800854c:	f021 0104 	bic.w	r1, r1, #4
 8008550:	6021      	str	r1, [r4, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d13d      	bne.n	80085d2 <_printf_i+0x16a>
 8008556:	2d00      	cmp	r5, #0
 8008558:	f040 808e 	bne.w	8008678 <_printf_i+0x210>
 800855c:	4665      	mov	r5, ip
 800855e:	2a08      	cmp	r2, #8
 8008560:	d10b      	bne.n	800857a <_printf_i+0x112>
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	07db      	lsls	r3, r3, #31
 8008566:	d508      	bpl.n	800857a <_printf_i+0x112>
 8008568:	6923      	ldr	r3, [r4, #16]
 800856a:	6862      	ldr	r2, [r4, #4]
 800856c:	429a      	cmp	r2, r3
 800856e:	bfde      	ittt	le
 8008570:	2330      	movle	r3, #48	; 0x30
 8008572:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008576:	f105 35ff 	addle.w	r5, r5, #4294967295
 800857a:	ebac 0305 	sub.w	r3, ip, r5
 800857e:	6123      	str	r3, [r4, #16]
 8008580:	f8cd 8000 	str.w	r8, [sp]
 8008584:	463b      	mov	r3, r7
 8008586:	aa03      	add	r2, sp, #12
 8008588:	4621      	mov	r1, r4
 800858a:	4630      	mov	r0, r6
 800858c:	f7ff fef6 	bl	800837c <_printf_common>
 8008590:	3001      	adds	r0, #1
 8008592:	d14d      	bne.n	8008630 <_printf_i+0x1c8>
 8008594:	f04f 30ff 	mov.w	r0, #4294967295
 8008598:	b005      	add	sp, #20
 800859a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800859e:	4839      	ldr	r0, [pc, #228]	; (8008684 <_printf_i+0x21c>)
 80085a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80085a4:	6813      	ldr	r3, [r2, #0]
 80085a6:	6821      	ldr	r1, [r4, #0]
 80085a8:	1d1d      	adds	r5, r3, #4
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6015      	str	r5, [r2, #0]
 80085ae:	060a      	lsls	r2, r1, #24
 80085b0:	d50b      	bpl.n	80085ca <_printf_i+0x162>
 80085b2:	07ca      	lsls	r2, r1, #31
 80085b4:	bf44      	itt	mi
 80085b6:	f041 0120 	orrmi.w	r1, r1, #32
 80085ba:	6021      	strmi	r1, [r4, #0]
 80085bc:	b91b      	cbnz	r3, 80085c6 <_printf_i+0x15e>
 80085be:	6822      	ldr	r2, [r4, #0]
 80085c0:	f022 0220 	bic.w	r2, r2, #32
 80085c4:	6022      	str	r2, [r4, #0]
 80085c6:	2210      	movs	r2, #16
 80085c8:	e7b7      	b.n	800853a <_printf_i+0xd2>
 80085ca:	064d      	lsls	r5, r1, #25
 80085cc:	bf48      	it	mi
 80085ce:	b29b      	uxthmi	r3, r3
 80085d0:	e7ef      	b.n	80085b2 <_printf_i+0x14a>
 80085d2:	4665      	mov	r5, ip
 80085d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80085d8:	fb02 3311 	mls	r3, r2, r1, r3
 80085dc:	5cc3      	ldrb	r3, [r0, r3]
 80085de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80085e2:	460b      	mov	r3, r1
 80085e4:	2900      	cmp	r1, #0
 80085e6:	d1f5      	bne.n	80085d4 <_printf_i+0x16c>
 80085e8:	e7b9      	b.n	800855e <_printf_i+0xf6>
 80085ea:	6813      	ldr	r3, [r2, #0]
 80085ec:	6825      	ldr	r5, [r4, #0]
 80085ee:	1d18      	adds	r0, r3, #4
 80085f0:	6961      	ldr	r1, [r4, #20]
 80085f2:	6010      	str	r0, [r2, #0]
 80085f4:	0628      	lsls	r0, r5, #24
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	d501      	bpl.n	80085fe <_printf_i+0x196>
 80085fa:	6019      	str	r1, [r3, #0]
 80085fc:	e002      	b.n	8008604 <_printf_i+0x19c>
 80085fe:	066a      	lsls	r2, r5, #25
 8008600:	d5fb      	bpl.n	80085fa <_printf_i+0x192>
 8008602:	8019      	strh	r1, [r3, #0]
 8008604:	2300      	movs	r3, #0
 8008606:	4665      	mov	r5, ip
 8008608:	6123      	str	r3, [r4, #16]
 800860a:	e7b9      	b.n	8008580 <_printf_i+0x118>
 800860c:	6813      	ldr	r3, [r2, #0]
 800860e:	1d19      	adds	r1, r3, #4
 8008610:	6011      	str	r1, [r2, #0]
 8008612:	681d      	ldr	r5, [r3, #0]
 8008614:	6862      	ldr	r2, [r4, #4]
 8008616:	2100      	movs	r1, #0
 8008618:	4628      	mov	r0, r5
 800861a:	f000 f837 	bl	800868c <memchr>
 800861e:	b108      	cbz	r0, 8008624 <_printf_i+0x1bc>
 8008620:	1b40      	subs	r0, r0, r5
 8008622:	6060      	str	r0, [r4, #4]
 8008624:	6863      	ldr	r3, [r4, #4]
 8008626:	6123      	str	r3, [r4, #16]
 8008628:	2300      	movs	r3, #0
 800862a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800862e:	e7a7      	b.n	8008580 <_printf_i+0x118>
 8008630:	6923      	ldr	r3, [r4, #16]
 8008632:	462a      	mov	r2, r5
 8008634:	4639      	mov	r1, r7
 8008636:	4630      	mov	r0, r6
 8008638:	47c0      	blx	r8
 800863a:	3001      	adds	r0, #1
 800863c:	d0aa      	beq.n	8008594 <_printf_i+0x12c>
 800863e:	6823      	ldr	r3, [r4, #0]
 8008640:	079b      	lsls	r3, r3, #30
 8008642:	d413      	bmi.n	800866c <_printf_i+0x204>
 8008644:	68e0      	ldr	r0, [r4, #12]
 8008646:	9b03      	ldr	r3, [sp, #12]
 8008648:	4298      	cmp	r0, r3
 800864a:	bfb8      	it	lt
 800864c:	4618      	movlt	r0, r3
 800864e:	e7a3      	b.n	8008598 <_printf_i+0x130>
 8008650:	2301      	movs	r3, #1
 8008652:	464a      	mov	r2, r9
 8008654:	4639      	mov	r1, r7
 8008656:	4630      	mov	r0, r6
 8008658:	47c0      	blx	r8
 800865a:	3001      	adds	r0, #1
 800865c:	d09a      	beq.n	8008594 <_printf_i+0x12c>
 800865e:	3501      	adds	r5, #1
 8008660:	68e3      	ldr	r3, [r4, #12]
 8008662:	9a03      	ldr	r2, [sp, #12]
 8008664:	1a9b      	subs	r3, r3, r2
 8008666:	42ab      	cmp	r3, r5
 8008668:	dcf2      	bgt.n	8008650 <_printf_i+0x1e8>
 800866a:	e7eb      	b.n	8008644 <_printf_i+0x1dc>
 800866c:	2500      	movs	r5, #0
 800866e:	f104 0919 	add.w	r9, r4, #25
 8008672:	e7f5      	b.n	8008660 <_printf_i+0x1f8>
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1ac      	bne.n	80085d2 <_printf_i+0x16a>
 8008678:	7803      	ldrb	r3, [r0, #0]
 800867a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800867e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008682:	e76c      	b.n	800855e <_printf_i+0xf6>
 8008684:	080089dd 	.word	0x080089dd
 8008688:	080089ee 	.word	0x080089ee

0800868c <memchr>:
 800868c:	b510      	push	{r4, lr}
 800868e:	b2c9      	uxtb	r1, r1
 8008690:	4402      	add	r2, r0
 8008692:	4290      	cmp	r0, r2
 8008694:	4603      	mov	r3, r0
 8008696:	d101      	bne.n	800869c <memchr+0x10>
 8008698:	2300      	movs	r3, #0
 800869a:	e003      	b.n	80086a4 <memchr+0x18>
 800869c:	781c      	ldrb	r4, [r3, #0]
 800869e:	3001      	adds	r0, #1
 80086a0:	428c      	cmp	r4, r1
 80086a2:	d1f6      	bne.n	8008692 <memchr+0x6>
 80086a4:	4618      	mov	r0, r3
 80086a6:	bd10      	pop	{r4, pc}

080086a8 <memcpy>:
 80086a8:	b510      	push	{r4, lr}
 80086aa:	1e43      	subs	r3, r0, #1
 80086ac:	440a      	add	r2, r1
 80086ae:	4291      	cmp	r1, r2
 80086b0:	d100      	bne.n	80086b4 <memcpy+0xc>
 80086b2:	bd10      	pop	{r4, pc}
 80086b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086bc:	e7f7      	b.n	80086ae <memcpy+0x6>

080086be <memmove>:
 80086be:	4288      	cmp	r0, r1
 80086c0:	b510      	push	{r4, lr}
 80086c2:	eb01 0302 	add.w	r3, r1, r2
 80086c6:	d807      	bhi.n	80086d8 <memmove+0x1a>
 80086c8:	1e42      	subs	r2, r0, #1
 80086ca:	4299      	cmp	r1, r3
 80086cc:	d00a      	beq.n	80086e4 <memmove+0x26>
 80086ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086d2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80086d6:	e7f8      	b.n	80086ca <memmove+0xc>
 80086d8:	4283      	cmp	r3, r0
 80086da:	d9f5      	bls.n	80086c8 <memmove+0xa>
 80086dc:	1881      	adds	r1, r0, r2
 80086de:	1ad2      	subs	r2, r2, r3
 80086e0:	42d3      	cmn	r3, r2
 80086e2:	d100      	bne.n	80086e6 <memmove+0x28>
 80086e4:	bd10      	pop	{r4, pc}
 80086e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80086ee:	e7f7      	b.n	80086e0 <memmove+0x22>

080086f0 <_free_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	4605      	mov	r5, r0
 80086f4:	2900      	cmp	r1, #0
 80086f6:	d043      	beq.n	8008780 <_free_r+0x90>
 80086f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086fc:	1f0c      	subs	r4, r1, #4
 80086fe:	2b00      	cmp	r3, #0
 8008700:	bfb8      	it	lt
 8008702:	18e4      	addlt	r4, r4, r3
 8008704:	f000 f8d0 	bl	80088a8 <__malloc_lock>
 8008708:	4a1e      	ldr	r2, [pc, #120]	; (8008784 <_free_r+0x94>)
 800870a:	6813      	ldr	r3, [r2, #0]
 800870c:	4610      	mov	r0, r2
 800870e:	b933      	cbnz	r3, 800871e <_free_r+0x2e>
 8008710:	6063      	str	r3, [r4, #4]
 8008712:	6014      	str	r4, [r2, #0]
 8008714:	4628      	mov	r0, r5
 8008716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800871a:	f000 b8c6 	b.w	80088aa <__malloc_unlock>
 800871e:	42a3      	cmp	r3, r4
 8008720:	d90b      	bls.n	800873a <_free_r+0x4a>
 8008722:	6821      	ldr	r1, [r4, #0]
 8008724:	1862      	adds	r2, r4, r1
 8008726:	4293      	cmp	r3, r2
 8008728:	bf01      	itttt	eq
 800872a:	681a      	ldreq	r2, [r3, #0]
 800872c:	685b      	ldreq	r3, [r3, #4]
 800872e:	1852      	addeq	r2, r2, r1
 8008730:	6022      	streq	r2, [r4, #0]
 8008732:	6063      	str	r3, [r4, #4]
 8008734:	6004      	str	r4, [r0, #0]
 8008736:	e7ed      	b.n	8008714 <_free_r+0x24>
 8008738:	4613      	mov	r3, r2
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	b10a      	cbz	r2, 8008742 <_free_r+0x52>
 800873e:	42a2      	cmp	r2, r4
 8008740:	d9fa      	bls.n	8008738 <_free_r+0x48>
 8008742:	6819      	ldr	r1, [r3, #0]
 8008744:	1858      	adds	r0, r3, r1
 8008746:	42a0      	cmp	r0, r4
 8008748:	d10b      	bne.n	8008762 <_free_r+0x72>
 800874a:	6820      	ldr	r0, [r4, #0]
 800874c:	4401      	add	r1, r0
 800874e:	1858      	adds	r0, r3, r1
 8008750:	4282      	cmp	r2, r0
 8008752:	6019      	str	r1, [r3, #0]
 8008754:	d1de      	bne.n	8008714 <_free_r+0x24>
 8008756:	6810      	ldr	r0, [r2, #0]
 8008758:	6852      	ldr	r2, [r2, #4]
 800875a:	4401      	add	r1, r0
 800875c:	6019      	str	r1, [r3, #0]
 800875e:	605a      	str	r2, [r3, #4]
 8008760:	e7d8      	b.n	8008714 <_free_r+0x24>
 8008762:	d902      	bls.n	800876a <_free_r+0x7a>
 8008764:	230c      	movs	r3, #12
 8008766:	602b      	str	r3, [r5, #0]
 8008768:	e7d4      	b.n	8008714 <_free_r+0x24>
 800876a:	6820      	ldr	r0, [r4, #0]
 800876c:	1821      	adds	r1, r4, r0
 800876e:	428a      	cmp	r2, r1
 8008770:	bf01      	itttt	eq
 8008772:	6811      	ldreq	r1, [r2, #0]
 8008774:	6852      	ldreq	r2, [r2, #4]
 8008776:	1809      	addeq	r1, r1, r0
 8008778:	6021      	streq	r1, [r4, #0]
 800877a:	6062      	str	r2, [r4, #4]
 800877c:	605c      	str	r4, [r3, #4]
 800877e:	e7c9      	b.n	8008714 <_free_r+0x24>
 8008780:	bd38      	pop	{r3, r4, r5, pc}
 8008782:	bf00      	nop
 8008784:	20000680 	.word	0x20000680

08008788 <_malloc_r>:
 8008788:	b570      	push	{r4, r5, r6, lr}
 800878a:	1ccd      	adds	r5, r1, #3
 800878c:	f025 0503 	bic.w	r5, r5, #3
 8008790:	3508      	adds	r5, #8
 8008792:	2d0c      	cmp	r5, #12
 8008794:	bf38      	it	cc
 8008796:	250c      	movcc	r5, #12
 8008798:	2d00      	cmp	r5, #0
 800879a:	4606      	mov	r6, r0
 800879c:	db01      	blt.n	80087a2 <_malloc_r+0x1a>
 800879e:	42a9      	cmp	r1, r5
 80087a0:	d903      	bls.n	80087aa <_malloc_r+0x22>
 80087a2:	230c      	movs	r3, #12
 80087a4:	6033      	str	r3, [r6, #0]
 80087a6:	2000      	movs	r0, #0
 80087a8:	bd70      	pop	{r4, r5, r6, pc}
 80087aa:	f000 f87d 	bl	80088a8 <__malloc_lock>
 80087ae:	4a21      	ldr	r2, [pc, #132]	; (8008834 <_malloc_r+0xac>)
 80087b0:	6814      	ldr	r4, [r2, #0]
 80087b2:	4621      	mov	r1, r4
 80087b4:	b991      	cbnz	r1, 80087dc <_malloc_r+0x54>
 80087b6:	4c20      	ldr	r4, [pc, #128]	; (8008838 <_malloc_r+0xb0>)
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	b91b      	cbnz	r3, 80087c4 <_malloc_r+0x3c>
 80087bc:	4630      	mov	r0, r6
 80087be:	f000 f863 	bl	8008888 <_sbrk_r>
 80087c2:	6020      	str	r0, [r4, #0]
 80087c4:	4629      	mov	r1, r5
 80087c6:	4630      	mov	r0, r6
 80087c8:	f000 f85e 	bl	8008888 <_sbrk_r>
 80087cc:	1c43      	adds	r3, r0, #1
 80087ce:	d124      	bne.n	800881a <_malloc_r+0x92>
 80087d0:	230c      	movs	r3, #12
 80087d2:	4630      	mov	r0, r6
 80087d4:	6033      	str	r3, [r6, #0]
 80087d6:	f000 f868 	bl	80088aa <__malloc_unlock>
 80087da:	e7e4      	b.n	80087a6 <_malloc_r+0x1e>
 80087dc:	680b      	ldr	r3, [r1, #0]
 80087de:	1b5b      	subs	r3, r3, r5
 80087e0:	d418      	bmi.n	8008814 <_malloc_r+0x8c>
 80087e2:	2b0b      	cmp	r3, #11
 80087e4:	d90f      	bls.n	8008806 <_malloc_r+0x7e>
 80087e6:	600b      	str	r3, [r1, #0]
 80087e8:	18cc      	adds	r4, r1, r3
 80087ea:	50cd      	str	r5, [r1, r3]
 80087ec:	4630      	mov	r0, r6
 80087ee:	f000 f85c 	bl	80088aa <__malloc_unlock>
 80087f2:	f104 000b 	add.w	r0, r4, #11
 80087f6:	1d23      	adds	r3, r4, #4
 80087f8:	f020 0007 	bic.w	r0, r0, #7
 80087fc:	1ac3      	subs	r3, r0, r3
 80087fe:	d0d3      	beq.n	80087a8 <_malloc_r+0x20>
 8008800:	425a      	negs	r2, r3
 8008802:	50e2      	str	r2, [r4, r3]
 8008804:	e7d0      	b.n	80087a8 <_malloc_r+0x20>
 8008806:	684b      	ldr	r3, [r1, #4]
 8008808:	428c      	cmp	r4, r1
 800880a:	bf16      	itet	ne
 800880c:	6063      	strne	r3, [r4, #4]
 800880e:	6013      	streq	r3, [r2, #0]
 8008810:	460c      	movne	r4, r1
 8008812:	e7eb      	b.n	80087ec <_malloc_r+0x64>
 8008814:	460c      	mov	r4, r1
 8008816:	6849      	ldr	r1, [r1, #4]
 8008818:	e7cc      	b.n	80087b4 <_malloc_r+0x2c>
 800881a:	1cc4      	adds	r4, r0, #3
 800881c:	f024 0403 	bic.w	r4, r4, #3
 8008820:	42a0      	cmp	r0, r4
 8008822:	d005      	beq.n	8008830 <_malloc_r+0xa8>
 8008824:	1a21      	subs	r1, r4, r0
 8008826:	4630      	mov	r0, r6
 8008828:	f000 f82e 	bl	8008888 <_sbrk_r>
 800882c:	3001      	adds	r0, #1
 800882e:	d0cf      	beq.n	80087d0 <_malloc_r+0x48>
 8008830:	6025      	str	r5, [r4, #0]
 8008832:	e7db      	b.n	80087ec <_malloc_r+0x64>
 8008834:	20000680 	.word	0x20000680
 8008838:	20000684 	.word	0x20000684

0800883c <_realloc_r>:
 800883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883e:	4607      	mov	r7, r0
 8008840:	4614      	mov	r4, r2
 8008842:	460e      	mov	r6, r1
 8008844:	b921      	cbnz	r1, 8008850 <_realloc_r+0x14>
 8008846:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800884a:	4611      	mov	r1, r2
 800884c:	f7ff bf9c 	b.w	8008788 <_malloc_r>
 8008850:	b922      	cbnz	r2, 800885c <_realloc_r+0x20>
 8008852:	f7ff ff4d 	bl	80086f0 <_free_r>
 8008856:	4625      	mov	r5, r4
 8008858:	4628      	mov	r0, r5
 800885a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800885c:	f000 f826 	bl	80088ac <_malloc_usable_size_r>
 8008860:	42a0      	cmp	r0, r4
 8008862:	d20f      	bcs.n	8008884 <_realloc_r+0x48>
 8008864:	4621      	mov	r1, r4
 8008866:	4638      	mov	r0, r7
 8008868:	f7ff ff8e 	bl	8008788 <_malloc_r>
 800886c:	4605      	mov	r5, r0
 800886e:	2800      	cmp	r0, #0
 8008870:	d0f2      	beq.n	8008858 <_realloc_r+0x1c>
 8008872:	4631      	mov	r1, r6
 8008874:	4622      	mov	r2, r4
 8008876:	f7ff ff17 	bl	80086a8 <memcpy>
 800887a:	4631      	mov	r1, r6
 800887c:	4638      	mov	r0, r7
 800887e:	f7ff ff37 	bl	80086f0 <_free_r>
 8008882:	e7e9      	b.n	8008858 <_realloc_r+0x1c>
 8008884:	4635      	mov	r5, r6
 8008886:	e7e7      	b.n	8008858 <_realloc_r+0x1c>

08008888 <_sbrk_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	2300      	movs	r3, #0
 800888c:	4c05      	ldr	r4, [pc, #20]	; (80088a4 <_sbrk_r+0x1c>)
 800888e:	4605      	mov	r5, r0
 8008890:	4608      	mov	r0, r1
 8008892:	6023      	str	r3, [r4, #0]
 8008894:	f7f7 ff7a 	bl	800078c <_sbrk>
 8008898:	1c43      	adds	r3, r0, #1
 800889a:	d102      	bne.n	80088a2 <_sbrk_r+0x1a>
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	b103      	cbz	r3, 80088a2 <_sbrk_r+0x1a>
 80088a0:	602b      	str	r3, [r5, #0]
 80088a2:	bd38      	pop	{r3, r4, r5, pc}
 80088a4:	20000e6c 	.word	0x20000e6c

080088a8 <__malloc_lock>:
 80088a8:	4770      	bx	lr

080088aa <__malloc_unlock>:
 80088aa:	4770      	bx	lr

080088ac <_malloc_usable_size_r>:
 80088ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088b0:	1f18      	subs	r0, r3, #4
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	bfbc      	itt	lt
 80088b6:	580b      	ldrlt	r3, [r1, r0]
 80088b8:	18c0      	addlt	r0, r0, r3
 80088ba:	4770      	bx	lr

080088bc <_init>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	bf00      	nop
 80088c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c2:	bc08      	pop	{r3}
 80088c4:	469e      	mov	lr, r3
 80088c6:	4770      	bx	lr

080088c8 <_fini>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	bf00      	nop
 80088cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ce:	bc08      	pop	{r3}
 80088d0:	469e      	mov	lr, r3
 80088d2:	4770      	bx	lr
